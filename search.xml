<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>HTTP2 详解</title>
      <link href="/2018/05-HTTP2.html"/>
      <url>/2018/05-HTTP2.html</url>
      <content type="html"><![CDATA[<p>维基百科关于 HTTP/2 的介绍，可以看下定义和发展历史:</p><p><a href="https://zh.wikipedia.org/wiki/HTTP/2" target="_blank" rel="noopener">Wiki</a></p><p>RFC 7540 定义了 HTTP/2 的协议规范和细节，本文的细节主要来自此文档，建议先看一遍本文，再回过头来照着协议大致过一遍 RFC，如果想深入某些细节再仔细翻看 RFC</p><p><a href="https://httpwg.org/specs/rfc7540.html" target="_blank" rel="noopener">RFC7540</a></p><h2 id="Why-use-it"><a href="#Why-use-it" class="headerlink" title="Why use it ?"></a>Why use it ?</h2><h3 id="HTTP-1-1-存在的问题"><a href="#HTTP-1-1-存在的问题" class="headerlink" title="HTTP/1.1 存在的问题:"></a>HTTP/1.1 存在的问题:</h3><p>1、<strong>TCP 连接数限制</strong></p><p>对于同一个域名，浏览器最多只能同时创建 6~8 个 TCP 连接 (不同浏览器不一样)。为了解决数量限制，出现了 <code>域名分片</code> 技术，其实就是资源分域，将资源放在不同域名下 (比如二级子域名下)，这样就可以针对不同域名创建连接并请求，以一种讨巧的方式突破限制，但是滥用此技术也会造成很多问题，比如每个 TCP 连接本身需要经过 DNS 查询、三步握手、慢启动等，还占用额外的 CPU 和内存，对于服务器来说过多连接也容易造成网络拥挤、交通阻塞等，对于移动端来说问题更明显，可以参考这篇文章: <a href="http://dev.mobify.com/blog/domain-sharding-bad-news-mobile-performance/" target="_blank" rel="noopener">Why Domain Sharding is Bad News for Mobile Performance and Users</a></p><p><img src="/images/http/HOLB-1.png" alt="image"></p><p><img src="/images/http/HOLB-2.png" alt="image"></p><p>在图中可以看到新建了六个 TCP 连接，每次新建连接 DNS 解析需要时间(几 ms 到几百 ms 不等)、TCP 慢启动也需要时间、TLS 握手又要时间，而且后续请求都要等待队列调度</p><p>2、<strong><a href="https://zh.wikipedia.org/wiki/%E9%98%9F%E5%A4%B4%E9%98%BB%E5%A1%9E" target="_blank" rel="noopener">线头阻塞 (Head Of Line Blocking)</a> 问题</strong></p><p>每个 TCP 连接同时只能处理一个请求 - 响应，浏览器按 FIFO 原则处理请求，如果上一个响应没返回，后续请求 - 响应都会受阻。为了解决此问题，出现了 <a href="https://zh.wikipedia.org/wiki/HTTP%E7%AE%A1%E7%B7%9A%E5%8C%96" target="_blank" rel="noopener">管线化 - pipelining</a> 技术，但是管线化存在诸多问题，比如第一个响应慢还是会阻塞后续响应、服务器为了按序返回相应需要缓存多个响应占用更多资源、浏览器中途断连重试服务器可能得重新处理多个请求、还有必须客户端 - 代理 - 服务器都支持管线化</p><p>3、Header 内容多，而且每次请求 Header 不会变化太多，没有相应的压缩传输优化方案</p><p>4、为了尽可能减少请求数，需要做合并文件、雪碧图、资源内联等优化工作，但是这无疑造成了单个请求内容变大延迟变高的问题，且内嵌的资源不能有效地使用缓存机制</p><p>5、明文传输不安全</p><h3 id="HTTP2-的优势"><a href="#HTTP2-的优势" class="headerlink" title="HTTP2 的优势:"></a>HTTP2 的优势:</h3><h4 id="1、二进制分帧层-Binary-Framing-Layer"><a href="#1、二进制分帧层-Binary-Framing-Layer" class="headerlink" title="1、二进制分帧层 (Binary Framing Layer)"></a>1、二进制分帧层 (Binary Framing Layer)</h4><p>帧是数据传输的最小单位，以二进制传输代替原本的明文传输，原本的报文消息被划分为更小的数据帧:</p><p><img src="/images/http/http2-frame.png" alt="image"></p><p>h1 和 h2 的报文对比:</p><p><img src="/images/http/h1-message.png" alt="image"><br><img src="/images/http/h2-message.png" alt="image"></p><p>图中 h2 的报文是重组解析过后的，可以发现一些头字段发生了变化，而且所有头字段均小写</p><blockquote><p><code>strict-transport-security: max-age=63072000; includeSubdomains</code> 字段是服务器开启 <a href="https://zh.wikipedia.org/wiki/HTTP%E4%B8%A5%E6%A0%BC%E4%BC%A0%E8%BE%93%E5%AE%89%E5%85%A8" target="_blank" rel="noopener">HSTS 策略</a>，让浏览器强制使用 HTTPS 进行通信，可以减少重定向造成的额外请求和会话劫持的风险</p></blockquote><blockquote><p>服务器开启 HSTS 的方法是: 以 nginx 为例，在相应站点的 server 模块中添加 <code>add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains&quot; always;</code> 即可</p></blockquote><blockquote><p>在 Chrome 中可以打开 <code>chrome://net-internals/#hsts</code> 进入浏览器的 HSTS 管理界面，可以增加 / 删除 / 查询 HSTS 记录，比如下图:</p></blockquote><blockquote><p><img src="/images/http/HSTS.png" alt="image"></p></blockquote><blockquote><p>在 HSTS 有效期内且 TLS 证书仍有效，浏览器访问 blog.wangriyu.wang 会自动加上 https:// ，而不需要做一次查询重定向到 https</p></blockquote><p>关于帧详见: <a href="#帧---frame">How does it work ？- 帧</a></p><h4 id="2、多路复用-MultiPlexing"><a href="#2、多路复用-MultiPlexing" class="headerlink" title="2、多路复用 (MultiPlexing)"></a>2、多路复用 (MultiPlexing)</h4><p>在一个 TCP 连接上，我们可以向对方不断发送帧，每帧的 stream identifier 的标明这一帧属于哪个流，然后在对方接收时，根据 stream identifier 拼接每个流的所有帧组成一整块数据。<br>把 HTTP/1.1 每个请求都当作一个流，那么多个请求变成多个流，请求响应数据分成多个帧，不同流中的帧交错地发送给对方，这就是 HTTP/2 中的多路复用。</p><p>流的概念实现了单连接上多请求 - 响应并行，解决了线头阻塞的问题，减少了 TCP 连接数量和 TCP 连接慢启动造成的问题</p><p>所以 http2 对于同一域名只需要创建一个连接，而不是像 http/1.1 那样创建 6~8 个连接:</p><p><img src="/images/http/ConnectionView-h1.png" alt="image"><br><img src="/images/http/ConnectionView-h2.png" alt="image"></p><p>关于流详见: <a href="#流---stream">How does it work ？- 流</a></p><h4 id="3、服务端推送-Server-Push"><a href="#3、服务端推送-Server-Push" class="headerlink" title="3、服务端推送 (Server Push)"></a>3、服务端推送 (Server Push)</h4><p>浏览器发送一个请求，服务器主动向浏览器推送与这个请求相关的资源，这样浏览器就不用发起后续请求。</p><p>Server-Push 主要是针对资源内联做出的优化，相较于 http/1.1 资源内联的优势:</p><ul><li>客户端可以缓存推送的资源</li><li>客户端可以拒收推送过来的资源</li><li>推送资源可以由不同页面共享</li><li>服务器可以按照优先级推送资源</li></ul><p>关于服务端推送详见: <a href="#server-push">How does it work ？- Server-Push</a></p><h4 id="4、Header-压缩-HPACK"><a href="#4、Header-压缩-HPACK" class="headerlink" title="4、Header 压缩 (HPACK)"></a>4、Header 压缩 (HPACK)</h4><p>使用 <a href="https://httpwg.org/specs/rfc7541.html" target="_blank" rel="noopener">HPACK</a> 算法来压缩首部内容</p><p>关于 HPACK 详见: <a href="#hpack-算法">How does it work ？- HPACK</a></p><h4 id="5、应用层的重置连接"><a href="#5、应用层的重置连接" class="headerlink" title="5、应用层的重置连接"></a>5、应用层的重置连接</h4><p>对于 HTTP/1 来说，是通过设置 tcp segment 里的 reset flag 来通知对端关闭连接的。这种方式会直接断开连接，下次再发请求就必须重新建立连接。HTTP/2 引入 RST_STREAM 类型的 frame，可以在不断开连接的前提下取消某个 request 的 stream，表现更好。</p><h4 id="6、请求优先级设置"><a href="#6、请求优先级设置" class="headerlink" title="6、请求优先级设置"></a>6、请求优先级设置</h4><p>HTTP/2 里的每个 stream 都可以设置依赖 (Dependency) 和权重，可以按依赖树分配优先级，解决了关键请求被阻塞的问题</p><h4 id="7、流量控制"><a href="#7、流量控制" class="headerlink" title="7、流量控制"></a>7、流量控制</h4><p>每个 http2 流都拥有自己的公示的流量窗口，它可以限制另一端发送数据。对于每个流来说，两端都必须告诉对方自己还有足够的空间来处理新的数据，而在该窗口被扩大前，另一端只被允许发送这么多数据。</p><p>关于流量控制详见: <a href="#流量控制">How does it work ？- 流量控制</a></p><h4 id="8、HTTP-1-的几种优化可以弃用"><a href="#8、HTTP-1-的几种优化可以弃用" class="headerlink" title="8、HTTP/1 的几种优化可以弃用"></a>8、HTTP/1 的几种优化可以弃用</h4><p>合并文件、内联资源、雪碧图、域名分片对于 HTTP/2 来说是不必要的，使用 h2 尽可能将资源细粒化，文件分解地尽可能散，不用担心请求数多</p><h2 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work ?"></a>How does it work ?</h2><h3 id="帧-Frame"><a href="#帧-Frame" class="headerlink" title="帧 - Frame"></a>帧 - Frame</h3><h4 id="帧的结构"><a href="#帧的结构" class="headerlink" title="帧的结构"></a>帧的结构</h4><p>所有帧都是一个固定的 9 字节头部 (payload 之前) 跟一个指定长度的负载 (payload):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------------------------+</span><br><span class="line">|                 Length (24)                   |</span><br><span class="line">+---------------+---------------+---------------+</span><br><span class="line">|   Type (8)    |   Flags (8)   |</span><br><span class="line">+-+-------------+---------------+-------------------------------+</span><br><span class="line">|R|                 Stream Identifier (31)                      |</span><br><span class="line">+=+=============================================================+</span><br><span class="line">|                   Frame Payload (0...)                      ...</span><br><span class="line">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure><ul><li><code>Length</code> 代表整个 frame 的长度，用一个 24 位无符号整数表示。除非接收者在 SETTINGS_MAX_FRAME_SIZE 设置了更大的值 (大小可以是 2^14(16384) 字节到 2^24-1(16777215) 字节之间的任意值)，否则数据长度不应超过 2^14(16384) 字节。头部的 9 字节不算在这个长度里</li><li><code>Type</code> 定义 frame 的类型，用 8 bits 表示。帧类型决定了帧主体的格式和语义，如果 type 为 unknown 应该忽略或抛弃。</li><li><code>Flags</code> 是为帧类型相关而预留的布尔标识。标识对于不同的帧类型赋予了不同的语义。如果该标识对于某种帧类型没有定义语义，则它必须被忽略且发送的时候应该赋值为 (0x0)</li><li><code>R</code> 是一个保留的比特位。这个比特的语义没有定义，发送时它必须被设置为 (0x0), 接收时需要忽略。</li><li><a href="https://httpwg.org/specs/rfc7540.html#StreamIdentifiers" target="_blank" rel="noopener">Stream Identifier</a> 用作流控制，用 31 位无符号整数表示。客户端建立的 sid 必须为奇数，服务端建立的 sid 必须为偶数，值 (0x0) 保留给与整个连接相关联的帧 (连接控制消息)，而不是单个流</li><li><code>Frame Payload</code> 是主体内容，由帧类型决定</li></ul><p>共分为十种类型的帧:</p><ul><li><code>HEADERS</code>: 报头帧 (type=0x1)，用来打开一个流或者携带一个首部块片段</li><li><code>DATA</code>: 数据帧 (type=0x0)，装填主体信息，可以用一个或多个 DATA 帧来返回一个请求的响应主体</li><li><code>PRIORITY</code>: 优先级帧 (type=0x2)，指定发送者建议的流优先级，可以在任何流状态下发送 PRIORITY 帧，包括空闲 (idle) 和关闭 (closed) 的流</li><li><code>RST_STREAM</code>: 流终止帧 (type=0x3)，用来请求取消一个流，或者表示发生了一个错误，payload 带有一个 32 位无符号整数的错误码 (<a href="https://httpwg.org/specs/rfc7540.html#ErrorCodes" target="_blank" rel="noopener">Error Codes</a>)，不能在处于空闲 (idle) 状态的流上发送 RST_STREAM 帧</li><li><code>SETTINGS</code>: 设置帧 (type=0x4)，设置此 <code>连接</code> 的参数，作用于整个连接</li><li><code>PUSH_PROMISE</code>: 推送帧 (type=0x5)，服务端推送，客户端可以返回一个 RST_STREAM 帧来选择拒绝推送的流</li><li><code>PING</code>: PING 帧 (type=0x6)，判断一个空闲的连接是否仍然可用，也可以测量最小往返时间 (RTT)</li><li><code>GOAWAY</code>: GOWAY 帧 (type=0x7)，用于发起关闭连接的请求，或者警示严重错误。GOAWAY 会停止接收新流，并且关闭连接前会处理完先前建立的流</li><li><code>WINDOW_UPDATE</code>: 窗口更新帧 (type=0x8)，用于执行流量控制功能，可以作用在单独某个流上 (指定具体 Stream Identifier) 也可以作用整个连接 (Stream Identifier 为 0x0)，只有 DATA 帧受流量控制影响。初始化流量窗口后，发送多少负载，流量窗口就减少多少，如果流量窗口不足就无法发送，WINDOW_UPDATE 帧可以增加流量窗口大小</li><li><code>CONTINUATION</code>: 延续帧 (type=0x9)，用于继续传送首部块片段序列，见 <a href="#首部的压缩与解压缩">首部的压缩与解压缩</a></li></ul><h4 id="DATA-帧格式"><a href="#DATA-帧格式" class="headerlink" title="DATA 帧格式"></a>DATA 帧格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+---------------+</span><br><span class="line">|Pad Length? (8)|</span><br><span class="line">+---------------+-----------------------------------------------+</span><br><span class="line">|                            Data (*)                         ...</span><br><span class="line">+---------------------------------------------------------------+</span><br><span class="line">|                           Padding (*)                       ...</span><br><span class="line">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure><ul><li><code>Pad Length</code>: ? 表示此字段的出现时有条件的，需要设置相应标识 (set flag)，指定 Padding 长度，存在则代表 PADDING flag 被设置</li><li><code>Data</code>: 传递的数据，其长度上限等于帧的 payload 长度减去其他出现的字段长度</li><li><code>Padding</code>: 填充字节，没有具体语义，发送时必须设为 0，作用是混淆报文长度，与 TLS 中 CBC 块加密类似，详见 <a href="https://httpwg.org/specs/rfc7540.html#padding" target="_blank" rel="noopener">https://httpwg.org/specs/rfc7540.html#padding</a></li></ul><p>DATA 帧有如下标识 (flags):</p><ul><li>END_STREAM: bit 0 设为 1 代表当前流的最后一帧</li><li>PADDED: bit 3 设为 1 代表存在 Padding</li></ul><p>例子:</p><p><img src="/images/http/DATA-Frame1.png" alt="image"></p><p><img src="/images/http/DATA-Frame2.png" alt="image"></p><p><img src="/images/http/DATA-Frame3.png" alt="image"></p><h4 id="HEADERS-帧格式"><a href="#HEADERS-帧格式" class="headerlink" title="HEADERS 帧格式"></a>HEADERS 帧格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------+</span><br><span class="line">|Pad Length? (8)|</span><br><span class="line">+-+-------------+-----------------------------------------------+</span><br><span class="line">|E|                 Stream Dependency? (31)                     |</span><br><span class="line">+-+-------------+-----------------------------------------------+</span><br><span class="line">|  Weight? (8)  |</span><br><span class="line">+-+-------------+-----------------------------------------------+</span><br><span class="line">|                   Header Block Fragment (*)                 ...</span><br><span class="line">+---------------------------------------------------------------+</span><br><span class="line">|                           Padding (*)                       ...</span><br><span class="line">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure><ul><li><code>Pad Length</code>: 指定 Padding 长度，存在则代表 PADDING flag 被设置</li><li><code>E</code>: 一个比特位声明流的依赖性是否是排他的，存在则代表 PRIORITY flag 被设置</li><li><code>Stream Dependency</code>: 指定一个 stream identifier，代表当前流所依赖的流的 id，存在则代表 PRIORITY flag 被设置</li><li><code>Weight</code>: 一个无符号 8 为整数，代表当前流的优先级权重值 (1~256)，存在则代表 PRIORITY flag 被设置</li><li><code>Header Block Fragment</code>: header 块片段</li><li><code>Padding</code>: 填充字节，没有具体语义，作用与 DATA 的 Padding 一样，存在则代表 PADDING flag 被设置</li></ul><p>HEADERS 帧有以下标识 (flags):</p><ul><li>END_STREAM: bit 0 设为 1 代表当前 header 块是发送的最后一块，但是带有 END_STREAM 标识的 HEADERS 帧后面还可以跟 CONTINUATION 帧 (这里可以把 CONTINUATION 看作 HEADERS 的一部分)</li><li>END_HEADERS: bit 2 设为 1 代表 header 块结束</li><li>PADDED: bit 3 设为 1 代表 Pad 被设置，存在 Pad Length 和 Padding</li><li>PRIORITY: bit 5 设为 1 表示存在 Exclusive Flag (E), Stream Dependency, 和 Weight</li></ul><p>例子:</p><p><img src="/images/http/HEADERS-Frame.png" alt="image"></p><p><img src="/images/http/HEADERS-Response.png" alt="image"></p><h4 id="首部的压缩与解压缩"><a href="#首部的压缩与解压缩" class="headerlink" title="首部的压缩与解压缩"></a>首部的压缩与解压缩</h4><p>HTTP/2 里的首部字段也是一个键具有一个或多个值。这些首部字段用于 HTTP 请求和响应消息，也用于服务端推送操作。</p><p>首部列表是零个或多个首部字段的集合。当通过连接传送时，首部列表被 <code>HTTP header compression</code> 序列化成首部块。然后，序列化的首部块又被划分成一个或多个叫做首部块片段 (Header Block Fragment) 的字节序列，并通过 HEADERS、PUSH_PROMISE，或者 CONTINUATION 帧进行有效负载传送。</p><blockquote><p>Cookie 首部字段需要 HTTP 映射特殊对待，见 <a href="https://httpwg.org/specs/rfc7540.html#CompressCookie" target="_blank" rel="noopener">8.1.2.5. Compressing the Cookie Header Field</a></p></blockquote><p>一个完整的 header 块有两种可能，(1) 一个 HEADERS 帧或 PUSH_PROMISE 帧加上设置 END_HEADERS flag，(2) 一个未设置 END_HEADERS flag 的 HEADERS 帧或 PUSH_PROMISE 帧加上多个 CONTINUATION 帧，其中最后一个 CONTINUATION 帧设置 END_HEADERS flag</p><p>必须将首部块作为连续的帧序列传送，不能插入任何其他类型或其他流的帧。尾帧设置 END_HEADERS 标识代表首部块结束，这让首部块在逻辑上等价于一个单独的帧。接收端连接片段重组首部块，然后解压首部块重建首部列表。</p><p><img src="/images/http/End-Stream.png" alt="image"></p><h4 id="SETTINGS-帧格式"><a href="#SETTINGS-帧格式" class="headerlink" title="SETTINGS 帧格式"></a>SETTINGS 帧格式</h4><p><a href="https://httpwg.org/specs/rfc7540.html#SETTINGS" target="_blank" rel="noopener">https://httpwg.org/specs/rfc7540.html#SETTINGS</a></p><p>一个 SETTINGS 帧的 payload 由零个或多个参数组成，每个参数的形式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-------------------------------+</span><br><span class="line">|       Identifier (16)         |</span><br><span class="line">+-------------------------------+-------------------------------+</span><br><span class="line">|                        Value (32)                             |</span><br><span class="line">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure><ul><li><code>Identifier</code>: 代表参数类型，比如 SETTINGS_HEADER_TABLE_SIZE 是 0x1</li><li><code>Value</code>: 相应参数的值</li></ul><p>在建立连接开始时双方都要发送 SETTINGS 帧以表明自己期许对方应做的配置，对方接收后同意配置参数便返回带有 ACK 标识的空 SETTINGS 帧表示确认，而且连接后任意时刻任意一方也都可能再发送 SETTINGS 帧调整，SETTINGS 帧中的参数会被最新接收到的参数覆盖</p><p>SETTINGS 帧作用于整个连接，而不是某个流，而且 SETTINGS 帧的 stream identifier 必须是 0x0，否则接收方会认为错误 (PROTOCOL_ERROR)。</p><p>SETTINGS 帧包含以下参数:</p><ul><li>SETTINGS_HEADER_TABLE_SIZE (0x1): 用于解析 Header block 的 Header 压缩表的大小，初始值是 4096 字节</li><li>SETTINGS_ENABLE_PUSH (0x2): 可以关闭 Server Push，该值初始为 1，表示允许服务端推送功能</li><li>SETTINGS_MAX_CONCURRENT_STREAMS (0x3): 代表发送端允许接收端创建的最大流数目</li><li>SETTINGS_INITIAL_WINDOW_SIZE (0x4): 指明发送端所有流的流量控制窗口的初始大小，会影响所有流，该初始值是 2^16 - 1(65535) 字节，最大值是 2^31 - 1，如果超出最大值则会返回 FLOW_CONTROL_ERROR</li><li>SETTINGS_MAX_FRAME_SIZE (0x5): 指明发送端允许接收的最大帧负载的字节数，初始值是 2^14(16384) 字节，如果该值不在初始值 (2^14) 和最大值 (2^24 - 1) 之间，返回 PROTOCOL_ERROR</li><li>SETTINGS_MAX_HEADER_LIST_SIZE (0x6): 通知对端，发送端准备接收的首部列表大小的最大字节数。该值是基于未压缩的首部域大小，包括名称和值的字节长度，外加每个首部域的 32 字节的开销</li></ul><p>SETTINGS 帧有以下标识 (flags):</p><ul><li>ACK: bit 0 设为 1 代表已接收到对方的 SETTINGS 请求并同意设置，设置此标志的 SETTINGS 帧 payload 必须为空</li></ul><p>例子:</p><p><img src="/images/http/SETTINGS-Frame.png" alt="image"></p><p>实际抓包会发现 HTTP2 请求创建连接发送 SETTINGS 帧初始化前还有一个 Magic 帧 (建立 HTTP/2 请求的前言)。</p><p>在 HTTP/2 中，要求两端都要发送一个连接前言，作为对所使用协议的最终确认，并确定 HTTP/2 连接的初始设置，客户端和服务端各自发送不同的连接前言。</p><p>客户端的前言内容 (对应上图中编号 23 的帧) 包含一个内容为 <code>PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n</code> 的序列加上一个可以为空的 SETTINGS 帧，在收到 101(Switching Protocols) 响应 (代表 upgrade 成功) 后发送，或者作为 TLS 连接的第一个传输的应用数据。如果在预先知道服务端支持 HTTP/2 的情况下启用 HTTP/2 连接，客户端连接前言在连接建立时发送。</p><p>服务端的前言 (对应上图中编号 26 的帧) 包含一个可以为空的 SETTINGS 帧，在建立 HTTP/2 连接后作为第一帧发送。详见 <a href="https://httpwg.org/specs/rfc7540.html#ConnectionHeader" target="_blank" rel="noopener">HTTP/2 Connection Preface</a></p><p>发送完前言后双方都得向对方发送带有 ACK 标识的 SETTINGS 帧表示确认，对应上图中编号 29 和 31 的帧。</p><p>请求站点的全部帧序列，帧后面的数字代表所属流的 id，最后以 GOAWAY 帧关闭连接:</p><p><img src="/images/http/All-Frame.png" alt="image"></p><p>GOAWAY 帧带有最大的那个流标识符 (比如图中第 29 帧是最大流)，对于发送方来说会继续处理完不大于此数字的流，然后再真正关闭连接</p><h3 id="流-Stream"><a href="#流-Stream" class="headerlink" title="流 - Stream"></a>流 - Stream</h3><p>流只是一个逻辑上的概念，代表 HTTP/2 连接中在客户端和服务器之间交换的独立双向帧序列，每个帧的 Stream Identifier 字段指明了它属于哪个流。</p><p>流有以下特性:</p><ul><li>单个 h2 连接可以包含多个并发的流，两端之间可以交叉发送不同流的帧</li><li>流可以由客户端或服务器来单方面地建立和使用，或者共享</li><li>流可以由任一方关闭</li><li>帧在流上发送的顺序非常重要，最后接收方会把相同 Stream Identifier (同一个流) 的帧重新组装成完整消息报文</li></ul><h4 id="流的状态"><a href="#流的状态" class="headerlink" title="流的状态"></a>流的状态</h4><p><img src="/images/http/stream-state.png" alt="image"></p><blockquote><p>注意图中的 send 和 recv 对象是指端点，不是指当前的流</p></blockquote><h5 id="idle"><a href="#idle" class="headerlink" title="idle"></a>idle</h5><p>所有流以“空闲”状态开始。在这种状态下，没有任何帧的交换</p><p>其状态转换:</p><ul><li>发送或者接收一个 HEADERS 帧会使空闲 <code>idle</code> 流变成打开 <code>open</code> 状态，其中 HEADERS 帧的 Stream Identifier 字段指明了流 id。同样的 HEADERS 帧(带有 END_STREAM )也可以使一个流立即进入 half-closed 状态。</li><li>服务端必须在一个打开 <code>open</code> 或者半关闭 (远端) <code>half-closed(remote)</code> 状态的流 (由客户端发起的) 上发送 PUSH_PROMISE 帧，其中 PUSH_PROMISE 帧的 Promised Stream ID 字段指定了一个预示的新流 (由服务端发起)，<ul><li>在服务端该新流会由空闲 <code>idle</code> 状态进入被保留的 (本地) <code>reserved(local)</code> 状态</li><li>在客户端该新流会由空闲 <code>idle</code> 状态进入被保留的 (远端) <code>reserved(remote)</code> 状态</li></ul></li></ul><blockquote><p>在 <a href="https://httpwg.org/specs/rfc7540.html#discover-http" target="_blank" rel="noopener">3.2 - Starting HTTP/2 for “http” URIs</a> 中介绍了一种特殊情况:</p><blockquote><p>客户端发起一个 HTTP/1.1 请求，请求带有 Upgrade 机制，想创建 h2c 连接，服务端同意升级返回 101 响应。<br>升级之前发送的 HTTP/1.1 请求被分配一个流标识符 0x1，并被赋予默认优先级值。从客户端到服务端这个流 1 隐式地转为 “half-closed” 状态，因为作为 HTTP/1.1 请求它已经完成了。HTTP/2 连接开始后，流 1 用于响应。详细过程可以看下文的 <a href="#http2-的协议协商机制">HTTP/2 的协议协商机制</a></p></blockquote></blockquote><p>此状态下接收到 HEADERS 和 PRIORITY 以外的帧被视为 PROTOCOL_ERROR</p><p>状态图中 <code>send PP</code> 和 <code>recv PP</code> 是指连接的双方端点发送或接收了 PUSH_PROMISE，不是指某个空闲流发送或接收了 PUSH_PROMISE，是 PUSH_PROMISE 的出现促使一个预示的流从 <code>idle</code> 状态转为 <code>reserved</code></p><blockquote><p>在下文 <a href="#server-push">Server-Push</a> 中会详细介绍服务端推送的内容和 PUSH_PROMISE 的使用情形</p></blockquote><h5 id="reserved-local-reserved-remote"><a href="#reserved-local-reserved-remote" class="headerlink" title="reserved (local) / reserved (remote)"></a>reserved (local) / reserved (remote)</h5><p>PUSH_PROMISE 预示的流由 <code>idle</code> 状态进入此状态，代表准备进行 Server push</p><p>其状态转换:</p><ul><li>PUSH_PROMISE 帧预示的流的响应以 HEADERS 帧开始，这会立即将该流在服务端置于半关闭 (远端) <code>half-closed(remote)</code> 状态，在客户端置于半关闭 (本地) <code>half-closed(local)</code> 状态，最后以携带 END_STREAM 的帧结束，这会将流置于关闭 <code>closed</code> 状态</li><li>任一端点都可以发送 RST_STREAM 帧来终止这个流，其状态由 <code>reserved</code> 转为 <code>closed</code></li></ul><p><code>reserved(local)</code> 状态下的流不能发送 HEADERS、RST_STREAM、PRIORITY 以外的帧，接收到 RST_STREAM、PRIORITY、WINDOW_UPDATE 以外的帧被视为 PROTOCOL_ERROR</p><p><code>reserved(remote)</code> 状态下的流不能发送 RST_STREAM、WINDOW_UPDATE、PRIORITY 以外的帧，接收到 HEADERS、RST_STREAM、PRIORITY 以外的帧被视为 PROTOCOL_ERROR</p><h5 id="open"><a href="#open" class="headerlink" title="open"></a>open</h5><p>处于 <code>open</code> 状态的流可以被两个对端用来发送任何类型的帧</p><p>其状态转换:</p><ul><li>任一端都可以发送带有 END_STREAM 标识的帧，发送方会转入 <code>half-closed(local)</code> 状态；接收方会转入 <code>half-closed(remote)</code> 状态</li><li>任一端都可以发送 RST_STREAM 帧，这会使流立即进入 <code>closed</code> 状态</li></ul><h5 id="half-closed-local"><a href="#half-closed-local" class="headerlink" title="half-closed (local)"></a>half-closed (local)</h5><p>流是双向的，半关闭表示这个流单向关闭了，local 代表本端到对端的方向关闭了，remote 代表对端到本端的方向关闭了</p><p>此状态下的流不能发送 WINDOW_UPDATE、PRIORITY、RST_STREAM 以外的帧</p><p>当此状态下的流收到带有 END_STREAM 标识的帧或者任一方发送 RST_STREAM 帧，会转为 <code>closed</code> 状态</p><p>此状态下的流收到的 PRIORITY 帧用以调整流的依赖关系顺序，可以看下文的流优先级</p><h5 id="half-closed-remote"><a href="#half-closed-remote" class="headerlink" title="half-closed (remote)"></a>half-closed (remote)</h5><p>此状态下的流不会被对端用于发送帧，执行流量控制的端点不再有义务维护接收方的流控制窗口。</p><p>一个端点在此状态的流上接收到 WINDOW_UPDATE、PRIORITY、RST_STREAM 以外的帧，应该响应一个 STREAM_CLOSED 流错误</p><p>此状态下的流可以被端点用于发送任意类型的帧，且此状态下该端点仍会观察流级别的流控制的限制</p><p>当此状态下的流发送带有 END_STREAM 标识的帧或者任一方发送 RST_STREAM 帧，会转为 <code>closed</code> 状态</p><h5 id="closed"><a href="#closed" class="headerlink" title="closed"></a>closed</h5><p>代表流已关闭</p><p>此状态下的流不能发送 PRIORITY 以外的帧，发送 PRIORITY 帧是调整那些依赖这个已关闭的流的流优先级，端点都应该处理 PRIORITY 帧，尽管如果该流从依赖关系树中移除了也可以忽略优先级帧</p><p>此状态下在收到带有 END_STREAM 标识的 DATA 或 HEADERS 帧后的一小段时间内 (period) 仍可能接收到 WINDOW_UPDATE 或 RST_STREAM 帧，因为在远程对端接收并处理 RST_STREAM 或带有 END_STREAM 标志的帧之前，它可能会发送这些类型的帧。但是端点必须忽略接收到的 WINDOW_UPDATE 或 RST_STREAM</p><p>如果一个流发送了 RST_STREAM 帧后转入此状态，而对端接收到 RST_STREAM 帧时可能已经发送了或者处在发送队列中，这些帧是不可撤销的，发送 RST_STREAM 帧的端点必须忽略这些帧。</p><p>一个端点可以限制 period 的长短，在 period 内接受的帧会忽略，超出 period 的帧被视为错误。</p><p>一个端点发送了 RST_STREAM 帧后接收到流控制帧(比如 DATA)，仍会计入流量窗口，即使这些帧会被忽略，因为对端肯定是在接收到 RST_STREAM 帧前发送的流控制帧，对端会认为流控制已生效</p><p>一个端点可能会在发送了 RST_STREAM 帧后收到 PUSH_PROMISE 帧，即便预示的流已经被重置 (reset)，PUSH_PROMISE 帧也能使预示流变成 <code>reserved</code> 状态。因此，需要 RST_STREAM 来关闭一个不想要的预示流。</p><blockquote><p>PRIORITY 帧可以被任意状态的流发送和接收，未知类型的帧会被忽略</p></blockquote><h5 id="流状态的转换"><a href="#流状态的转换" class="headerlink" title="流状态的转换"></a>流状态的转换</h5><p>下面看两个例子来理解流状态:</p><p><img src="/images/http/ServerPushStreamState.png" alt="image"></p><p>(1)、Server 在 Client 发起的一个流上发送 PUSH_PROMISE 帧，其 Promised Stream ID 指定一个预示流用于后续推送，send PP 后这个预示流在服务端从 idle 状态转为 reserve(local) 状态，客户端 recv PP 后这个流从 idle 状态转为 reserve(remote) 状态</p><p>(2)(3)、此时预示流处于保留状态，客户端如果选择拒绝接受推送，可以发送 RST 帧关闭这个流；服务端如果此时出问题了也可以发送 RST 帧取消推送。不管哪一方发送或接收到 RST，此状态都转为 closed</p><p>(4)、没有出现重置说明推送仍有效，则服务端开始推送，首先发送的肯定是响应的 HEADERS 首部块，此时流状态转为半关闭 half-closed(remote)；客户端接收到 HEADERS 后流状态转为半关闭 half-closed(local)</p><p>(5)(6)、半关闭状态下的流应该还会继续推送诸如 DATA 帧、CONTINUATION 帧这样的数据帧，如果这个过程碰到任一方发起重置，则流会关闭进入 closed 状态</p><p>(7)、如果一切顺利，资源随着数据帧响应完毕，最后一帧会带上 END_STREAM 标识代表这个流结束了，此时流转为 closed 状态</p><p><img src="/images/http/RequestStreamState.png" alt="image"></p><p>(1)、客户端发起请求，首先发送一个 HEADERS 帧，其 Stream Identifier 创建一个新流，此流从 idle 状态转为 open 状态</p><p>(2)(3)、如果客户端取消请求可以发送 RST 帧，服务端出错也可以发送 RST 帧，不管哪一方接收或发送 RST，流关闭进入 closed 状态；</p><p>(4)、如果请求结束(END_STREAM)，流转为半关闭状态。假如是 GET 请求，一般 HEADERS 帧就是最后一帧，send H 后流会立即进入半关闭状态。假如是 POST 请求，待数据传完，最后一帧带上 END_STREAM 标识，流转为半关闭</p><p>(5)(6)、客户端半关闭后服务端开始返回响应，此时任一方接收或发送 RST，流关闭；</p><p>(7)、如果一切顺利，等待响应结束(END_STREAM)，流关闭</p><h4 id="流的标识符"><a href="#流的标识符" class="headerlink" title="流的标识符"></a>流的标识符</h4><p>流 ID 是 31 位无符号整数，客户端发起的流必须是奇数，服务端发起的流必须是偶数，0x0 保留为连接控制消息不能用于建立新流。</p><p>HTTP/1.1 Upgrade to HTTP/2 时响应的流 ID 是 0x1，在升级完成之后，流 0x1 在客户端会转为 <code>half-closed (local)</code> 状态，因此这种情况下客户端不能用 0x1 初始化一个流</p><p>新建立的流的 ID 必须大于所有已使用过的数字，接收到一个错误大小的 ID 应该返回 PROTOCOL_ERROR 响应</p><p>使用一个新流时隐式地关闭了对端发起的 ID 小于当前流的且处于 <code>idle</code> 状态的流，比如一个流发送一个 HEADERS 帧打开了 ID 为 7 的流，但还从未向 ID 为 5 的流发送过帧，则流 0x5 会在 0x7 发送完或接收完第一帧后转为 <code>closed</code> 状态</p><p>一个连接内的流 ID 不能重用</p><h4 id="流的优先级"><a href="#流的优先级" class="headerlink" title="流的优先级"></a>流的优先级</h4><p>客户端可以通过 HEADERS 帧的 PRIORITY 信息指定一个新建立流的优先级，其他期间也可以发送 PRIORITY 帧调整流优先级</p><p>设置优先级的目的是为了让端点表达它所期望对端在并发的多个流之间如何分配资源的行为。更重要的是，当发送容量有限时，可以使用优先级来选择用于发送帧的流。</p><p>流可以被标记为依赖其他流，所依赖的流完成后再处理当前流。每个依赖 (dependency) 后都跟着一个权重 (weight)，这一数字是用来确定依赖于相同的流的可分配可用资源的相对比例</p><h5 id="流依赖-Stream-Dependencies"><a href="#流依赖-Stream-Dependencies" class="headerlink" title="流依赖(Stream Dependencies)"></a>流依赖(Stream Dependencies)</h5><p>每个流都可以显示地依赖另一个流，包含依赖关系表示优先将资源分配给指定的流(上层节点)而不是依赖流</p><p>一个不依赖于其他流的流会指定 stream dependency 为 0x0 值，因为不存在的 0x0 流代表依赖树的根</p><p>一个依赖于其他流的流叫做<strong>依赖流</strong>，被依赖的流是当前流的父级。如果被依赖的流不在当前依赖树中(比如状态为 <code>idle</code> 的流)，被依赖的流会使用一个默认优先级</p><p>当依赖一个流时，该流会添加进父级的依赖关系中，共享相同父级的依赖流不会相对于彼此进行排序，比如 B 和 C 依赖 A，新添加一个依赖流 D，BCD 的顺序是不固定的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  A                 A</span><br><span class="line"> / \      ==&gt;      /|\</span><br><span class="line">B   C             B D C</span><br></pre></td></tr></table></figure><p>独占标识 (exclusive) 允许插入一个新层级(新的依赖关系)，独占标识导致该流成为父级的唯一依赖流，而其他依赖流变为其子级，比如同样插入一个新依赖流 E (带有 exclusive):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">                    A</span><br><span class="line">  A                 |</span><br><span class="line"> /|\      ==&gt;       E</span><br><span class="line">B D C              /|\</span><br><span class="line">                  B D C</span><br></pre></td></tr></table></figure><p>在依赖关系树中，只有当一个依赖流所依赖的所有流(父级最高为 0x0 的链)被关闭或者无法继续在上面执行，这个依赖流才应该被分配资源</p><h5 id="依赖权重"><a href="#依赖权重" class="headerlink" title="依赖权重"></a>依赖权重</h5><p>所有依赖流都会分配一个 1~256 权重值</p><p>相同父级的依赖流按权重比例分配资源，比如流 B 依赖于 A 且权重值为 4，流 C 依赖于 A 且权重值为 12，当 A 不再执行时，B 理论上能分配的资源只有 C 的三分之一</p><h5 id="优先级调整-Reprioritization"><a href="#优先级调整-Reprioritization" class="headerlink" title="优先级调整 (Reprioritization)"></a>优先级调整 (Reprioritization)</h5><p>使用 PRIORITY 帧可以调整流优先级</p><p>PRIORITY 帧内容与 HEADERS 帧的优先级模块相同:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-+-------------------------------------------------------------+</span><br><span class="line">|E|                  Stream Dependency (31)                     |</span><br><span class="line">+-+-------------+-----------------------------------------------+</span><br><span class="line">|   Weight (8)  |</span><br><span class="line">+-+-------------+</span><br></pre></td></tr></table></figure><ul><li><p>如果父级重新设置了优先级，则依赖流会随其父级流一起移动。若调整优先级的流带有独占标识，会导致新的父流的所有子级依赖于这个流</p></li><li><p>如果一个流调整为依赖自己的一个子级，则这个将被依赖的子级首先移至调整流的父级之下(即同一层)，再移动那个调整流的整棵子树，移动的依赖关系保持其权重</p></li></ul><p>看下面这个例子: 第一个图是初始关系树，现在 A 要调整为依赖 D，根据第二点，现将 D 移至 x 之下，再把 A 调整为 D 的子树(图 3)，如果 A 调整时带有独占标识根据第一点 F 也归为 A 子级(图 4)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  x                x                x                 x</span><br><span class="line">  |               / \               |                 |</span><br><span class="line">  A              D   A              D                 D</span><br><span class="line"> / \            /   / \            / \                |</span><br><span class="line">B   C     ==&gt;  F   B   C   ==&gt;    F   A       OR      A</span><br><span class="line">   / \                 |             / \             /|\</span><br><span class="line">  D   E                E            B   C           B C F</span><br><span class="line">  |                                     |             |</span><br><span class="line">  F                                     E             E</span><br><span class="line">             (intermediate)   (non-exclusive)    (exclusive)</span><br></pre></td></tr></table></figure><h5 id="流优先级的状态管理"><a href="#流优先级的状态管理" class="headerlink" title="流优先级的状态管理"></a>流优先级的状态管理</h5><p>当一个流从依赖树中移除，它的子级可以调整为依赖被关闭流的父级(应该就是连接上一层节点)，新的依赖权重将根据关闭流的权重以及流自身的权重重新计算。</p><p>从依赖树中移除流会导致某些优先级信息丢失。资源在具有相同父级的流之间共享，这意味着如果这个集合中的某个流关闭或者阻塞，任何空闲容量将分配给最近的相邻流。然而，如果此集合的共有依赖(即父级节点)从树中移除，这些子流将与更上一层的流共享资源</p><p>一个例子: 流 A 和流 B 依赖相同父级节点，而流 C 和流 D 都依赖 A，在移除流 A 之前的一段时间内，A 和 D 都无法执行(可能任务阻塞了)，则 C 会分配到 A 的所有资源；<br>如果 A 被移除出树了，A 的权重按比重新计算分配给 C 和 D，此时 D 仍旧阻塞，C 分配的资源相较之前变少了。对于同等的初始权重，C 获取到的可用资源是三分之一而不是二分之一(为什么是三分之一?文档中没有说明细节，权重如何重新分配也不太清楚，下面是按我的理解解释的)</p><p>X 的资源为 1，ABCD 初始权重均为 16，*号代表节点当前不可用，图一中 C 和 B 各占一半资源，而 A 移除后 CD 的权重重新分配变为 8，所以图二中 C 和 B 占比变为 1:2，R(C) 变为 1/3<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">         X(v:1.0)               X(v:1.0)</span><br><span class="line">        / \                    /|\</span><br><span class="line">       /   \                  / | \</span><br><span class="line">     *A     B       ==&gt;      /  |  \</span><br><span class="line">   (w:16) (w:16)            /   |   \</span><br><span class="line">     / \                   C   *D    B</span><br><span class="line">    /   \                (w:8)(w:8)(w:16)</span><br><span class="line">   C    *D</span><br><span class="line">(w:16) (w:16)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">R(C)=16/(16+16)=1/2 ==&gt;  R(C)=8/(8+16)=1/3</span><br></pre></td></tr></table></figure><p></p><p>可能向一个流创建依赖关系的优先级信息还在传输中，那个流就已经关闭了。如果一个依赖流的依赖指向没有相关优先级信息(即父节点无效)，则这个依赖流会分配默认优先级，这可能会造成不理想的优先级，因为给流分配了不在预期的优先级。</p><p>为了避免上述问题，一个端点应该在流关闭后的一段时间内保留流的优先级调整状态信息，此状态保留时间越长，流被分配错误的或者默认的优先级可能性越低。</p><p>类似地，处于“空闲”状态的流可以被分配优先级或成为其他流的父节点。这允许在依赖关系树中创建分组节点，从而实现更灵活的优先级表达式。空闲流以默认优先级开始</p><p>流优先级状态信息的保留可能增加终端的负担，因此这种状态可以被限制。终端可能根据负荷来决定保留的额外的状态的数目；在高负荷下，可以丢弃额外的优先级状态来限制资源的任务。在极端情况下，终端甚至可以丢弃激活或者保留状态流的优先级信息。如果使用了固定的限制，终端应当至少保留跟 SETTINGS_MAX_CONCURRENT_STREAMS 设置一样大小的流状态</p><h5 id="默认优先级"><a href="#默认优先级" class="headerlink" title="默认优先级"></a>默认优先级</h5><p>所有流都是初始为非独占地依赖于流 0x0。</p><p>Pushed 流初始依赖于相关的流(见 Server-Push)。</p><p>以上两种情况，流的权重都指定为 16。</p><h3 id="Server-Push"><a href="#Server-Push" class="headerlink" title="Server-Push"></a>Server-Push</h3><h4 id="PUSH-PROMISE-帧格式"><a href="#PUSH-PROMISE-帧格式" class="headerlink" title="PUSH_PROMISE 帧格式"></a>PUSH_PROMISE 帧格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+</span><br><span class="line">|Pad Length? (8)|</span><br><span class="line">+-+-------------+-----------------------------------------------+</span><br><span class="line">|R|                  Promised Stream ID (31)                    |</span><br><span class="line">+-+-----------------------------+-------------------------------+</span><br><span class="line">|                   Header Block Fragment (*)                 ...</span><br><span class="line">+---------------------------------------------------------------+</span><br><span class="line">|                           Padding (*)                       ...</span><br><span class="line">+---------------------------------------------------------------+</span><br></pre></td></tr></table></figure><ul><li><code>Pad Length</code>: 指定 Padding 长度，存在则代表 PADDING flag 被设置</li><li><code>R</code>: 保留的1bit位</li><li><code>Promised Stream ID</code>: 31 位的无符号整数，代表 PUSH_PROMISE 帧保留的流，对于发送者来说该流标识符必须是可用于下一个流的有效值</li><li><code>Header Block Fragment</code>: 包含请求首部域的首部块片段</li><li><code>Padding</code>: 填充字节，没有具体语义，作用与 DATA 的 Padding 一样，存在则代表 PADDING flag 被设置</li></ul><p>PUSH_PROMISE 帧有以下标识 (flags):</p><ul><li>END_HEADERS: bit 2 置 1 代表 header 块结束</li><li>PADDED: bit 3 置 1 代表 Pad 被设置，存在 Pad Length 和 Padding</li></ul><h4 id="Push-的过程"><a href="#Push-的过程" class="headerlink" title="Push 的过程"></a>Push 的过程</h4><p>结合上文关于 Server-Push 的流状态转换</p><p>PUSH_PROMISE 帧只能在对端(客户端)发起的且流状态为 open 或者 half-closed (remote) 的流上发送</p><p>PUSH_PROMISE 帧准备推送的响应总是和来自于客户端的请求相关联。服务端在该请求所在的流上发送 PUSH_PROMISE 帧。PUSH_PROMISE 帧包含一个 Promised Stream ID，该流标识符是从服务端可用的流标识符里选出来的。</p><p>如果服务端收到了一个对文档的请求，该文档包含内嵌的指向多个图片文件的链接，且服务端选择向客户端推送那些额外的图片，那么在发送包含图片链接的 DATA 帧之前发送 PUSH_PROMISE 帧可以确保客户端在发现内嵌的链接之前，能够知道有一个资源将要被推送过来。同样地，如果服务端准备推送被首部块引用的响应 (比如，在 <a href="https://www.w3.org/wiki/LinkHeader" target="_blank" rel="noopener">Link 首部字段</a> 里的)，在发送首部块之前发送一个 PUSH_PROMISE 帧，可以确保客户端不再请求那些资源</p><p>一旦客户端收到了 PUSH_PROMISE 帧，并选择接收被推送的响应，客户端就不应该为准备推送的响应发起任何请求，直到预示的流被关闭以后。</p><p><img src="/images/http/PUSH_PROMISE_1.png" alt="image"></p><p><img src="/images/http/PUSH_PROMISE_2.png" alt="image"></p><blockquote><p>注意图中推送的四个资源各预示了一个流 (Promised Stream ID)，而发送 PUSH_PROMISE 帧的还是在客户端发起的请求流 (Stream Identifier = 1) 上，客户端收到 PUSH_PROMISE 帧并选择接收便不会对这四个资源发起请求，之后服务端会发起预示的流然后推送资源相关的响应</p></blockquote><p>不管出于什么原因，如果客户端决定不再从服务端接收准备推送的响应，或者如果服务端花费了太长时间准备发送被预示的响应，客户端可以发送一个 RST_STREAM 帧，该帧可以使用 CANCEL 或者 REFUSED_STEAM 码，并引用被推送的流标识符。</p><h4 id="nginx-配置-Server-Push"><a href="#nginx-配置-Server-Push" class="headerlink" title="nginx 配置 Server-Push"></a>nginx 配置 Server-Push</h4><blockquote><p>server-push 需要服务端设置，并不是说浏览器发起请求，与此请求相关的资源服务端就会自动推送</p></blockquote><p>以 nginx 为例，从版本 1.13.9 开始正式支持 hppt2 serverpush 功能，</p><p>在相应 server 或 location 模块中加入 <code>http2_push</code> 字段加上相对路径的文件即可在请求该资源时推送相关资源，比如我的博客设置如下，访问首页时有四个文件会由服务器主动推送过去而不需要客户端请求:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server_name  blog.wangriyu.wang;</span><br><span class="line">root /blog;</span><br><span class="line">index index.html index.htm;</span><br><span class="line"></span><br><span class="line">location = /index.html &#123;</span><br><span class="line">  http2_push /css/style.css;</span><br><span class="line">  http2_push /js/main.js;</span><br><span class="line">  http2_push /img/yule.jpg;</span><br><span class="line">  http2_push /img/avatar.jpg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过浏览器控制台可以查看 <code>Push</code> 响应:</p><p><img src="/images/http/server-push.png" alt="image"></p><p>也可以用 <code>nghttp</code> 测试 push 响应 (* 号代表是服务端推送的):</p><p><img src="/images/http/nghttp-serverpush.png" alt="image"></p><p>上面 <code>http2_push</code> 的设置适合静态资源，服务端事先知道哪些文件是客户端需要的，然后选择性推送</p><p>假如是后台应用动态生成的文件(比如 json 文件)，服务器事先不知道要推送什么，可以用 <code>Link</code> 响应头来做自动推送</p><p>在 server 模块中添加 <code>http2_push_preload on;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server_name  blog.wangriyu.wang;</span><br><span class="line">root /blog;</span><br><span class="line">index index.html index.htm;</span><br><span class="line"></span><br><span class="line">http2_push_preload on;</span><br></pre></td></tr></table></figure><p>然后设置响应头 (add_header) 或者后台程序生成数据文件返回时带上响应头 Link 标签，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Link: &lt;/style.css&gt;; as=style; rel=preload, &lt;/main.js&gt;; as=script; rel=preload, &lt;/image.jpg&gt;; as=image; rel=preload</span><br></pre></td></tr></table></figure><p>nginx 会根据 Link 响应头主动推送这些资源</p><p>更多nginx 官方介绍见 <a href="https://www.nginx.com/blog/nginx-1-13-9-http2-server-push/" target="_blank" rel="noopener">Introducing HTTP/2 Server Push with NGINX 1.13.9</a></p><h4 id="Server-Push-潜在的问题"><a href="#Server-Push-潜在的问题" class="headerlink" title="Server-Push 潜在的问题"></a>Server-Push 潜在的问题</h4><p>看了这篇文章 <a href="https://imququ.com/post/server-push-in-http2.html" target="_blank" rel="noopener">HTTP/2 中的 Server Push 讨论</a>，发现 Server-Push 有个潜在的问题</p><p>Server-Push 满足条件时便会发起推送，可是客户端已经有缓存了想发送 RST 拒收，而服务器在收到 RST 之前已经推送资源了，虽然这部分推送无效但是肯定会占用带宽</p><p>比如我上面博客关于 http2_push 的配置，我每次打开首页服务器都会推送那四个文件，而实际上浏览器知道自己有缓存使用的也是本地缓存，也就是说本地缓存未失效的期间内，服务器的 Server-Push 只是起到了占用带宽的作用</p><p>当然实际上对我的小站点来说影响并不大，但是如果网站需要大量推送的话，需要考虑并测试 Server-Push 是否会影响用户的后续访问</p><p>另外服务端可以设置 Cookie 或者 Session 记录访问时间，然后之后的访问判断是否需要 Push；还有就是客户端可以限制 PUSH 流的数目，也可以设置一个很低的流量窗口来限制 PUSH 发送的数据大小</p><p>至于哪些资源需要推送，在《web 性能权威指南》中就提到几种策略，比如 Apache 的 mod_spdy 能够识别 X-Associated-Content 首部，当中列出了希望服务器推送的资源；另外网上有人已经做了基于 Referer 首部的中间件来处理 Server-Push；或者服务端能更智能的识别文档，根据当前流量决定是否推送或者推送那些资源。相信以后会有更多关于 Server-Push 的实现和应用</p><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>多路复用的流会竞争 TCP 资源，进而导致流被阻塞。流控制机制确保同一连接上的流不会相互干扰。流量控制作用于单个流或整个连接。HTTP/2 通过使用 WINDOW_UPDATE 帧来提供流量控制。</p><p>流控制具有以下特征:</p><ul><li>流量控制是特定于连接的。两种级别的流量控制都位于单跳的端点之间，而不是整个端到端的路径。比如 server 前面有一个 front-end proxy 如 Nginx，这时就会有两个 connection，browser-Nginx, Nginx—server，flow control 分别作用于两个 connection。详情见: <a href="https://stackoverflow.com/questions/40747040/how-is-http-2-hop-by-hop-flow-control-accomplished" target="_blank" rel="noopener">How is HTTP/2 hop-by-hop flow control accomplished? - stackoverflow</a></li><li>流量控制是基于 WINDOW_UPDATE 帧的。接收方公布自己打算在每个流以及整个连接上分别接收多少字节。这是一个以信用为基础的方案。</li><li>流量控制是有方向的，由接收者全面控制。接收方可以为每个流和整个连接设置任意的窗口大小。发送方必须尊重接收方设置的流量控制限制。客户方、服务端和中间代理作为接收方时都独立地公布各自的流量控制窗口，作为发送方时都遵守对端的流量控制设置。</li><li>无论是新流还是整个连接，流量控制窗口的初始值是 65535 字节。</li><li>帧的类型决定了流量控制是否适用于帧。目前，只有 DATA 帧会受流量控制影响，所有其它类型的帧并不消耗流量控制窗口的空间。这保证了重要的控制帧不会被流量控制阻塞。</li><li>流量控制不能被禁用。</li><li>HTTP/2 只定义了 WINDOW_UPDATE 帧的格式和语义，并没有规定接收方如何决定何时发送帧、发送什么样的值，也没有规定发送方如何选择发送包。具体实现可以选择任何满足需求的算法。</li></ul><h4 id="WINDOW-UPDATE-帧格式"><a href="#WINDOW-UPDATE-帧格式" class="headerlink" title="WINDOW_UPDATE 帧格式"></a>WINDOW_UPDATE 帧格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+-+-------------------------------------------------------------+</span><br><span class="line">|R|                Window Size Increment (31)                   |</span><br><span class="line">+-+-------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>Window Size Increment 表示除了现有的流量控制窗口之外，发送端还可以传送的字节数。取值范围是 1 到 2^31 - 1 字节。</p><p>WINDOW_UPDATE 帧可以是针对一个流或者是针对整个连接的。如果是前者，WINDOW_UPDATE 帧的流标识符指明了受影响的流；如果是后者，流标识符为 0 表示作用于整个连接。</p><p>流量控制功能只适用于被标识的、受流量控制影响的帧。文档定义的帧类型中，只有 DATA 帧受流量控制影响。除非接收端不能再分配资源去处理这些帧，否则不受流量控制影响的帧必须被接收并处理。如果接收端不能再接收帧了，可以响应一个 FLOW_CONTROL_ERROR 类型的流错误或者连接错误。</p><p>WINDOW_UPDATE 可以由发送过带有 END_STREAM 标志的帧的对端发送。这意味着接收端可能会在 half-closed (remote) 或者 closed 状态的流上收到 WINDOW_UPDATE 帧，接收端不能将其当做错误。</p><h4 id="流量控制窗口"><a href="#流量控制窗口" class="headerlink" title="流量控制窗口"></a>流量控制窗口</h4><p>流量控制窗口是一个简单的整数值，指出了准许发送端传送的数据的字节数。窗口值衡量了接收端的缓存能力。</p><p>除非将其当做连接错误，否则当接收端收到 DATA 帧时，必须总是从流量控制窗口中减掉其长度(不包括帧头的长度，而且两个级别的控制窗口都要减)。即使帧有错误，这也是有必要的，因为发送端已经将该帧计入流量控制窗口，如果接收端没有这样做，发送端和接收端的流量控制窗口就会不一致。</p><p>发送端不能发送受流量控制影响的、其长度超出接收端告知的两种级别的流量控制窗口可用空间的帧。即使这两种级别的流量控制窗口都没有可用空间了，也可以发送长度为 0、设置了 END_STREAM 标志的帧(即空的 DATA 帧)。</p><p>当帧的接收端消耗了数据并释放了流量控制窗口的空间时，可以发送一个 WINDOW_UPDATE 帧。对于流级别和连接级别的流量控制窗口，需要分别发送 WINDOW_UPDATE 帧。</p><p>新建连接时，流和连接的初始窗口大小都是 2^16 - 1(65535) 字节。可以通过设置连接前言中 SETTINGS 帧的 SETTINGS_INITIAL_WINDOW_SIZE 参数改变流的初始窗口大小，这会作用于所有流。而<code>连接的初始窗口大小不能改，但可以用 WINDOW_UPDATE 帧来改变流量控制窗口</code>，这是为什么连接前言往往带有一个 WINDOW_UPDATE 帧的原因。</p><p>除了改变还未激活的流的流量控制窗口外，SETTIGNS 帧还可以改变已活跃的流 (处于 open 或 half-closed (remote) 状态的流)的初始流量控制窗口的大小。也就是说，当 SETTINGS_INITIAL_WINDOW_SIZE 的值变化时，接收端必须调整它所维护的所有流的流量控制窗口的值，不管是之前就打开的流还是尚未打开的流。</p><p>改变 SETTINGS_INITIAL_WINDOW_SIZE 可能引发流量控制窗口的可用空间变成负值。发送端必须追踪负的流量控制窗口，并且直到它收到了使流量控制窗口变成正值的 WINDOW_UPDATE 帧，才能发送新的 DATA 帧。</p><p>例如，如果连接一建立客户端就立即发送 60KB 的数据，而服务端却将初始窗口大小设置为 16KB，那么客户端一收到 SETTINGS 帧，就会将可用的流量控制窗口重新计算为 -44KB。客户端保持负的流量控制窗口，直到 WINDOW_UPDATE 帧将窗口值恢复为正值，客户端才可以继续发送数据。</p><p>如果改变 SETTINGS_INITIAL_WINDOW_SIZE 导致流量控制窗口超出了最大值，一端必须 将其当做类型为 FLOW_CONTROL_ERROR 的连接错误</p><p>如果接收端希望使用比当前值小的流量控制窗口，可以发送一个新的 SETTINGS 帧。但是，接收端必须准备好接收超出该窗口值的数据，因为可能在收到 SETTIGNS 帧之前，发送端已经发送了超出该较小窗口值的数据。</p><h4 id="合理使用流控制"><a href="#合理使用流控制" class="headerlink" title="合理使用流控制"></a>合理使用流控制</h4><p>流量控制的定义是用来保护端点在资源约束条件下的操作。例如，一个代理需要在很多连接之间共享内存，也有可能有缓慢的上游连接和快速的下游连接。流量控制解决了接收方无法在一个流上处理数据，但仍希望继续处理同一连接中的其他流的情况。</p><p>不需要此功能的部署可以通告最大大小 (2^31 - 1) 的流量控制窗口，并且可以通过在收到任何数据时发送 WINDOW_UPDATE 帧来维护此窗口大小保持不变。这可以有效禁用接受方的流控制。相反地，发送方总是受控于接收方通告的流控制窗口的限制。</p><p>资源约束下(例如内存)的调度可以使用流量来限制一个对端可以消耗的内存量。需要注意的是如果在不知道带宽延迟积的时候启用流量控制可能导致无法最优的利用可用的网络资源 (RFC1323)。</p><p>即便是对当前的网络延迟乘积有充分的认识，流量控制的实现也可能很复杂。当使用流量控制时，接收端必须及时地从 TCP 接收缓冲区读取数据。这样做可能导致在一些例如 WINDOW_UPDATE 的关键帧在 HTTP/2 不可用时导致死锁。但是流量控制可以保证约束资源能在不需要减少连接利用的情况下得到保护。</p><h3 id="HTTP-2-的协议协商机制"><a href="#HTTP-2-的协议协商机制" class="headerlink" title="HTTP/2 的协议协商机制"></a>HTTP/2 的协议协商机制</h3><h4 id="非加密下的协商-h2c"><a href="#非加密下的协商-h2c" class="headerlink" title="非加密下的协商 - h2c"></a>非加密下的协商 - h2c</h4><p>客户端使用 HTTP Upgrade 机制请求升级，HTTP2-Settings 首部字段是一个专用于连接的首部字段，它包含管理 HTTP/2 连接的参数(使用 Base64 编码)，其前提是假设服务端会接受升级请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: server.example.com</span><br><span class="line">Connection: Upgrade, HTTP2-Settings</span><br><span class="line">Upgrade: h2c</span><br><span class="line">HTTP2-Settings: &lt;base64url encoding of HTTP/2 SETTINGS payload&gt;</span><br></pre></td></tr></table></figure><p>服务器如果支持 http/2 并同意升级，则转换协议，否则忽略</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Upgrade: h2c</span><br></pre></td></tr></table></figure><p>此时潜在的存在一个流 0x1，客户端上这个流在完成 h1 请求后便转为 <code>half-closed</code> 状态，服务端会用这个流返回响应</p><p><img src="/images/http/h1-&gt;h2-1.png" alt="image"></p><p><img src="/images/http/h1-&gt;h2-2.png" alt="image"></p><p><img src="/images/http/h1-&gt;h2-3.png" alt="image"></p><p>注意图中第一个响应所在的流是 0x1，与上文所说的一致</p><p>目前浏览器只支持 TLS 加密下的 HTTP/2 通信，所以上述情况在浏览器中目前是不可能碰到的，图中显示的是 nghttp 客户端发起的请求</p><h4 id="加密的协商机制-h2"><a href="#加密的协商机制-h2" class="headerlink" title="加密的协商机制 - h2"></a>加密的协商机制 - h2</h4><p>TLS 加密中在 Client-Hello 和 Server-Hello 的过程中通过 <a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%8D%8F%E5%95%86" target="_blank" rel="noopener">ALPN</a> 进行协议协商</p><p><img src="/images/http/application_layer_protocol_negotiation_1.png" alt="image"></p><p>应用层协议协商在 TLS 握手第一步的扩展中，Client Hello 中客户端指定 ALPN Next Protocol 为 h2 或者 http/1.1 说明客户端支持的协议</p><p><img src="/images/http/application_layer_protocol_negotiation_2.png" alt="image"></p><p>服务端如果在 Server Hello 中选择 h2 扩展，说明协商协议为 h2，后续请求响应跟着变化；如果服务端未设置 http/2 或者不支持 h2，则继续用 http/1.1 通信</p><h3 id="分析实例"><a href="#分析实例" class="headerlink" title="分析实例"></a>分析实例</h3><p><img src="/images/http/all-frames.png" alt="image"></p><p>196: TLS 握手第一步 Client Hello，开始协议协商，且此处带上了 Session Ticket</p><p>200: Server Hello 同意使用 h2，而且客户端的会话票证有效，恢复会话，握手成功</p><p>202: 客户端也恢复会话，开始加密后续消息</p><p>205: 服务端发起一个连接前言 (SETTINGS)，SETTINGS 帧中设置了最大并行流数量、初始窗口大小、最大帧长度，然后 (WINDOW_UPDATE) 扩大窗口大小</p><p>310: 客户端也发送一个连接前言 Magic，并初始化设置 (SETTINGS)，SETTINGS 帧中设置了 HEADER TABLE 大小、初始窗口大小、最大并行流数量，然后 (WINDOW_UPDATE) 扩大窗口大小</p><p>311: 客户端发送完连接前言后可以立即跟上一个请求，GET / (HEADERS[1])，而且这个 HEADERS 帧还带有 END_STREAM，这会使流 1 从 idle 状态立即转为 half-closed(local) 状态 (open 是中间态)</p><p><img src="/images/http/all-frames-1.png" alt="image"></p><p>311: 此消息中还包含一个客户端发送给服务端的带 ACK 的 SETTINGS 帧</p><p>312: 服务端也响应带 ACK 的 SETTINGS 帧</p><p>321: 服务端在流 1 (此时状态为 half-closed(remote)) 上发送了四个 PUSH_PROMISE 帧，它们分别保留了流 2、4、6、8 用于后续推送，</p><p><img src="/images/http/all-frames-2.png" alt="image"></p><p>321: 此消息中还返回了上面请求的响应 (HEADERS - DATA)，最后 DATA 带上 END_STREAM，流 1 从 half-closed 转为 closed</p><p>329: 调整流优先级，依赖关系: 8 -&gt; 6 -&gt; 4 -&gt; 2 -&gt; 1 (都带有独占标志，而且权重均为 110)</p><p><img src="/images/http/priority-1.png" alt="image"></p><p>342: 流 1 关闭后，流 2 得到分配资源，服务器开始推送，数据由两个 DATA 帧返回</p><p>344: 流 2 结束，开始推送流 4</p><p>356: 调整依赖关系</p><p><img src="/images/http/priority-2.png" alt="image"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1         1         1         1(w: 110)</span><br><span class="line">|         |         |         |</span><br><span class="line">2         2         2         2(w: 110)</span><br><span class="line">|         |         |         |</span><br><span class="line">4   ==&gt;   4   ==&gt;   6   ==&gt;   6(w: 147)</span><br><span class="line">|         |         |         |</span><br><span class="line">6         8         4         8(w: 147)</span><br><span class="line">|         |         |         |</span><br><span class="line">8         6         8         4(w: 110)</span><br></pre></td></tr></table></figure><p>367、369、372: 推送 6 和 8 的流数据</p><p>377: 发起一个请求，打开流 3，其中客户端发起的请求都是依赖流 0x0</p><p>之后都是同样的套路完成请求 - 响应，最后以 GOAWAY 帧关闭连接结束</p><h3 id="HPACK-算法"><a href="#HPACK-算法" class="headerlink" title="HPACK 算法"></a>HPACK 算法</h3><p><img src="/images/http/hpack.png" alt="image"></p><h2 id="What-then"><a href="#What-then" class="headerlink" title="What then ?"></a>What then ?</h2><h3 id="HTTP-2-演示"><a href="#HTTP-2-演示" class="headerlink" title="HTTP/2 演示"></a>HTTP/2 演示</h3><p><a href="https://http2.akamai.com/demo" target="_blank" rel="noopener">https://http2.akamai.com/demo</a></p><p><a href="https://http2.golang.org/" target="_blank" rel="noopener">https://http2.golang.org/</a></p><p>网站启用 h2 的前后对比，使用 <a href="http://www.webpagetest.org/" target="_blank" rel="noopener">WebPageTest</a> 做的测试，第一张是 h1，第二张是 h2:</p><p><img src="/images/http/webtest-h1.png" alt="image"><br><img src="/images/http/webtest-h2.png" alt="image"></p><h3 id="使用-HTTP-2-建议"><a href="#使用-HTTP-2-建议" class="headerlink" title="使用 HTTP/2 建议"></a>使用 HTTP/2 建议</h3><p>nginx 开启 HTTP2 只需在相应的 HTTPS 设置后加上 <code>http2</code> 即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listen [::]:443 ssl http2 ipv6only=on;</span><br><span class="line">listen 443 ssl http2;</span><br></pre></td></tr></table></figure><h4 id="以下几点是-HTTP-1-和-HTTP-2-都同样适用的"><a href="#以下几点是-HTTP-1-和-HTTP-2-都同样适用的" class="headerlink" title="以下几点是 HTTP/1 和 HTTP/2 都同样适用的"></a>以下几点是 HTTP/1 和 HTTP/2 都同样适用的</h4><p>1、开启压缩</p><p>配置 gzip 等可以使传输内容更小，传输速度更快</p><p>例如 nginx 可以再 http 模块中加入以下字段，其他字段和详细解释可以谷歌</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gzip  on; // 开启</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line">gzip_comp_level 1; // 压缩级别</span><br><span class="line">gzip_types text/plain application/javascript application/x-javascript application/octet-stream application/json text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml; // 需要压缩的文件类型</span><br><span class="line">gzip_vary on;</span><br><span class="line">gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br></pre></td></tr></table></figure><p>2、使用缓存</p><p>给静态资源设置一个缓存期是非常有必要的，关于缓存见 <a href="request&amp;response.md">HTTP Message</a></p><p>例如 nginx 在 server 模块中添加以下字段可以设置缓存时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">location ~* ^.+\.(ico|gif|jpg|jpeg|png|moc|mtn|mp3|mp4|mov)$ &#123;</span><br><span class="line">  access_log   off;</span><br><span class="line">  expires      30d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* ^.+\.(css|js|txt|xml|swf|wav|json)$ &#123;</span><br><span class="line">  access_log   off;</span><br><span class="line">  expires      5d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* ^.+\.(html|htm)$ &#123;</span><br><span class="line">  expires      24h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* ^.+\.(eot|ttf|otf|woff|svg)$ &#123;</span><br><span class="line">  access_log   off;</span><br><span class="line">  expires 30d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、CDN 加速</p><p>CDN 的好处是就近访问，延迟低，访问快</p><p>4、减少 DNS 查询</p><p>每个域名都需要 DNS 查询，一般需要几毫秒到几百毫秒，移动环境下会更慢。DNS 解析完成之前，请求会被阻塞。减少 DNS 查询也是优化项之一</p><p>浏览器的 <a href="https://en.wikipedia.org/wiki/Link_prefetching" target="_blank" rel="noopener">DNS Prefetching</a> 技术也是一种优化手段</p><p>5、减少重定向</p><p>重定向可能引入新的 DNS 查询、新的 TCP 连接以及新的 HTTP 请求，所以减少重定向也很重要。</p><p>浏览器基本都会缓存通过 301 Moved Permanently 指定的跳转，所以对于永久性跳转，可以考虑使用状态码 301。对于启用了 HTTPS 的网站，配置 HSTS 策略，也可以减少从 HTTP 到 HTTPS 的重定向</p><h4 id="但以下几点就不推荐在-HTTP-2-中用了"><a href="#但以下几点就不推荐在-HTTP-2-中用了" class="headerlink" title="但以下几点就不推荐在 HTTP/2 中用了"></a>但以下几点就不推荐在 HTTP/2 中用了</h4><p>1、域名分片</p><p>HTTP/2 对于同一域名使用一个 TCP 连接足矣，过多 TCP 连接浪费资源而且效果不见得一定好</p><p>而且资源分域会破坏 HTTP/2 的优先级特性，还会降低头部压缩效果</p><p>2、资源合并</p><p>资源合并会不利于缓存机制，而且单文件过大对于 HTTP/2 的传输不好，尽量做到细粒化更有利于 HTTP/2 传输</p><p>3、资源内联</p><p>HTTP/2 支持 Server-Push，相比较内联优势更大效果更好</p><p>而且内联的资源不能有效缓存</p><p>如果有共用，多页面内联也会造成浪费</p><h4 id="HTTP-2-最佳实践"><a href="#HTTP-2-最佳实践" class="headerlink" title="HTTP/2 最佳实践"></a>HTTP/2 最佳实践</h4><p>使用 HTTP/2 尽可能用最少的连接，因为同一个连接上产生的请求和响应越多，动态字典积累得越全，头部压缩效果也就越好，而且多路复用效率高，不会像多连接那样造成资源浪费</p><p>为此需要注意以下两点:</p><ul><li>同一域名下的资源使用同一个连接，这是 HTTP/2 的特性</li><li>不同域名下的资源，如果满足能解析到同一 IP 或者使用的是同一个证书(比如泛域名证书)，HTTP/2 可以合并多个连接</li></ul><p>所以使用相同的 IP 和证书部署 Web 服务是目前最好的选择，因为这让支持 HTTP/2 的终端可以复用同一个连接，实现 HTTP/2 协议带来的好处；而只支持 HTTP/1.1 的终端则会不同域名建立不同连接，达到同时更多并发请求的目的</p><p>比如 Google 一系列网站都是用的同一个证书:</p><p><img src="/images/http/google-dns.png" alt="image"></p><p>但是这好像也会造成一个问题，我使用 nginx 搭建的 webserver，有三个虚拟主机，它们共用一套证书，其中两个我显示地配置了 http2，而剩下一个我并没有配置 http2，结果我访问未配置 http2 的站点时也变成了 http2。</p><p>我猜测应该是共用证书的原因，如果不想启用某个站点的 http2，那就不能共用证书</p><h3 id="大图片传输碰到的问题"><a href="#大图片传输碰到的问题" class="headerlink" title="大图片传输碰到的问题"></a>大图片传输碰到的问题</h3><p>先比较一下 h1 和 h2 的页面加载时间，图中绿色代表发起请求收到响应等待负载的时间，蓝色代表下载负载的时间:</p><p><img src="/images/http/imgs-loadtime-h1.png" alt="image"><br><img src="/images/http/imgs-loadtime-h2.png" alt="image"></p><p>可以发现 h2 加载时间还比 h1 慢一点，特别是碰到大图片时差别更明显</p><p>这篇文章对不同场景下 h1 和 h2 加载图片做了测试: <a href="https://99designs.com/tech-blog/blog/2016/07/14/real-world-http-2-400gb-of-images-per-day/" target="_blank" rel="noopener">Real–world HTTP/2: 400gb of images per day</a></p><p>其结果是:</p><ul><li><p>对一个典型的富图像，延迟限制 (latency–bound) 的界面来说。使用一个高速，低延迟的连接，视觉完成度 (visual completion) 平均会快 5%。</p></li><li><p>对一个图像极其多，带宽限制 (bandwidth–bound) 的页面来说。使用同样的连接，视觉完成度平均将会慢 5–10%，但页面的整体加载时间实际是减少了，因为得益于连接延迟少。</p></li><li><p>一个高延迟，低速度的连接(比如移动端的慢速 3G) 会对页面的视觉完成造成极大的延迟，但 h2 的视觉完成度明显更高更好。</p></li></ul><p>在所有的测试中，都可以看到: h2 使整体页面的加载速度提高了，并且在初次绘制 (initial render) 上做的更好，虽然第二种情况中视觉完成度略微下降，但总体效果还是好的</p><p>视觉完成度下降的原因是因为没有 HTTP/1.x 同时连接数量的限制，h2 可以同时发起多张图片的请求，服务器可以同时响应图片的负载，可以从下面的动图中看到</p><p><img src="/images/http/safari-h2.gif" alt="image"></p><p>一旦图片下载完成，浏览器就会绘制出它们，然而，小图片下载后会渲染地更快，但是如果一个大图片恰好是初始的视图，那就会花费较长的时间加载，延迟视觉上的完成度。</p><h4 id="chrome-bug"><a href="#chrome-bug" class="headerlink" title="chrome bug"></a>chrome bug</h4><p>上面的动图是在 Safari 上的测试结果，图片最后都下载成功了，而我在 Chrome 上测试时后面的部分图片直接挂了，都报 <code>ERR_SPDY_PROTOCOL_ERROR</code> 错误，而且是百分百复现</p><p><img src="/images/http/chrome-h2.gif" alt="image"></p><p>去看了下 <code>ERR_SPDY_PROTOCOL_ERROR</code> 出在哪，发现是 Server reset stream，应该是哪出错了导致流提前终止</p><p><img src="/images/http/spdyerror-0.png" alt="image"></p><p>然后再研究了一下 HTTP/2 的帧序列，发出的请求都在 629 号消息中响应成功了，但是返回的数据帧只有流 15 上的，实际收到的图片又不止流 15 对应的图片，这是为什么?</p><p><img src="/images/http/large-imgs-problem-0.png" alt="image"></p><p>后面我继续测试发现连续请求几张大图片，虽然 HEADERS 帧都打开的是不同的流，返回的响应的 HEADERS 帧也还是对应前面的流 ID，但是响应的 DATA 帧都是从第一个打开的流上返回的。</p><p>如果是小图片的话，一个请求响应过后这个流就关闭了，下一张小图是在其自己对应的流上返回的。只有连续几张大图会出现上述情形，这个机制很奇怪，我暂时还没有找到解释的文档。</p><p>至于 chrome 为什么出错呢，看一下 TCP 报文就会发现所有数据在一个连接上发送，到后面 TCP 包会出现各种问题，丢包、重传、失序、重包等等，不清楚 Safari 是否也是这样，因为 wireshark 只能解 chrome 的包解不了 Safari 的包</p><p><img src="/images/http/large-imgs-problem-1.png" alt="image"></p><blockquote><p>《web 性能权威指南》中提及 HTTP/2 中一个 TCP 可能会造成的问题:<br>虽然消除了 HTTP 队首阻塞现象，但 TCP 层次上仍存在队首阻塞问题；如果 TCP 窗口缩放被禁用，那带<a href="https://zh.wikipedia.org/wiki/%E5%B8%A6%E5%AE%BD%E6%97%B6%E5%BB%B6%E4%B9%98%E7%A7%AF" target="_blank" rel="noopener">宽延迟积效应</a>可能会限制连接的吞吐量；丢包时 TCP 拥塞窗口会缩小；</p></blockquote><p>TCP 是一方面原因，还有另一方面应该是浏览器策略问题，估计也是 chrome bug，对比两张动图你会发现，safari 接收负载是轮流接收，我们几个接收一点然后换几个人接收，直到所有都接受完；而 chrome 则是按顺序接收，这个接收完才轮到下一个接收，结果后面的图片可能长时间未响应就挂了。</p><h4 id="使用渐进式图片"><a href="#使用渐进式图片" class="headerlink" title="使用渐进式图片"></a>使用渐进式图片</h4><p>渐进式 jpg 代替普通 jpg 有利于提高视觉完成度，而且文件更小:</p><p>输入 <code>convert --version</code> 看看是否已安装 <a href="http://www.imagemagick.org/" target="_blank" rel="noopener">ImageMagic</a>，如果没有先安装: Mac 可以用 <code>brew install imagemagick</code>，Centos 可以用 <code>yum install imagemagick</code></p><p>检测是否为 progressive jpeg，如果输出 None 说明不是 progressive jpeg；如果输出 JPEG 说明是 progressive jpeg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ identify -verbose filename.jpg | grep Interlace</span><br></pre></td></tr></table></figure><p>将 basic jpeg 转换成 progressive jpeg，<a href="https://www.imagemagick.org/script/command-line-options.php#interlace" target="_blank" rel="noopener">interlace 参数</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ convert -strip -interlace Plane source.jpg destination.jpg // 还可以指定质量 -quality 90</span><br><span class="line"></span><br><span class="line">// 批量处理</span><br><span class="line">$ for i in ./*.jpg; do convert -strip -interlace Plane $i $i; done</span><br></pre></td></tr></table></figure><p>也可以转换 PNG 和 GIF，但是我试过 <code>convert -strip -interlace Plane source.png destination.png</code> 但转换后的图片往往会更大，不推荐这么用，可以 convert source.png destination.jpg</p><p>ImageMagic 还有很多强大的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 图片缩放</span><br><span class="line">$ convert -resize 50%x50% source.jpg destination.jpg</span><br><span class="line">// 图片格式转换</span><br><span class="line">$ convert source.jpg destination.png</span><br><span class="line">// 配合 find 命令，将当前目录下大于 100kb 的图片按 75% 质量进行压缩</span><br><span class="line">$ find -E . -iregex &apos;.*\.(jpg|png|bmp)&apos; -size +100k -exec convert -strip +profile “*” -quality 75 &#123;&#125; &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>png 压缩推荐使用 <a href="https://pngquant.org/" target="_blank" rel="noopener">pngquant</a></p><p>另外 photoshop 保存图片时也可以设置渐进或交错:</p><p>渐进式图片：选择图片格式为 JPEG =&gt; 选中“连续”</p><p>交错式图片：选择图片格式为 PNG/GIF =&gt; 选中“交错”</p><h3 id="SPDY-与-HTTP2-的关系"><a href="#SPDY-与-HTTP2-的关系" class="headerlink" title="SPDY 与 HTTP2 的关系"></a>SPDY 与 HTTP2 的关系</h3><p><a href="https://zh.wikipedia.org/wiki/SPDY" target="_blank" rel="noopener">SPDY</a> 是 HTTP2 的前身，大部分特性与 HTTP2 保持一致，包括服务器端推送，多路复用和帧作为传输的最小单位。但 SPDY 与 HTTP2 也有一些实现上的不同，比如 SPDY 的头部压缩使用的是 DEFLATE 算法，而 HTTP2 使用的是 HPACK 算法，压缩率更高。</p><h3 id="QUIC-协议"><a href="#QUIC-协议" class="headerlink" title="QUIC 协议"></a>QUIC 协议</h3><p>Google 的 <a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9FUDP%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5" target="_blank" rel="noopener">QUIC(Quick UDP Internet Connections)</a> 协议，继承了 SPDY 的特点。QUIC 是一个 UDP 版的 TCP + TLS + HTTP/2 替代实现。</p><p>QUIC 可以创建更低延迟的连接，并且也像 HTTP/2 一样，通过仅仅阻塞部分流解决了包裹丢失这个问题，让连接在不同网络上建立变得更简单 － 这其实正是 <a href="https://en.wikipedia.org/wiki/Multipath_TCP" target="_blank" rel="noopener">MPTCP</a> 想去解决的问题。</p><p>QUIC 现在还只有 Google 的 Chrome 和它后台服务器上的实现，虽然有第三方库 libquic，但这些代码仍然很难在其他地方被复用。该协议也被 IETF 通信工作组引入了草案。</p><p><a href="https://github.com/mholt/caddy" target="_blank" rel="noopener">Caddy</a>: 基于 Go 语言开发的 Web Server， 对 HTTP/2 和 HTTPS 有着良好的支持，也开始支持 QUIC 协议 (试验性)</p><h3 id="推荐工具"><a href="#推荐工具" class="headerlink" title="推荐工具"></a>推荐工具</h3><ul><li>Chrome 插件: <a href="https://chrome.google.com/webstore/detail/http2-and-spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin" target="_blank" rel="noopener">HTTP/2 and SPDY indicator</a></li></ul><p>如果你访问的站点开启了 HTTP/2，图标会亮起，而且点击会进入 chrome 内置的 HTTP/2 监视工具</p><ul><li>命令行工具: <a href="https://github.com/nghttp2/nghttp2" target="_blank" rel="noopener">nghttp2</a></li></ul><p>C 语言实现的 HTTP/2，可以用它调试 HTTP/2 请求</p><p>直接 <code>brew install nghttp2</code> 就可以安装，安装好后输入 <code>nghttp -nv https://nghttp2.org</code> 就可以查看 h2 请求</p><p><img src="/images/http/nghttp2.png" alt="image"></p><ul><li>还可以用 wireshark 解 h2 的包，不过得设置浏览器提供的对称协商密钥或者服务器提供的私钥，具体方法看此文: <a href="https://imququ.com/post/http2-traffic-in-wireshark.html" target="_blank" rel="noopener">使用 Wireshark 调试 HTTP/2 流量</a></li></ul><p>如果无法解包看一下 sslkeylog.log 文件有没有写入数据，如果没有数据说明浏览器打开方式不对，得用命令行打开浏览器，这样才能让浏览器读取环境变量然后向 sslkeylog 写入密钥，另外此方法好像支持谷歌浏览器和火狐，对 Safari 无效</p><p>如果 sslkeylog.log 有数据，wireshark 还是无法解包，打开设置的 SSL 选项重新选择一下文件试试，如果还是不行也用命令行打开 Wireshark</p><p>一次不行多试几次</p><ul><li><a href="https://github.com/h2o/h2o" target="_blank" rel="noopener">h2o</a>: 优化的 HTTP Server，对 HTTP/2 的支持性做的比较好</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.slideshare.net/qgy18/http2-55366951" target="_blank" rel="noopener">HTTP/2: 新的机遇与挑战</a></li><li><a href="https://docs.google.com/presentation/d/1r7QXGYOLCh4fcUq0jDdDwKJWNqWK1o4xMtYpKZCJYjM/present?slide=id.p19" target="_blank" rel="noopener">HTTP2 is here, let’s optimize!</a></li><li><a href="https://imququ.com/post/series.html" target="_blank" rel="noopener">JerryQu’s Blog</a></li><li><a href="https://daniel.haxx.se/http2/" target="_blank" rel="noopener">http2 explained</a></li><li><a href="https://cdn-1.wp.nginx.com/wp-content/uploads/2015/09/NGINX_HTTP2_White_Paper_v4.pdf" target="_blank" rel="noopener">NGINX HTTP2 White Paper</a></li><li><a href="https://calendar.perfplanet.com/2016/http2-push-the-details/" target="_blank" rel="noopener">HTTP/2 Push: The details</a></li><li>《web 性能权威指南》</li></ul>]]></content>
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http 扩展阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Golang http/server</title>
      <link href="/2018/04-go-http.html"/>
      <url>/2018/04-go-http.html</url>
      <content type="html"><![CDATA[<h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><p><img src="/images/go/server.png" alt="image"></p><h3 id="server-与-conn-等接口"><a href="#server-与-conn-等接口" class="headerlink" title="server 与 conn 等接口"></a>server 与 conn 等接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    Addr              <span class="keyword">string</span>        <span class="comment">// 要监听的 TCP 地址</span></span><br><span class="line">    Handler           Handler       <span class="comment">// 调用的 handler, 如果为空则用 http.DefaultServeMux</span></span><br><span class="line">    TLSConfig         *tls.Config   <span class="comment">// 用于 ServeTLS 和 ListenAndServeTLS</span></span><br><span class="line">    ReadTimeout       time.Duration <span class="comment">// 读取完整 request (包括 body) 的最大时长，可以和 ReadHeaderTimeout 同时使用</span></span><br><span class="line">    ReadHeaderTimeout time.Duration <span class="comment">// 读取 request headers 的最大时长</span></span><br><span class="line">    WriteTimeout      time.Duration <span class="comment">// 写 response 的最大时长</span></span><br><span class="line">    IdleTimeout       time.Duration <span class="comment">// 当 keepalive 开启时等待下个 request 的最大时长，此值为空时使用 ReadTimeout 值代替，ReadTimeout 也为空使用 ReadHeaderTimeout 代替</span></span><br><span class="line">    MaxHeaderBytes    <span class="keyword">int</span>           <span class="comment">// 解析 request headers 里键值对的最大字节数 (包含请求行)，不限制 body. 如果为 0, 使用 DefaultMaxHeaderBytes 代替</span></span><br><span class="line">    TLSNextProto      <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="function"><span class="keyword">func</span><span class="params">(*Server, *tls.Conn, Handler)</span> // 当 '应用层协议协商 <span class="params">(NPN/ALPN)</span>' 时发生协议升级时，<span class="title">TLSNextProto</span> 需要指定可选的 <span class="title">function</span> 去接管 <span class="title">TLS</span> 连接</span></span><br><span class="line"><span class="function">    <span class="title">ConnState</span>         <span class="title">func</span><span class="params">(net.Conn, ConnState)</span> // 指定一个可选的钩子函数，由 <span class="title">client</span> 连接状态改变触发</span></span><br><span class="line"><span class="function">    <span class="title">ErrorLog</span>          *<span class="title">log</span>.<span class="title">Logger</span>   // 指定一个可选的 <span class="title">logger</span> 接收错误日志. 如果为空则由 <span class="title">log</span> 包接管</span></span><br><span class="line"><span class="function">    <span class="title">disableKeepAlives</span> <span class="title">int32</span>         // 在 <span class="title">SetKeepAlivesEnabled</span> 中设置，为 1 表示取消长连接，为 0 保持长连接 <span class="params">(默认)</span></span></span><br><span class="line"><span class="function">    <span class="title">inShutdown</span>        <span class="title">int32</span>         // 非零代表 <span class="title">in</span> <span class="title">Shutdown</span></span></span><br><span class="line"><span class="function">    <span class="title">nextProtoOnce</span>     <span class="title">sync</span>.<span class="title">Once</span>     // 设置 <span class="title">HTTP</span>/2</span></span><br><span class="line"><span class="function">    <span class="title">nextProtoErr</span>      <span class="title">error</span>         // <span class="title">http2</span>.<span class="title">ConfigureServer</span> 的结果</span></span><br><span class="line"><span class="function">    <span class="title">mu</span>                <span class="title">sync</span>.<span class="title">Mutex</span></span></span><br><span class="line"><span class="function">    <span class="title">listeners</span>         <span class="title">map</span>[<span class="title">net</span>.<span class="title">Listener</span>]<span class="title">struct</span></span>&#123;&#125;</span><br><span class="line">    activeConn        <span class="keyword">map</span>[*conn]<span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    doneChan          <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125; <span class="comment">// doneChan 代表任务结束</span></span><br><span class="line">    onShutdown        []<span class="function"><span class="keyword">func</span><span class="params">()</span>      // 通过 <span class="title">RegisterOnShutdown</span> 注册，在 <span class="title">Shutdown</span> 时调用当中的钩子函数</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 此接口由 <span class="title">ResponseWriters</span> 执行去检测连接是否已断开，此机制允许客户端断开后服务端取消一个长连接</span></span><br><span class="line"><span class="function"><span class="title">type</span> <span class="title">CloseNotifier</span> <span class="title">interface</span></span> &#123;</span><br><span class="line">    CloseNotify() &lt;-<span class="keyword">chan</span> <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// conn 代表服务端的 HTTP 连接</span></span><br><span class="line"><span class="keyword">type</span> conn <span class="keyword">struct</span> &#123;</span><br><span class="line">    server     *Server</span><br><span class="line">    cancelCtx  context.CancelFunc   <span class="comment">// 撤销连接层的 context，读写出错时会调用</span></span><br><span class="line">    rwc        net.Conn             <span class="comment">//</span></span><br><span class="line">    remoteAddr <span class="keyword">string</span>               <span class="comment">// rwc.RemoteAddr().String()</span></span><br><span class="line">    tlsState   *tls.ConnectionState <span class="comment">// TLS 连接状态，nil 代表非 TSL</span></span><br><span class="line">    werr       error                <span class="comment">// rwc 写入时的首个错误 (bufw 写入时)</span></span><br><span class="line">    r          *connReader          <span class="comment">// 一个 *conn 使用的 io.reader 封装，存有 bufr 的读取内容</span></span><br><span class="line">    bufr       *bufio.Reader        <span class="comment">// 从 r 读取</span></span><br><span class="line">    bufw       *bufio.Writer        <span class="comment">// 要写入 checkConnErrorWriter&#123;c&#125; 的缓冲</span></span><br><span class="line">    lastMethod <span class="keyword">string</span></span><br><span class="line">    curReq     atomic.Value <span class="comment">// 存入 *response (response 中包含 request)</span></span><br><span class="line">    curState   atomic.Value <span class="comment">// 存入 ConnState</span></span><br><span class="line">    mu         sync.Mutex   <span class="comment">// 保护 hijackedv</span></span><br><span class="line">    hijackedv  <span class="keyword">bool</span>         <span class="comment">// 代表连接是否已经被 hijacke</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个 ctx 带有一个截止期限，一个取消信号，或者其他绑定值</span></span><br><span class="line"><span class="comment">// 其函数可以被多个 goroutines 同时使用</span></span><br><span class="line"><span class="comment">// 一个请求过来时可能会涉及到多个 goroutines，Ctx 可以控制关闭与之相关联和派生出的子 ctx 相关联的 goroutines</span></span><br><span class="line"><span class="keyword">type</span> Context <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// Deadline 方法是获取设置的截止时间，第一个返回值是截止时间，到了这个时间点，Context 会自动发起取消请求；</span></span><br><span class="line"><span class="comment">// 第二个返回值 ok==false 时表示没有设置截止时间，如果需要取消的话，需要调用 cancel 函数进行取消，取消操作包括派生出去的子 Ctx</span></span><br><span class="line">Deadline() (deadline time.Time, ok <span class="keyword">bool</span>)</span><br><span class="line"><span class="comment">// 在 goroutine 中，如果该方法返回的 chan 可以读取，则意味着 parent context 已经发起了取消请求，</span></span><br><span class="line"><span class="comment">// 我们通过 Done 方法收到这个信号后，就应该做清理操作，然后退出 goroutine，释放资源</span></span><br><span class="line">    Done() &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 如果 Done 还没关闭，Err 返回 nil</span></span><br><span class="line">    <span class="comment">// 如果 Done 已经关闭，返回非空 err，告知 Ctx 因何取消</span></span><br><span class="line">    Err() error</span><br><span class="line">    Value(key <span class="keyword">interface</span>&#123;&#125;) <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 键值对形式，与 Ctx 绑定，可以为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监听函数"><a href="#监听函数" class="headerlink" title="监听函数"></a>监听函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Serve 接收 listener 上过来的连接，并为每个连接创建 service 线程</span></span><br><span class="line"><span class="comment">// 在 service 线程中会读取 request 并调用 srv.Handler 进行服务</span></span><br><span class="line"><span class="comment">// handler 参数一般传 nil 就行，代表使用的是 DefaultServeMux</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Serve</span><span class="params">(l net.Listener, handler Handler)</span> <span class="title">error</span></span> &#123; <span class="comment">// HTTPS: ServeTLS(l net.Listener, handler Handler, certFile, keyFile string) error</span></span><br><span class="line">srv := &amp;Server&#123;Handler: handler&#125;</span><br><span class="line"><span class="keyword">return</span> srv.Serve(l) <span class="comment">// HTTPS: srv.ServeTLS(l, certFile, keyFile)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// func HelloServer(w http.ResponseWriter, req *http.Request) &#123;</span></span><br><span class="line"><span class="comment">//     io.WriteString(w, "hello, world!\n")</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// func main() &#123;</span></span><br><span class="line"><span class="comment">//     http.HandleFunc("/hello", HelloServer)</span></span><br><span class="line"><span class="comment">//     log.Fatal(http.ListenAndServe(":12345", nil))</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServe</span><span class="params">(addr <span class="keyword">string</span>, handler Handler)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">server := &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class="line"><span class="keyword">return</span> server.ListenAndServe()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// err := http.ListenAndServeTLS(":10443", "cert.pem", "key.pem", nil)</span></span><br><span class="line"><span class="comment">// HTTPS 方式，可以使用 crypto/tls 中的 generate_cert.go 生成 cert.pem 和 key.pem</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServeTLS</span><span class="params">(addr, certFile, keyFile <span class="keyword">string</span>, handler Handler)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">server := &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class="line"><span class="keyword">return</span> server.ListenAndServeTLS(certFile, keyFile)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ListenAndServe 监听 srv.Addr 地址上的 tcp 网络，然后调用 Serve 服务连接，连接会设置 keep-alives</span></span><br><span class="line"><span class="comment">// 如果 srv.Addr 为空则用 ":http" 代替</span></span><br><span class="line"><span class="comment">// ListenAndServe 总是返回非空 err</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *Server)</span> <span class="title">ListenAndServe</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">addr := srv.Addr</span><br><span class="line"><span class="keyword">if</span> addr == <span class="string">""</span> &#123;</span><br><span class="line">addr = <span class="string">":http"</span></span><br><span class="line">&#125;</span><br><span class="line">ln, err := net.Listen(<span class="string">"tcp"</span>, addr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// HTTP:</span></span><br><span class="line"><span class="keyword">return</span> srv.Serve(tcpKeepAliveListener&#123;ln.(*net.TCPListener)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTPS 方式调用 ListenAndServeTLS(certFile, keyFile string) error</span></span><br><span class="line"><span class="comment">// 与 ListenAndServe 类似，只是最后要关闭 ln 并返回 srv.ServeTLS</span></span><br><span class="line"><span class="comment">// defer ln.Close()</span></span><br><span class="line"><span class="comment">// return srv.ServeTLS(tcpKeepAliveListener&#123;ln.(*net.TCPListener)&#125;, certFile, keyFile)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="server-的服务函数"><a href="#server-的服务函数" class="headerlink" title="server 的服务函数"></a>server 的服务函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *Server)</span> <span class="title">ServeTLS</span><span class="params">(l net.Listener, certFile, keyFile <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 在 srv.Serve 之前尝试设置 HTTP/2</span></span><br><span class="line"><span class="comment">// setupHTTP2_ServeTLS 中调用 onceSetNextProtoDefaults_Serve，只有 srv.TLSNextProto 为 nil 时才可以设置 HTTP/2</span></span><br><span class="line"><span class="keyword">if</span> err := srv.setupHTTP2_ServeTLS(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">config := cloneTLSConfig(srv.TLSConfig)</span><br><span class="line"><span class="keyword">if</span> !strSliceContains(config.NextProtos, <span class="string">"http/1.1"</span>) &#123; <span class="comment">// strSliceContains 判断是否包含字符串</span></span><br><span class="line">config.NextProtos = <span class="built_in">append</span>(config.NextProtos, <span class="string">"http/1.1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configHasCert := <span class="built_in">len</span>(config.Certificates) &gt; <span class="number">0</span> || config.GetCertificate != <span class="literal">nil</span></span><br><span class="line"><span class="keyword">if</span> !configHasCert || certFile != <span class="string">""</span> || keyFile != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">config.Certificates = <span class="built_in">make</span>([]tls.Certificate, <span class="number">1</span>)</span><br><span class="line">config.Certificates[<span class="number">0</span>], err = tls.LoadX509KeyPair(certFile, keyFile) <span class="comment">// LoadX509KeyPair 解析证书，文件中必须含有 PEM 编码数据</span></span><br><span class="line"><span class="comment">// PEM (Privacy Enhancement Message)，定义见 RFC1421，是一种基于 base64 的编码格式</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tlsListener := tls.NewListener(l, config)</span><br><span class="line"><span class="keyword">return</span> srv.Serve(tlsListener)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若启用 HTTP/2，在调用 Serve 前需要根据 listener's TLS Config 初始化 srv.TLSConfig</span></span><br><span class="line"><span class="comment">// Serve 总是返回非空的 err，在 Shutdown 或 Close 后返回 ErrServerClosed</span></span><br><span class="line"><span class="comment">// Close 是立即关闭 Server 和与之相关的 listeners 和 connections，而 shutdown 是逐步关闭 listeners 和闲置的 connections，两者不会管已被 hijack 的连接</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *Server)</span> <span class="title">Serve</span><span class="params">(l net.Listener)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> l.Close()</span><br><span class="line"><span class="keyword">if</span> fn := testHookServerServe; fn != <span class="literal">nil</span> &#123; <span class="comment">// 如果钩子函数 testHookServerServe 非空则调用</span></span><br><span class="line">fn(srv, l)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> tempDelay time.Duration <span class="comment">// accept 失败时 sleep 多长时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// setupHTTP2_Serve 和 setupHTTP2_ServeTLS 两者都是调用 onceSetNextProtoDefaults() 去尝试设置 HTTP/2</span></span><br><span class="line">    <span class="comment">// 只是考虑到多并发情况下的 Serve 请求，setupHTTP2_Serve 采用了更保守的政策去设置 HTTP/2</span></span><br><span class="line">    <span class="comment">// setupHTTP2_Serve 先调用 shouldConfigureHTTP2ForServe 判断是否应该为 Server.Serve 设置 HTTP/2</span></span><br><span class="line">    <span class="comment">// shouldConfigureHTTP2ForServe 中如果 srv.TLSConfig 为 nil 或者 srv.TLSConfig.NextProtos 包含 "h2" 字样返回真，否则返回假，</span></span><br><span class="line"><span class="keyword">if</span> err := srv.setupHTTP2_Serve(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">srv.trackListener(l, <span class="literal">true</span>) <span class="comment">// 将 l 添加进 server.listeners</span></span><br><span class="line"><span class="keyword">defer</span> srv.trackListener(l, <span class="literal">false</span>) <span class="comment">// 结束后删去 l</span></span><br><span class="line"></span><br><span class="line">baseCtx := context.Background() <span class="comment">// baseContext 会一直存在，但没有值也没有 deadline，用于主函数或者初始化或者测试或者顶层接收请求的 context</span></span><br><span class="line">ctx := context.WithValue(baseCtx, ServerContextKey, srv)</span><br><span class="line"><span class="comment">// WithValue 返回 baseCtx 的副本，副本内的值是一个键值对 ServerContextKey - srv</span></span><br><span class="line"><span class="comment">// ServerContextKey = &amp;contextKey&#123;"http-server"&#125; 与其绑定的 value 类型为 *Server</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">rw, e := l.Accept() <span class="comment">// 接收到连接</span></span><br><span class="line"><span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-srv.getDoneChan(): <span class="comment">// server 已关闭</span></span><br><span class="line"><span class="keyword">return</span> ErrServerClosed</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ne, ok := e.(net.Error); ok &amp;&amp; ne.Temporary() &#123;</span><br><span class="line"><span class="keyword">if</span> tempDelay == <span class="number">0</span> &#123;</span><br><span class="line">tempDelay = <span class="number">5</span> * time.Millisecond</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tempDelay *= <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> max := <span class="number">1</span> * time.Second; tempDelay &gt; max &#123;</span><br><span class="line">tempDelay = max</span><br><span class="line">&#125;</span><br><span class="line">srv.logf(<span class="string">"http: Accept error: %v; retrying in %v"</span>, e, tempDelay)</span><br><span class="line">time.Sleep(tempDelay)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line">tempDelay = <span class="number">0</span></span><br><span class="line">c := srv.newConn(rw)</span><br><span class="line"><span class="comment">// conn.setState 根据传入的状态调用 trackConn 来设置 server.activeConn 集合，再改变当前 conn.curState</span></span><br><span class="line"><span class="comment">// 如果 server 设置了 ConnState 这个钩子函数，就调用</span></span><br><span class="line">c.setState(c.rwc, StateNew)</span><br><span class="line"><span class="keyword">go</span> c.serve(ctx)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="server-Serve-最后调用-conn-serve"><a href="#server-Serve-最后调用-conn-serve" class="headerlink" title="server.Serve 最后调用 conn.serve"></a>server.Serve 最后调用 conn.serve</h3><p>在此函数中调用 <code>serverHandler{c.server}.ServeHTTP(w, w.req)</code> 转入路由模块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *conn)</span> <span class="title">serve</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">c.remoteAddr = c.rwc.RemoteAddr().String()</span><br><span class="line">ctx = context.WithValue(ctx, LocalAddrContextKey, c.rwc.LocalAddr())</span><br><span class="line"><span class="comment">// LocalAddrContextKey = &amp;contextKey&#123;"local-addr"&#125; 与其绑定的 value 类型是 net.Addr</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &amp;&amp; err != ErrAbortHandler &#123;</span><br><span class="line"><span class="keyword">const</span> size = <span class="number">64</span> &lt;&lt; <span class="number">10</span> <span class="comment">// 64 KB</span></span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, size)</span><br><span class="line">buf = buf[:runtime.Stack(buf, <span class="literal">false</span>)]</span><br><span class="line">c.server.logf(<span class="string">"http: panic serving %v: %v\n%s"</span>, c.remoteAddr, err, buf)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !c.hijacked() &#123; <span class="comment">// 已经被 hijack 的连接不用管理，由 hijack 的调用者处理</span></span><br><span class="line">c.<span class="built_in">close</span>()</span><br><span class="line">c.setState(c.rwc, StateClosed)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> tlsConn, ok := c.rwc.(*tls.Conn); ok &#123; <span class="comment">// HTTPS</span></span><br><span class="line"><span class="keyword">if</span> d := c.server.ReadTimeout; d != <span class="number">0</span> &#123;</span><br><span class="line">c.rwc.SetReadDeadline(time.Now().Add(d))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> d := c.server.WriteTimeout; d != <span class="number">0</span> &#123;</span><br><span class="line">c.rwc.SetWriteDeadline(time.Now().Add(d))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := tlsConn.Handshake(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.server.logf(<span class="string">"http: TLS handshake error from %s: %v"</span>, c.rwc.RemoteAddr(), err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.tlsState = <span class="built_in">new</span>(tls.ConnectionState)</span><br><span class="line">*c.tlsState = tlsConn.ConnectionState() <span class="comment">// 获取当前 TLS 连接的详细信息</span></span><br><span class="line"><span class="comment">// NegotiatedProtocol 协商的协议，validNPN 判断 proto 是否属于 "", "http/1.1", "http/1.0" 之一，不属于返回真</span></span><br><span class="line"><span class="keyword">if</span> proto := c.tlsState.NegotiatedProtocol; validNPN(proto) &#123;</span><br><span class="line"><span class="keyword">if</span> fn := c.server.TLSNextProto[proto]; fn != <span class="literal">nil</span> &#123;</span><br><span class="line">h := initNPNRequest&#123;tlsConn, serverHandler&#123;c.server&#125;&#125;</span><br><span class="line">fn(c.server, tlsConn, h) <span class="comment">// 发生协议切换时触发钩子函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP/1.x following</span></span><br><span class="line"></span><br><span class="line">ctx, cancelCtx := context.WithCancel(ctx)</span><br><span class="line"><span class="comment">// WithCancel 返回 &amp;c, func() &#123; c.cancel(true, Canceled) &#125;</span></span><br><span class="line"><span class="comment">// ctx.cancel close ctx.done 取消所有 ctx 的 children，如果第一个参数为 true，则把 ctx 从其 parent 的 children 列表删去</span></span><br><span class="line">c.cancelCtx = cancelCtx</span><br><span class="line"><span class="keyword">defer</span> cancelCtx() <span class="comment">// 关闭 ctx，以及相关 goroutines</span></span><br><span class="line"></span><br><span class="line">c.r = &amp;connReader&#123;conn: c&#125;</span><br><span class="line">c.bufr = newBufioReader(c.r)</span><br><span class="line">c.bufw = newBufioWriterSize(checkConnErrorWriter&#123;c&#125;, <span class="number">4</span>&lt;&lt;<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">w, err := c.readRequest(ctx) <span class="comment">// 读取 request 返回 response 和可能的 err</span></span><br><span class="line"><span class="keyword">if</span> c.r.remain != c.server.initialReadLimitSize() &#123; <span class="comment">// remain 代表 io.reader 剩余空间，initialReadLimitSize 返回 int64(srv.MaxHeaderBytes &gt; 0 ? srv.MaxHeaderBytes : DefaultMaxHeaderBytes) + 4096</span></span><br><span class="line">c.setState(c.rwc, StateActive) <span class="comment">// StateActive 代表连接已经从 request 读到数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">const</span> errorHeaders = <span class="string">"\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err == errTooLarge &#123; <span class="comment">// errors.New("http: request too large")</span></span><br><span class="line"><span class="keyword">const</span> publicErr = <span class="string">"431 Request Header Fields Too Large"</span></span><br><span class="line">fmt.Fprintf(c.rwc, <span class="string">"HTTP/1.1 "</span>+publicErr+errorHeaders+publicErr)</span><br><span class="line">c.closeWriteAndWait()</span><br><span class="line"><span class="comment">// closewrite flush 所有缓存的数据并发送一个 FIN 包（如果客户端是通过 TCP 连接的），表示我们这边已结束，然后 sleep 500 ms</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> isCommonNetReadError(err) &#123;</span><br><span class="line"><span class="comment">// err 是否是 io.EOF 或者是网络超时 (net.Error) 或者是读 request 的 net.OpError 之一</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publicErr := <span class="string">"400 Bad Request"</span></span><br><span class="line"><span class="keyword">if</span> v, ok := err.(badRequestError); ok &#123;</span><br><span class="line">publicErr = publicErr + <span class="string">": "</span> + <span class="keyword">string</span>(v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Fprintf(c.rwc, <span class="string">"HTTP/1.1 "</span>+publicErr+errorHeaders+publicErr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// request Header : Expect 100 Continue</span></span><br><span class="line">req := w.req</span><br><span class="line"><span class="keyword">if</span> req.expectsContinue() &#123;</span><br><span class="line"><span class="keyword">if</span> req.ProtoAtLeast(<span class="number">1</span>, <span class="number">1</span>) &amp;&amp; req.ContentLength != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// after first '100 Continue' request, wrapper response with 'HTTP/1.1 100 Continue'</span></span><br><span class="line">req.Body = &amp;expectContinueReader&#123;readCloser: req.Body, resp: w&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> req.Header.get(<span class="string">"Expect"</span>) != <span class="string">""</span> &#123;</span><br><span class="line">w.sendExpectationFailed() <span class="comment">// response with status code 417 (Expectation Failed)</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.curReq.Store(w)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> requestBodyRemains(req.Body) &#123; <span class="comment">// 之后是否还能从 body 读取到数据，true 表示能继续读 (未到 io.EOF)</span></span><br><span class="line">registerOnHitEOF(req.Body, w.conn.r.startBackgroundRead) <span class="comment">// 当 body 读到 EOF，调用传入的 startBackgroundRead 函数</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 长连接下 HTTP 管线化请求时的处理</span></span><br><span class="line"><span class="keyword">if</span> w.conn.bufr.Buffered() &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// [HTTP pipelining](https://zh.wikipedia.org/wiki/HTTP%E7%AE%A1%E7%B7%9A%E5%8C%96)</span></span><br><span class="line">w.conn.r.closeNotifyFromPipelinedRequest() <span class="comment">// closeNotify()</span></span><br><span class="line">&#125;</span><br><span class="line">w.conn.r.startBackgroundRead()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">serverHandler&#123;c.server&#125;.ServeHTTP(w, w.req) <span class="comment">// server.Handler == nil -&gt; DefaultServeMux.ServeHTTP</span></span><br><span class="line">w.cancelCtx()</span><br><span class="line"><span class="keyword">if</span> c.hijacked() &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">w.finishRequest()</span><br><span class="line"><span class="keyword">if</span> !w.shouldReuseConnection() &#123; <span class="comment">// tcp 连接是否可以继续使用</span></span><br><span class="line"><span class="keyword">if</span> w.requestBodyLimitHit || w.closedRequestBodyEarly() &#123;</span><br><span class="line"><span class="comment">// requestBodyLimitHit 在 requestTooLarge 函数中设置，当此值为真，停止读取后续的 request 和输入</span></span><br><span class="line"><span class="comment">// closedRequestBodyEarly 表示连接之前是否已关闭</span></span><br><span class="line">c.closeWriteAndWait()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.setState(c.rwc, StateIdle) <span class="comment">// StateIdle 表示此连接已处理完一个 request 并处于 keep-alive 状态，等待后续 request</span></span><br><span class="line">c.curReq.Store((*response)(<span class="literal">nil</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !w.conn.server.doKeepAlives() &#123; <span class="comment">// doKeepAlives 判断是否满足 disableKeepAlives == 0 &amp;&amp; inShutdown == 0 (处于 keep-alive 模式且不在 shutdown 状态)</span></span><br><span class="line"><span class="comment">// We're in shutdown mode. We might've replied</span></span><br><span class="line"><span class="comment">// to the user without "Connection: close" and</span></span><br><span class="line"><span class="comment">// they might think they can send another</span></span><br><span class="line"><span class="comment">// request, but such is life with HTTP/1.1.</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> d := c.server.idleTimeout(); d != <span class="number">0</span> &#123;</span><br><span class="line">c.rwc.SetReadDeadline(time.Now().Add(d))</span><br><span class="line"><span class="keyword">if</span> _, err := c.bufr.Peek(<span class="number">4</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SetReadDeadline 设置后续读去调用的截止时间，如果传入零值表示不会 timeout</span></span><br><span class="line">c.rwc.SetReadDeadline(time.Time&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>流程：<br>当一个请求 request 进来的时候，server 会依次根据 ServeMux.m 中的 string（路由表达式）来一个一个匹配，<br>如果找到了可以匹配的 muxEntry，就取出 muxEntry.h，这是个 handler，<br>调用 handler 中的 ServeHTTP（ResponseWriter, *Request）来组装 Response，并返回。</p></blockquote><hr><h3 id="路由接口"><a href="#路由接口" class="headerlink" title="路由接口"></a>路由接口</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ResponseWriter 接口用于 HTTP handler 生成 response</span></span><br><span class="line"><span class="comment">// 在 Handler.ServeHTTP 返回后，ResponseWriter 不应该再被使用</span></span><br><span class="line"><span class="keyword">type</span> ResponseWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Header() Header             <span class="comment">// Header() 返回 WriteHeader 要发送的 Header map 集合</span></span><br><span class="line">    Write([]<span class="keyword">byte</span>) (<span class="keyword">int</span>, error)  <span class="comment">// Write 写入响应的 body</span></span><br><span class="line">    WriteHeader(statusCode <span class="keyword">int</span>) <span class="comment">// 这个方法发送 Response 的 Header 和传入的 HTTP 状态码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Flusher 由 ResponseWriters 执行去允许 HTTP handler 将缓存中的数据推给客户端, 默认的 HTTP/1.x 和 HTTP/2 ResponseWriter 支持 Flusher，</span></span><br><span class="line"><span class="comment">// 但是 ResponseWriter 的封装可能会不支持，Handlers 在运行时需要测试是否支持此函数</span></span><br><span class="line"><span class="comment">// 即使 ResponseWriters 支持 Flush，如果客户端使用了 HTTP proxy，直到响应结束，缓存的数据也有可能到达不了客户端</span></span><br><span class="line"><span class="keyword">type</span> Flusher <span class="keyword">interface</span> &#123;</span><br><span class="line">Flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hijacker 接口由 ResponseWriters 执行去允许 HTTP handler 接管连接</span></span><br><span class="line"><span class="comment">// 默认的 ResponseWriter 支持 HTTP/1.x 连接下的 Hijacker，但是 HTTP/2 连接不支持，HTTP/2 多路复用等情况不适合使用 Hijack 。</span></span><br><span class="line"><span class="comment">// ResponseWriter 封装也可能不支持 Hijacker. Handlers 在运行时需要测试是否支持此函数</span></span><br><span class="line"><span class="keyword">type</span> Hijacker <span class="keyword">interface</span> &#123;</span><br><span class="line">Hijack() (net.Conn, *bufio.ReadWriter, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServeMux 类型是 HTTP 请求的路由规则转换器。它会将每一个接收的请求的 URL 与一个注册路由的列表进行匹配，并调用和 URL 最匹配的 handler.</span></span><br><span class="line"><span class="comment">// 匹配到多个时较长的模式优先于较短的模式，模式也可以主机名开始，表示只匹配该主机上的路径，指定主机的模式优先于一般的模式，</span></span><br><span class="line"><span class="comment">// ServeMux 还会规范化请求的 URL 路径，将任何包含 "." 或 ".." 元素的请求重定向到等价的没有这两种元素的 URL</span></span><br><span class="line"><span class="keyword">type</span> ServeMux <span class="keyword">struct</span> &#123;</span><br><span class="line">mu    sync.RWMutex <span class="comment">// 读写锁</span></span><br><span class="line">m     <span class="keyword">map</span>[<span class="keyword">string</span>]muxEntry <span class="comment">// 路由规则，一个 string 对应一个 mux 实体，这里的 string 就是注册的路由表达式</span></span><br><span class="line">hosts <span class="keyword">bool</span> <span class="comment">// 是否在任意的规则中带有 host 信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> muxEntry <span class="keyword">struct</span> &#123;</span><br><span class="line">    h        Handler <span class="comment">// 这个路由表达式对应哪个 handler</span></span><br><span class="line">    pattern  <span class="keyword">string</span>  <span class="comment">// 固定的、由根开始的路径，如 "/favicon.ico"，或由根开始的子树，如 "/images/"，也可以主机名开头</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个 Handler 响应一个 HTTP 请求</span></span><br><span class="line"><span class="comment">// ServeHTTP 应该将回复的头域和数据写入 ResponseWriter 接口然后返回。返回标志着该请求已经结束，HTTP 服务端可以转移向该连接上的下一个请求。</span></span><br><span class="line"><span class="comment">// 在 ServeHTTP 调用结束之后或者并发执行时，使用 ResponseWriter 或者读取请求体是不可取的</span></span><br><span class="line"><span class="comment">// handler 应该第一时间读取请求体并作出应答，在向 ResponseWriter 写入数据后就不能读取 request body 了. 同时 handler 不应该修改传入的 request</span></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">ServeHTTP(ResponseWriter, *Request)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HandlerFunc(f) 是一个调用 f 的 handler</span></span><br><span class="line"><span class="keyword">type</span> HandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(ResponseWriter, *Request)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="title">ServeHTTP</span> <span class="title">calls</span> <span class="title">f</span><span class="params">(w, r)</span>.</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(f HandlerFunc)</span> <span class="title">ServeHTTP</span><span class="params">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class="line">f(w, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求-响应实例"><a href="#请求-响应实例" class="headerlink" title="请求 - 响应实例"></a>请求 - 响应实例</h3><h4 id="这里实现了一个-404-not-found-响应"><a href="#这里实现了一个-404-not-found-响应" class="headerlink" title="这里实现了一个 404 not found 响应"></a>这里实现了一个 <code>404 not found</code> 响应</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NotFound</span><span class="params">(w ResponseWriter, r *Request)</span></span> &#123; Error(w, <span class="string">"404 page not found"</span>, StatusNotFound) &#125; <span class="comment">// 定义 handler</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NotFoundHandler</span><span class="params">()</span> <span class="title">Handler</span></span> &#123; <span class="keyword">return</span> HandlerFunc(NotFound) &#125;</span><br></pre></td></tr></table></figure><h4 id="server-导出的注册函数使用-DefaultServeMux-相应方法"><a href="#server-导出的注册函数使用-DefaultServeMux-相应方法" class="headerlink" title="server 导出的注册函数使用 DefaultServeMux 相应方法"></a>server 导出的注册函数使用 DefaultServeMux 相应方法</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handle</span><span class="params">(pattern <span class="keyword">string</span>, handler Handler)</span></span> &#123; DefaultServeMux.Handle(pattern, handler) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line">DefaultServeMux.HandleFunc(pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line">mux.Handle(pattern, HandlerFunc(handler))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">Handle</span><span class="params">(pattern <span class="keyword">string</span>, handler Handler)</span></span> &#123;</span><br><span class="line">mux.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> mux.mu.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pattern == <span class="string">""</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"http: invalid pattern"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> handler == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"http: nil handler"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _, exist := mux.m[pattern]; exist &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"http: multiple registrations for "</span> + pattern)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mux.m == <span class="literal">nil</span> &#123;</span><br><span class="line">mux.m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]muxEntry)</span><br><span class="line">&#125;</span><br><span class="line">mux.m[pattern] = muxEntry&#123;h: handler, pattern: pattern&#125; <span class="comment">// 注册成功</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> pattern[<span class="number">0</span>] != <span class="string">'/'</span> &#123;</span><br><span class="line">mux.hosts = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ServeHTTP-调用-Handler-给-request-分派与-request-URL-最匹配的-handler"><a href="#ServeHTTP-调用-Handler-给-request-分派与-request-URL-最匹配的-handler" class="headerlink" title="ServeHTTP 调用 Handler() 给 request 分派与 request URL 最匹配的 handler"></a>ServeHTTP 调用 Handler() 给 request 分派与 request URL 最匹配的 handler</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">ServeHTTP</span><span class="params">(w ResponseWriter, r *Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.RequestURI == <span class="string">"*"</span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.ProtoAtLeast(<span class="number">1</span>, <span class="number">1</span>) &#123; <span class="comment">// ProtoAtLeast 判断是否大于等于协议最低标准，第一个参数是 major 版本号，第二个参数是 minor 版本号，即 http/1.1</span></span><br><span class="line">w.Header().Set(<span class="string">"Connection"</span>, <span class="string">"close"</span>) <span class="comment">// 小于要求则在响应头返回关闭信息</span></span><br><span class="line">&#125;</span><br><span class="line">w.WriteHeader(StatusBadRequest) <span class="comment">// 状态码 400</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">h, _ := mux.Handler(r)</span><br><span class="line">h.ServeHTTP(w, r) <span class="comment">// 调用对应 handler 的 ServeHTTP，即执行注册好的 handler 函数，比如 NotFound 函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Handler 通过判断 r.Method, r.Host, and r.URL.Path 返回与 request 对应的 handler</span></span><br><span class="line"><span class="comment">// 此函数总会返回非空的 handler. 如果 path 不符合规范形式，返回的是内部生成的重定向到规范路径的 handler</span></span><br><span class="line"><span class="comment">// 如果 host 包含端口，匹配 handlers 时会忽略端口。第二个参数返回已注册的与请求匹配的路由</span></span><br><span class="line"><span class="comment">// 如果没有已注册的 handler 与请求匹配, 则返回 ``page not found'' handler 和空的 pattern</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">Handler</span><span class="params">(r *Request)</span> <span class="params">(h Handler, pattern <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.Method == <span class="string">"CONNECT"</span> &#123;</span><br><span class="line"><span class="comment">// redirectToPathSlash 判断 path 是否需要追加 "/"，因为存在 "path + /" 已注册但 "path"</span></span><br><span class="line"><span class="comment">// 本身未注册的情况。如果需要追加 "/"，则返回追加的 url 和 true</span></span><br><span class="line"><span class="keyword">if</span> u, ok := mux.redirectToPathSlash(r.URL.Host, r.URL.Path, r.URL); ok &#123;</span><br><span class="line"><span class="keyword">return</span> RedirectHandler(u.String(), StatusMovedPermanently), u.Path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mux.handler(r.Host, r.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">host := stripHostPort(r.Host) <span class="comment">// 去掉 ":&lt;port&gt;"</span></span><br><span class="line">path := cleanPath(r.URL.Path) <span class="comment">// 规范 path 格式，比如缺失多余 '/'、存在相对路径'.'、'..' 等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> u, ok := mux.redirectToPathSlash(host, path, r.URL); ok &#123;</span><br><span class="line"><span class="keyword">return</span> RedirectHandler(u.String(), StatusMovedPermanently), u.Path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改 request 的不规范路径</span></span><br><span class="line"><span class="keyword">if</span> path != r.URL.Path &#123;</span><br><span class="line">_, pattern = mux.handler(host, path)</span><br><span class="line">url := *r.URL</span><br><span class="line">url.Path = path</span><br><span class="line"><span class="keyword">return</span> RedirectHandler(url.String(), StatusMovedPermanently), pattern</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> mux.handler(host, r.URL.Path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 ServerMux.handler 中当匹配不到注册的路由时返回 NotFoundHandler</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">handler</span><span class="params">(host, path <span class="keyword">string</span>)</span> <span class="params">(h Handler, pattern <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">mux.mu.RLock()</span><br><span class="line"><span class="keyword">defer</span> mux.mu.RUnlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mux.hosts &#123;</span><br><span class="line">h, pattern = mux.match(host + path) <span class="comment">// match 根据完整 URL 优先匹配 handler</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> h == <span class="literal">nil</span> &#123;</span><br><span class="line">h, pattern = mux.match(path) <span class="comment">// 如果 URL 匹配不到再根据路径匹配</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> h == <span class="literal">nil</span> &#123;</span><br><span class="line">h, pattern = NotFoundHandler(), <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://golang.org/pkg/net/http/" target="_blank" rel="noopener">Package http</a></li><li><a href="https://astaxie.gitbooks.io/build-web-application-with-golang/zh/" target="_blank" rel="noopener">Go Web 编程</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%8D%8F%E5%95%86" target="_blank" rel="noopener">wiki NPN/ALPN</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A" target="_blank" rel="noopener">wiki TLS</a></li></ul>]]></content>
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Golang RPC</title>
      <link href="/2018/04-go-rpc.html"/>
      <url>/2018/04-go-rpc.html</url>
      <content type="html"><![CDATA[<p><img src="/images/go/rpc.svg" alt="image"></p><h2 id="1-server"><a href="#1-server" class="headerlink" title="1. server"></a>1. server</h2><h3 id="service-与-server-结构体"><a href="#service-与-server-结构体" class="headerlink" title="service 与 server 结构体"></a>service 与 server 结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> service <span class="keyword">struct</span> &#123;</span><br><span class="line">name   <span class="keyword">string</span>                 <span class="comment">// 服务名</span></span><br><span class="line">rcvr   reflect.Value          <span class="comment">// 服务中函数的接收者</span></span><br><span class="line">typ    reflect.Type           <span class="comment">// 接收者类型</span></span><br><span class="line">method <span class="keyword">map</span>[<span class="keyword">string</span>]*methodType <span class="comment">// 已注册的函数集</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">serviceMap sync.Map   <span class="comment">// 服务对象集合</span></span><br><span class="line">reqLock    sync.Mutex <span class="comment">// 请求锁用来保护 freeReq</span></span><br><span class="line">freeReq    *Request</span><br><span class="line">respLock   sync.Mutex <span class="comment">// 响应锁保护 freeResp</span></span><br><span class="line">freeResp   *Response</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rpc-Register-调用-DefaultServer-Register，主要实现在内部函数-register-中"><a href="#rpc-Register-调用-DefaultServer-Register，主要实现在内部函数-register-中" class="headerlink" title="rpc.Register 调用 DefaultServer.Register，主要实现在内部函数 register 中"></a>rpc.Register 调用 DefaultServer.Register，主要实现在内部函数 register 中</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Register 在 server 中注册并发布 receiver 的函数集时需满足以下条件:</span></span><br><span class="line"><span class="comment">//   * 函数和函数的类型名是已导出的</span></span><br><span class="line"><span class="comment">//   * 两个参数都是导出类型 (或內建类型)</span></span><br><span class="line"><span class="comment">//   * 第二个参数是指针</span></span><br><span class="line"><span class="comment">//   * 函数只有一个类型为 error 的返回类型</span></span><br><span class="line"><span class="comment">// 如果 receiver 不是导出的类型或者没有符合条件的函数，将会返回一个错误。Register 将会使用 log 包记录出现的 error</span></span><br><span class="line"><span class="comment">// 客户端使用 "Type.Method" 的格式来调用函数，比如上文例子中 Arith.Multiply，这里的 Type 是 receiver 的具体类型.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span> <span class="title">register</span><span class="params">(rcvr <span class="keyword">interface</span>&#123;&#125;, name <span class="keyword">string</span>, useName <span class="keyword">bool</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// 新起一个 service 服务对象</span></span><br><span class="line">s := <span class="built_in">new</span>(service)</span><br><span class="line">    s.typ = reflect.TypeOf(rcvr)</span><br><span class="line">    s.rcvr = reflect.ValueOf(rcvr)</span><br><span class="line">    sname := reflect.Indirect(s.rcvr).Type().Name() <span class="comment">// 默认服务名是 receiver 的反射类型</span></span><br><span class="line">    <span class="comment">// 在 server.Register 中调用 register(rcvr, "", false)</span></span><br><span class="line">    <span class="comment">// 在 server.RegisterName 中调用 register(rcvr, name, true)</span></span><br><span class="line">    <span class="comment">// 这里使用的 name 可以指定服务对象名，客户端调用 rpc 服务时可以使用 "name.Method" 代替原来的 "Type.Method"</span></span><br><span class="line">    <span class="keyword">if</span> useName &#123;</span><br><span class="line">        sname = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> sname == <span class="string">""</span> &#123;</span><br><span class="line">        s := <span class="string">"rpc.Register: no service name for type "</span> + s.typ.String()</span><br><span class="line">        log.Print(s)</span><br><span class="line">        <span class="keyword">return</span> errors.New(s)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !isExported(sname) &amp;&amp; !useName &#123;</span><br><span class="line">        s := <span class="string">"rpc.Register: type "</span> + sname + <span class="string">" is not exported"</span></span><br><span class="line">        log.Print(s)</span><br><span class="line">        <span class="keyword">return</span> errors.New(s)</span><br><span class="line">    &#125;</span><br><span class="line">    s.name = sname</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断传入的接口对象的函数集是否符合 RPC 规范</span></span><br><span class="line">s.method = suitableMethods(s.typ, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s.method) == <span class="number">0</span> &#123;</span><br><span class="line">        str := <span class="string">""</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果满足条件的函数集为空，根据 s.typ 的指针地址对象是否有符合条件的函数返回错误说明</span></span><br><span class="line">        method := suitableMethods(reflect.PtrTo(s.typ), <span class="literal">false</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(method) != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="comment">// 此错误说明传入的 s.typ 不符合条件，应该传入 *s.typ</span></span><br><span class="line">            str = <span class="string">"rpc.Register: type "</span> + sname + <span class="string">" has no exported methods of suitable type (hint: pass a pointer to value of that type)"</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            str = <span class="string">"rpc.Register: type "</span> + sname + <span class="string">" has no exported methods of suitable type"</span></span><br><span class="line">        &#125;</span><br><span class="line">        log.Print(str)</span><br><span class="line">        <span class="keyword">return</span> errors.New(str)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LoadOrStore 会检查 sync.Map 类型对象中是否存在传入的键名，如果存在则返回相应的值和 true</span></span><br><span class="line">    <span class="comment">// 反之会先存入键值对再返回值和 false</span></span><br><span class="line"><span class="keyword">if</span> _, dup := server.serviceMap.LoadOrStore(sname, s); dup &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"rpc: service already defined: "</span> + sname)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册后监听请求"><a href="#注册后监听请求" class="headerlink" title="注册后监听请求"></a>注册后监听请求</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Accept 从监听器上接收获取到的连接并服务每个连接的请求</span></span><br><span class="line"><span class="comment">// Accept 在监听器返回非空的错误前都处于阻塞态</span></span><br><span class="line"><span class="comment">// 调用者一般应使用 goroutine 启用 Accept，比如 `go server.Accept(l)`</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span> <span class="title">Accept</span><span class="params">(lis net.Listener)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := lis.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Print(<span class="string">"rpc.Serve: accept:"</span>, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> server.ServeConn(conn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在-Accept-中调用-ServeConn-函数进行服务"><a href="#在-Accept-中调用-ServeConn-函数进行服务" class="headerlink" title="在 Accept 中调用 ServeConn 函数进行服务"></a>在 Accept 中调用 ServeConn 函数进行服务</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ServeConn 在一个连接上运行 server 并服务该连接.</span></span><br><span class="line"><span class="comment">// ServeConn 在服务该连接到客户端挂起的期间处于阻塞态.</span></span><br><span class="line"><span class="comment">// 一般另起线程来调用本函数，比如 `go server.ServeConn(conn)` (Accept 函数中有调用)</span></span><br><span class="line"><span class="comment">// ServeConn 在该连接上使用 gob 包的有线格式 (参见 gob 包) .</span></span><br><span class="line"><span class="comment">// 如需使用其他备份编解码器, 可以使用 ServeCodec 函数.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span> <span class="title">ServeConn</span><span class="params">(conn io.ReadWriteCloser)</span></span> &#123;</span><br><span class="line">buf := bufio.NewWriter(conn)</span><br><span class="line">srv := &amp;gobServerCodec&#123;</span><br><span class="line">rwc:    conn,</span><br><span class="line">dec:    gob.NewDecoder(conn),</span><br><span class="line">enc:    gob.NewEncoder(buf),</span><br><span class="line">encBuf: buf,</span><br><span class="line">&#125;</span><br><span class="line">server.ServeCodec(srv)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ServeCodec 与 ServeConn 类似，只是使用了指定的编解码器来解码 requests 和编码 responses</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(server *Server)</span> <span class="title">ServeCodec</span><span class="params">(codec ServerCodec)</span></span> &#123;</span><br><span class="line">sending := <span class="built_in">new</span>(sync.Mutex)</span><br><span class="line">wg := <span class="built_in">new</span>(sync.WaitGroup)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">service, mtype, req, argv, replyv, keepReading, err := server.readRequest(codec) <span class="comment">// 读取请求信息</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> debugLog &amp;&amp; err != io.EOF &#123;</span><br><span class="line">log.Println(<span class="string">"rpc:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !keepReading &#123; <span class="comment">// 如果读请求的 header 就出错了，keepReading 为 false，跳出此循环；如果能读取 header 信息便继续</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送一个 response 表示此请求无效</span></span><br><span class="line"><span class="keyword">if</span> req != <span class="literal">nil</span> &#123;</span><br><span class="line">server.sendResponse(sending, req, invalidRequest, codec, err.Error())</span><br><span class="line">server.freeRequest(req)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">wg.Add(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> service.call(server, sending, wg, mtype, req, argv, replyv, codec)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 没有 request 后需等待 response 发送完成再关闭 codec</span></span><br><span class="line">wg.Wait()</span><br><span class="line">codec.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端请求某个服务后，服务端在-ServeCodec-中通过调用-service-call-调用相应服务"><a href="#客户端请求某个服务后，服务端在-ServeCodec-中通过调用-service-call-调用相应服务" class="headerlink" title="客户端请求某个服务后，服务端在 ServeCodec 中通过调用 service.call 调用相应服务"></a>客户端请求某个服务后，服务端在 ServeCodec 中通过调用 service.call 调用相应服务</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *service)</span> <span class="title">call</span><span class="params">(server *Server, sending *sync.Mutex, wg *sync.WaitGroup, mtype *methodType, req *Request, argv, replyv reflect.Value, codec ServerCodec)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> wg != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">&#125;</span><br><span class="line">mtype.Lock()</span><br><span class="line">mtype.numCalls++</span><br><span class="line">mtype.Unlock()</span><br><span class="line">function := mtype.method.Func</span><br><span class="line"><span class="comment">// 执行函数, 返回新的值给 reply</span></span><br><span class="line">returnValues := function.Call([]reflect.Value&#123;s.rcvr, argv, replyv&#125;)</span><br><span class="line"><span class="comment">// 返回值里的错误</span></span><br><span class="line">errInter := returnValues[<span class="number">0</span>].Interface()</span><br><span class="line">errmsg := <span class="string">""</span></span><br><span class="line"><span class="keyword">if</span> errInter != <span class="literal">nil</span> &#123;</span><br><span class="line">errmsg = errInter.(error).Error()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送响应，然后释放当前请求节点</span></span><br><span class="line">server.sendResponse(sending, req, replyv.Interface(), codec, errmsg)</span><br><span class="line">server.freeRequest(req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HTTP-方式"><a href="#HTTP-方式" class="headerlink" title="HTTP 方式"></a>HTTP 方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// ServeHTTP 实现一个用于回应 RPC 请求的 http.Handler</span><br><span class="line">func (server *Server) ServeHTTP(w http.ResponseWriter, req *http.Request) &#123;</span><br><span class="line">if req.Method != &quot;CONNECT&quot; &#123;</span><br><span class="line">w.Header().Set(&quot;Content-Type&quot;, &quot;text/plain; charset=utf-8&quot;)</span><br><span class="line">w.WriteHeader(http.StatusMethodNotAllowed)</span><br><span class="line">io.WriteString(w, &quot;405 must CONNECT\n&quot;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">conn, _, err := w.(http.Hijacker).Hijack() // 让调用者主动接管连接</span><br><span class="line">if err != nil &#123;</span><br><span class="line">log.Print(&quot;rpc hijacking &quot;, req.RemoteAddr, &quot;: &quot;, err.Error())</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">io.WriteString(conn, &quot;HTTP/1.0 &quot;+connected+&quot;\n\n&quot;)</span><br><span class="line">server.ServeConn(conn)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// HandleHTTP 注册 server 的 RPC 信息到 rpcPath 上，注册 server 的 debug 信息到 debugPath 上</span><br><span class="line">// HandleHTTP 会注册到 http.DefaultServeMux 上</span><br><span class="line">// 之后，仍需要调用 http.Serve()，一般会另起线程：&quot;go http.Serve(l, nil)&quot;</span><br><span class="line">func (server *Server) HandleHTTP(rpcPath, debugPath string) &#123;</span><br><span class="line">http.Handle(rpcPath, server)</span><br><span class="line">http.Handle(debugPath, debugHTTP&#123;server&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-client"><a href="#2-client" class="headerlink" title="2. client"></a>2. client</h2><p><img src="/images/go/RPC-Client.png" alt="image"><br></p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Call 代表一个活跃的 RPC.</span></span><br><span class="line"><span class="keyword">type</span> Call <span class="keyword">struct</span> &#123;</span><br><span class="line">ServiceMethod <span class="keyword">string</span>      <span class="comment">// 调用的服务名</span></span><br><span class="line">Args          <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 函数传入参数 (*struct)</span></span><br><span class="line">Reply         <span class="keyword">interface</span>&#123;&#125; <span class="comment">// 函数返回结果 (*struct)</span></span><br><span class="line">Error         error       <span class="comment">// 结束后的错误状态</span></span><br><span class="line">Done          <span class="keyword">chan</span> *Call  <span class="comment">// 非空表示一个 rpc 调用结束</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Client 代表一个 RPC 客户端，同一个客户端可能有多个未返回的调用，也可能被多个 go 线程同时使用</span></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">codec ClientCodec</span><br><span class="line">reqMutex sync.Mutex <span class="comment">// 保护 request</span></span><br><span class="line">request  Request</span><br><span class="line">mutex    sync.Mutex <span class="comment">// 保护 seq</span></span><br><span class="line">seq      <span class="keyword">uint64</span> <span class="comment">// 一个序列值，request 和 response 会以此标识</span></span><br><span class="line">pending  <span class="keyword">map</span>[<span class="keyword">uint64</span>]*Call <span class="comment">// 等待响应的 Call 集合</span></span><br><span class="line">closing  <span class="keyword">bool</span> <span class="comment">// 用户已调用 Close</span></span><br><span class="line">shutdown <span class="keyword">bool</span> <span class="comment">// 服务器已告知停止</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ClientCodec 接口实现了 RPC 会话的客户端一侧 RPC 请求的写入和 RPC 响应的读取。</span></span><br><span class="line"><span class="comment">// 客户端调用 WriteRequest 来写入请求到连接，然后成对调用 ReadRsponseHeader 和</span></span><br><span class="line"><span class="comment">// ReadResponseBody 以读取响应。客户端在结束该连接的事务时调用 Close 方法。</span></span><br><span class="line"><span class="comment">// ReadResponseBody 可以使用 nil 参数调用，以强制回复的主体被读取然后丢弃。</span></span><br><span class="line"><span class="keyword">type</span> ClientCodec <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// WriteRequest 必须能安全的被多个 go 协程同时使用</span></span><br><span class="line">WriteRequest(*Request, <span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line">ReadResponseHeader(*Response) error</span><br><span class="line">ReadResponseBody(<span class="keyword">interface</span>&#123;&#125;) error</span><br><span class="line"></span><br><span class="line">Close() error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端获取-Client-对象"><a href="#客户端获取-Client-对象" class="headerlink" title="客户端获取 Client 对象"></a>客户端获取 Client 对象</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DialHTTP 通过地址连向一个 HTTP RPC server (建立 HTTP 连接)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DialHTTP</span><span class="params">(network, address <span class="keyword">string</span>)</span> <span class="params">(*Client, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> DialHTTPPath(network, address, DefaultRPCPath)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DialHTTPPath 通过地址和路径连向一个 HTTP RPC server</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DialHTTPPath</span><span class="params">(network, address, path <span class="keyword">string</span>)</span> <span class="params">(*Client, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">conn, err := net.Dial(network, address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">io.WriteString(conn, <span class="string">"CONNECT "</span>+path+<span class="string">" HTTP/1.0\n\n"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在切换 RPC 协议前需要保证成功的 HTTP 响应</span></span><br><span class="line">resp, err := http.ReadResponse(bufio.NewReader(conn), &amp;http.Request&#123;Method: <span class="string">"CONNECT"</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &amp;&amp; resp.Status == connected &#123;</span><br><span class="line"><span class="keyword">return</span> NewClient(conn), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">err = errors.New(<span class="string">"unexpected HTTP response: "</span> + resp.Status)</span><br><span class="line">&#125;</span><br><span class="line">conn.Close()</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, &amp;net.OpError&#123;</span><br><span class="line">Op:   <span class="string">"dial-http"</span>,</span><br><span class="line">Net:  network + <span class="string">" "</span> + address,</span><br><span class="line">Addr: <span class="literal">nil</span>,</span><br><span class="line">Err:  err,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dial 通过指定的地址连向一个 RPC server (建立 TCP 连接)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Dial</span><span class="params">(network, address <span class="keyword">string</span>)</span> <span class="params">(*Client, error)</span></span> &#123;</span><br><span class="line">conn, err := net.Dial(network, address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> NewClient(conn), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新建-Client-对象"><a href="#新建-Client-对象" class="headerlink" title="新建 Client 对象"></a>新建 Client 对象</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewClient</span><span class="params">(conn io.ReadWriteCloser)</span> *<span class="title">Client</span></span> &#123;</span><br><span class="line">encBuf := bufio.NewWriter(conn)</span><br><span class="line">client := &amp;gobClientCodec&#123;conn, gob.NewDecoder(conn), gob.NewEncoder(encBuf), encBuf&#125;</span><br><span class="line"><span class="keyword">return</span> NewClientWithCodec(client)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewClientWithCodec</span><span class="params">(codec ClientCodec)</span> *<span class="title">Client</span></span> &#123;</span><br><span class="line">client := &amp;Client&#123;</span><br><span class="line">codec:   codec,</span><br><span class="line">pending: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">uint64</span>]*Call),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> client.input() <span class="comment">// 另起线程接收 response</span></span><br><span class="line"><span class="keyword">return</span> client</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从连接中读取-response-根据-seq-找到-pending-集合中对应的-Call-对象，获取响应内容，Done-结束"><a href="#从连接中读取-response-根据-seq-找到-pending-集合中对应的-Call-对象，获取响应内容，Done-结束" class="headerlink" title="从连接中读取 response, 根据 seq 找到 pending 集合中对应的 Call 对象，获取响应内容，Done 结束"></a>从连接中读取 response, 根据 seq 找到 pending 集合中对应的 Call 对象，获取响应内容，Done 结束</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(client *Client)</span> <span class="title">input</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">var</span> response Response</span><br><span class="line"><span class="keyword">for</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">response = Response&#123;&#125;</span><br><span class="line">err = client.codec.ReadResponseHeader(&amp;response)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">seq := response.Seq</span><br><span class="line">client.mutex.Lock()</span><br><span class="line">call := client.pending[seq] <span class="comment">// 等待队列中的对应当前 response 的序列号的 Call 对象</span></span><br><span class="line"><span class="built_in">delete</span>(client.pending, seq)</span><br><span class="line">client.mutex.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> call == <span class="literal">nil</span>:</span><br><span class="line"><span class="comment">// call == nil 代表等待序列中没有对应的 Call 对象，一般意味着 WriteRequest 时失败了并且 call 已经被删去</span></span><br><span class="line"><span class="comment">// 返回的 response 是读取错误 request 的错误信息</span></span><br><span class="line">err = client.codec.ReadResponseBody(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">err = errors.New(<span class="string">"reading error body: "</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> response.Error != <span class="string">""</span>:</span><br><span class="line"><span class="comment">// 获取到一个错误响应. 将这个传给 Call;</span></span><br><span class="line">call.Error = ServerError(response.Error)</span><br><span class="line">err = client.codec.ReadResponseBody(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">err = errors.New(<span class="string">"reading error body: "</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">call.done()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">err = client.codec.ReadResponseBody(call.Reply)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">call.Error = errors.New(<span class="string">"reading body "</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">call.done()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭等待中的 calls.</span></span><br><span class="line">client.reqMutex.Lock()</span><br><span class="line">client.mutex.Lock()</span><br><span class="line">client.shutdown = <span class="literal">true</span></span><br><span class="line">closing := client.closing</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">if</span> closing &#123;</span><br><span class="line">err = ErrShutdown</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">err = io.ErrUnexpectedEOF</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, call := <span class="keyword">range</span> client.pending &#123;</span><br><span class="line">call.Error = err</span><br><span class="line">call.done()</span><br><span class="line">&#125;</span><br><span class="line">client.mutex.Unlock()</span><br><span class="line">client.reqMutex.Unlock()</span><br><span class="line"><span class="keyword">if</span> debugLog &amp;&amp; err != io.EOF &amp;&amp; !closing &#123;</span><br><span class="line">log.Println(<span class="string">"rpc: client protocol error:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Client-使用不同函数去调取-rpc-服务，Go-可以异步执行，Call-是同步的"><a href="#Client-使用不同函数去调取-rpc-服务，Go-可以异步执行，Call-是同步的" class="headerlink" title="Client 使用不同函数去调取 rpc 服务，Go 可以异步执行，Call 是同步的"></a>Client 使用不同函数去调取 rpc 服务，Go 可以异步执行，Call 是同步的</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Go 异步地执行函数. 本方法 Call 结构体类型指针的返回值代表该次远程调用.</span></span><br><span class="line"><span class="comment">// 通道类型的参数 done 会在本次调用完成时发出信号（通过返回本次 Go 方法的返回值）</span></span><br><span class="line"><span class="comment">// 如果 done 为 nil，Go 会申请一个新的通道（写入返回值的 Done 字段）</span></span><br><span class="line"><span class="comment">// 如果 done 非 nil，done 必须有缓冲，否则 Go 方法会崩溃。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(client *Client)</span> <span class="title">Go</span><span class="params">(serviceMethod <span class="keyword">string</span>, args <span class="keyword">interface</span>&#123;&#125;, reply <span class="keyword">interface</span>&#123;&#125;, done <span class="keyword">chan</span> *Call)</span> *<span class="title">Call</span></span> &#123;</span><br><span class="line">call := <span class="built_in">new</span>(Call)</span><br><span class="line">call.ServiceMethod = serviceMethod</span><br><span class="line">call.Args = args</span><br><span class="line">call.Reply = reply</span><br><span class="line"><span class="keyword">if</span> done == <span class="literal">nil</span> &#123;</span><br><span class="line">done = <span class="built_in">make</span>(<span class="keyword">chan</span> *Call, <span class="number">10</span>) <span class="comment">// buffered.</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果调用者传的 done != nil，则必须确保通道有足够的缓冲来给多个同步 RPCs 使用</span></span><br><span class="line"><span class="comment">// 如果通道完全没有缓冲，最好不要去运行</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">cap</span>(done) == <span class="number">0</span> &#123;</span><br><span class="line">log.Panic(<span class="string">"rpc: done channel is unbuffered"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">call.Done = done</span><br><span class="line">client.send(call)</span><br><span class="line"><span class="keyword">return</span> call</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Call 调用传入名的远程服务，并等待结束返回结果和错误状态</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(client *Client)</span> <span class="title">Call</span><span class="params">(serviceMethod <span class="keyword">string</span>, args <span class="keyword">interface</span>&#123;&#125;, reply <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">call := &lt;-client.Go(serviceMethod, args, reply, <span class="built_in">make</span>(<span class="keyword">chan</span> *Call, <span class="number">1</span>)).Done</span><br><span class="line"><span class="keyword">return</span> call.Error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Go-中调用的函数"><a href="#Go-中调用的函数" class="headerlink" title="Go 中调用的函数"></a>Go 中调用的函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(client *Client)</span> <span class="title">send</span><span class="params">(call *Call)</span></span> &#123;</span><br><span class="line">client.reqMutex.Lock()</span><br><span class="line"><span class="keyword">defer</span> client.reqMutex.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 call 转入等待集合</span></span><br><span class="line">client.mutex.Lock()</span><br><span class="line"><span class="keyword">if</span> client.shutdown || client.closing &#123;</span><br><span class="line">call.Error = ErrShutdown</span><br><span class="line">client.mutex.Unlock()</span><br><span class="line">call.done()</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">seq := client.seq</span><br><span class="line">client.seq++</span><br><span class="line">client.pending[seq] = call</span><br><span class="line">client.mutex.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 request 编码并发送</span></span><br><span class="line">client.request.Seq = seq</span><br><span class="line">client.request.ServiceMethod = call.ServiceMethod</span><br><span class="line">err := client.codec.WriteRequest(&amp;client.request, call.Args)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">client.mutex.Lock()</span><br><span class="line">call = client.pending[seq]</span><br><span class="line"><span class="built_in">delete</span>(client.pending, seq)</span><br><span class="line">client.mutex.Unlock()</span><br><span class="line"><span class="keyword">if</span> call != <span class="literal">nil</span> &#123;</span><br><span class="line">call.Error = err</span><br><span class="line">call.done()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-jsonrpc"><a href="#3-jsonrpc" class="headerlink" title="3. jsonrpc"></a>3. jsonrpc</h2><p>jsonrpc 主要将 gob 序列化工具换成 json 序列化工具，主要函数还是调用 server 里的 FuncWithCodec 函数，原理基本一致</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.gitbook.com/book/smallnest/go-rpc-programming-guide/details" target="_blank" rel="noopener">Go RPC 开发指南</a></li><li><a href="http://colobu.com/2016/09/18/go-net-rpc-guide/" target="_blank" rel="noopener">Go 官方库 RPC 开发指南</a></li><li><a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/08.4.md" target="_blank" rel="noopener">build-web-application-with-golang</a></li><li><a href="https://en.wikipedia.org/wiki/Remote_procedure_call" target="_blank" rel="noopener">rpc wikipedia</a></li><li><a href="https://technet.microsoft.com/en-us/library/cc738291%28v=ws.10%29.aspx?f=255&amp;MSPPError=-2147217396" target="_blank" rel="noopener">How RPC Works</a></li></ul>]]></content>
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PKI 体系</title>
      <link href="/2018/04-http-pki.html"/>
      <url>/2018/04-http-pki.html</url>
      <content type="html"><![CDATA[<h2 id="中间人攻击和信息抵赖"><a href="#中间人攻击和信息抵赖" class="headerlink" title="中间人攻击和信息抵赖"></a>中间人攻击和信息抵赖</h2><p>没有身份验证的情况下，在非对称加密中实现身份验证和密钥协商时，比如常用的 RSA 算法无法确保服务器身份的合法性，因为公钥并不包含服务器的信息。可能出现如下两种情况:</p><ul><li>中间人攻击 (MITM): 攻击者介入通信双方，C - M 通信时使用的是中间人自己的一对公私钥 Key_M，中间人可以解密客户端用 Key_M 加密的信看;<br>M - S 通信时使用的是服务器提供的公钥，加密从客户端得到的消息给服务器完成双方通信</li><li>信息抵赖: 发送消息者可以否认之前发过的消息，因为接收端使用公钥不能确定之前接收的消息来源身份</li></ul><p><img src="/images/http/MITM.png" alt="image"></p><p>此时需要一种认证体系以确保通信者是安全可靠的。</p><h2 id="PKI-互联网公钥基础设施"><a href="#PKI-互联网公钥基础设施" class="headerlink" title="PKI - 互联网公钥基础设施"></a>PKI - 互联网公钥基础设施</h2><p><strong>PKI</strong> 的目标就是实现不同成员在不见面的情况下进行安全通信，当前采用的模型是基于可信的第三方机构，也就是 <strong>证书颁发机构 (certification authority，CA)</strong> 签发的证书。<br>PKI 通过数字证书认证机构 (CA) 将用户的个人身份跟公开密钥链接在一起。对每个证书中心用户的身份必须是唯一的。链接关系由注册和发布过程确定，取决于担保级别，链接关系可能由 CA 的各种软件或在人为监督下完成。</p><p><img src="/images/http/PKI.png" alt="image"></p><ul><li>订阅人: 或者叫最终实体，是指那些需要证书来提供安全服务的团体，维护服务端的人</li><li>登记机构 (registration authority - RA): 主要是完成一些证书签发的相关管理工作。例如， RA 会首先对用户进行必要的身份验证，然后才会去找 CA 签发证书。在某些情况下，<br>当 CA 希望在用户附近建立一个分支机构时（例如在不同的国家建立当地登记中心），我们也称 RA 为本地登记机构（local registration authority，LRA）。实际上，很多 CA 也执行 RA 的职责。RA 确保公开密钥和个人身份链接，可以防抵赖。</li><li>凭证签发请求文件 (Certificate Signing Request - CSR): 一种包含凭证签发时所需的公钥、组织信息、个人信息 (域名) 等信息的 (.csr) 文件，不含私钥信息。</li><li>证书颁发机构 (certification authority - CA): 是指我们都信任的证书颁发机构，CA 通过线上、线下等多种手段验证申请者提供信息的真实性，如组织是否存在、企业是否合法，是否拥有域名的所有权等，确认申请用户的身份之后再签发证书。<br>同时 CA 会在线提供其所签发证书的最新吊销信息，这样信赖方就可以验证证书是否仍然有效。</li><li>证书 (certificate) 包含以下信息：申请者公钥、申请者的组织信息和个人信息、签发机构 CA 的信息、有效时间、证书序列号等信息的明文，同时包含一个签名（使用散列函数计算公开的明文信息的信息摘要，<br>然后采用 CA 的私钥对信息摘要进行加密，此密文即签名）。<strong>证书 = 公钥 + 申请者与颁发者信息 + 签名</strong></li><li>信赖方 (relying party): 是指那些证书使用者。一般是指那些需要证书验证的网页浏览器、其他程序以及操作系统。他们通过维护根可信证书库来执行验证，<br>这些证书库包含某些 CA 的最终可信证书（信任密钥，trust anchor）。更广泛地说，信赖方是指那些需要通过证书在互联网上进行安全通信的最终用户。用户接收到证书后，读取证书中的相关的明文信息，采用相同的散列函数计算得到信息摘要，<br>然后利用对应 CA 的公钥解密签名数据，对比证书的信息摘要，如果一致，则可以确认证书的合法性；然后去查询证书的吊销情况</li></ul><p><img src="/images/http/certificate-status.png" alt="image"></p><ul><li>证书吊销列表 (Certificate Revocation List - CRL): 一个单独的文件。该文件包含了 CA 已经吊销的证书序列号 (唯一) 与吊销日期，同时该文件包含生效日期并通知下次更新该文件的时间，当然该文件必然包含 CA 私钥的签名以验证文件的合法性。<br>证书中一般会包含一个 URL 地址 CRL Distribution Point，通知使用者去哪里下载对应的 CRL 以校验证书是否吊销。该吊销方式的优点是不需要频繁更新，但是不能及时吊销证书，因为 CRL 更新时间一般是几天，这期间可能已经造成了极大损失。</li><li>证书状态在线查询协议 (Online Certificate Status Protocol - OCSP): 一个实时查询证书是否吊销的方式。请求者发送证书的信息并请求查询，服务器返回正常、吊销或未知中的任何一个状态。证书中一般也会包含一个 OCSP 的 URL 地址，要求查询服务器具有良好的性能。<br>部分 CA 或大部分的 <a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E8%AA%8D%E8%AD%89#%E8%87%AA%E7%B0%BD%E8%AD%89%E6%9B%B8" target="_blank" rel="noopener">自签 CA (根证书)</a> 都是未提供 CRL 或 OCSP 地址的，对于吊销证书会是一件非常麻烦的事情。</li></ul><p>一个具体实例: <a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E8%AA%8D%E8%AD%89#%E7%94%B3%E9%A0%98%E5%8F%8A%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E8%AA%8D%E8%AD%89#%E7%94%B3%E9%A0%98%E5%8F%8A%E4%BD%BF%E7%94%A8</a></p><h2 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h2><h3 id="证书大致分为三类"><a href="#证书大致分为三类" class="headerlink" title="证书大致分为三类"></a>证书大致分为三类</h3><ul><li>自签名 CA: 在自签名 CA 中，证书中的公钥和用于验证证书的密钥是相同的。一些自签名 CA 是根 CA。这种自签名证书通常不会被广泛信任，使用时可能会遇到电脑软件的安全警告。自签名证书本身就是根证书。</li><li>从属 CA: 在从属 CA 中，证书中的公钥和用于核实证书的密钥是不同的。一个 CA 向另一个 CA 颁发证书的过程叫做交叉认证 。</li><li>根 CA: 根 CA 是一种特殊的 CA，它受到客户无条件地信任，位于证书层次结构的最高层。所有证书链均终止于根 CA。根颁发机构必须对它自己的证书签名，因为在证书层次结构中再也没有更高的认证机构了。根证书也是自签名证书。</li></ul><p>其他的还可以细分为中介证书、终端实体证书、授权证书、TLS 服务器证书、通配符证书、TLS 客户端证书</p><h3 id="审核级别-担保级别"><a href="#审核级别-担保级别" class="headerlink" title="审核级别 (担保级别)"></a>审核级别 (担保级别)</h3><ul><li>域名验证 (DV): 最基本的审核级别，如果申领代表可以证明他拥有管理某域名的权力，认证机构就可以发放域名验证（DV）证书，一般认证机构通常使用自动机制或通过电邮确认审核域名拥有权，成本较低</li><li>组织验证 (OV): 代表可以证明他拥有管理某域名的权力，而且相关组织是实际存在的法人，认证机构可以发放组织验证（OV）证书。审核程序通常需要经过人手处理。</li><li>扩展验证 (EV): 最严格的审核级别，审核过程可能牵涉专业法律人员的调查及独立审计人员的确认，成本也更高；成功获得扩展验证证书的网站，浏览器通常会在地址栏以绿色表示相关机构的法人名称及所属国家代码。扩展验证证书的主体名称或主体别名上不可以有通配符</li></ul><h3 id="证书结构"><a href="#证书结构" class="headerlink" title="证书结构"></a>证书结构</h3><p><img src="/images/http/certificate-struct.png" alt="image"></p><ul><li>版本号 (version): 证书一共有 3 个版本号，分别用 0、1、2 编码表示版本 1、版本 2 和版本 3。版本 1 只支持简单的字段，版本 2 增加了两个标识符，而版本 3 则增加了扩展功能。现在大部分的证书都采用版本 3 的格式。</li><li>序列号 (serialNumber): 在一开始，序列号只要是正整数即可，是每个 CA 用来唯一标识其所签发的证书。但是在出现了针对证书签名的预选 <a href="http://www.freebuf.com/articles/database/133391.html" target="_blank" rel="noopener">前缀攻击</a> 之后，序列号增加了更多的要求来防止此类攻击；现在序列号需要是无序的（无法被预测）而且至少包括 20 位的熵</li><li>签名算法 (signture Algorithm): 这个字段指明证书签名所用的算法，需要放到证书里面，这样才能被证书签名保护</li><li>颁发者 (issuer): 证书颁发者的可分辨名称（distinguished name，DN），这个字段比较复杂，根据不同的实体会包含许多部分。举例来说，Verisign 根证书的可分辨名称是 /C=US/O=VeriSign, Inc./OU=Class 3 Public Primary Certification Authority；它包括了国家、组织和组织单位三个部分。</li><li>有效期 (validity): 证书的有效期包括开始日期和结束日期，在这段时间内证书是有效的。</li><li>使用者 (subject): 证书使用实体的可分辨名称，和公钥一起用于证书的签发。在自签名证书里，使用者 (subject) 和颁发者 (issuer) 字段的可分辨名称是一样的。在最开始，可分辨名称里面的公用名（common name， CN）主要用于服务器主机名（例如 /CN=<a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 用于 <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 域名的证书）</li><li>公钥 (subject public-key info): 这个字段包含了公钥、算法 ID、可选参数</li><li>扩展 (extensions): 比如密钥用法、证书策略、CRL 分发点、使用者密钥标识符等等</li></ul><p><img src="/images/http/github-certificate.png" alt="image"></p><h3 id="证书链"><a href="#证书链" class="headerlink" title="证书链"></a>证书链</h3><p>CA 根证书和服务器实体证书中间增加一层证书机构，即中介证书，证书的产生和验证原理不变，只是增加一层验证，只要最后能够被任何信任的 CA 根证书验证合法即可</p><ol><li>服务器证书 server.pem 的签发者为中间证书机构 inter，inter 根据证书 inter.pem 验证 server.pem 确实为自己签发的有效证书;</li><li>中间证书 inter.pem 的签发 CA 为 root，root 根据证书 root.pem 验证 inter.pem 为自己签发的合法证书;</li><li>客户端内置信任 CA 的 root.pem 证书，因此服务器证书 server.pem 被信任。</li></ol><p><img src="/images/http/certificate-chain.png" alt="image"></p><p>具体例子可以看维基百科的例子: <a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E4%BB%BB%E9%8F%88#%E8%88%89%E4%BE%8B" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E4%BF%A1%E4%BB%BB%E9%8F%88#%E8%88%89%E4%BE%8B</a></p><p>点击浏览器地址栏的绿色小锁可以查看网站的证书链:</p><p><img src="/images/http/chrome-certificate-chain.png" alt="image"></p><p>二级证书结构存在的优势：</p><ul><li>减少根证书结构的管理工作量，可以更高效的进行证书的审核与签发;</li><li>根证书一般内置在客户端中，私钥一般离线存储，一旦私钥泄露，则吊销过程非常困难，无法及时补救;</li><li>中介证书结构的私钥泄露，则可以快速在线吊销，并重新为用户签发新的证书;</li><li>证书链四级以内一般不会对 HTTPS 的性能造成明显影响</li></ul><p>服务器一般提供一条证书链，但也有多条路径的可能。以 <a href="https://blog.csdn.net/fangwm2011/article/details/6623887" target="_blank" rel="noopener">交叉证书</a> 为例，一条可信路径可以一直到 CA 的主要根证书，另外一条则是到可选根证书上。<br>CA 有时候会为同样的密钥签发多张证书，例如现在最常使用的签名算法是 SHA1，因为安全原因正在逐步迁移到 SHA256， CA 可以使用同样的密钥签发出不同签名的新证书。如果信赖方恰好有两张这样的证书，那么就可以构建出两条不同的可信路径。</p><h2 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h2><p>再回过头来看中间人攻击，需要身份验证后中间人与 Server 通信时接收服务器的证书实现身份验证，但与客户端通信时无法向用户提供可信任的证书。</p><p><img src="/images/http/MITM-Cert.png" alt="image"></p><p>除非伪造一份证书 (很困难)，或者骗取客户端信任，比如在客户机操作系统上添加中间人证书的完全信任，以此实现用户的信任和身份验证。</p><p>举个栗子:</p><p>使用抓包工具 Charles 时，如果想抓取 HTTPS 的内容，就需要安装其提供的证书并添加信任</p><p><img src="/images/http/Charles.png" alt="image"></p><p>没有信任时，抓取的 HTTPS 内容无法解析</p><p><img src="/images/http/nossl.png" alt="image"></p><p>取得信任后，抓取的 HTTPS 请求可以和 HTTP 请求一样直接读取</p><p><img src="/images/http/withssl.png" alt="image"></p><p>在这个过程中 Charles 就是一个中间人，而且可以完全获取 HTTPS 信息，因为用户安装并信任它的证书，也就可以做到身份验证。</p><blockquote><p>可以看到加密协议下所有连接都是 Connect 形式，这涉及到 <a href="https://zh.wikipedia.org/wiki/%E9%9A%A7%E9%81%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">隧道协议 - Tunneling Protocol</a> 的概念</p></blockquote><p>使用隧道的原因是在不兼容的网络上传输数据，或在不安全网络上提供一个安全路径。</p><p>隧道通信的机制如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">The client asks an HTTP Proxy server to tunnel the TCP connection to the desired destination.</span><br><span class="line">The server then proceeds to make the connection on behalf of the client. Once the connection has been established by the server,</span><br><span class="line">the Proxy server continues to proxy the TCP stream to and from the client.The client is now being proxied to the remote host.</span><br><span class="line">Any data sent to the proxy server is now forwarded, unmodified, to the remote host and the client can communicate using any protocol accepted by the remote host</span><br><span class="line"></span><br><span class="line">Proxy servers may also limit connections by only allowing connections to the default HTTPS port 443, whitelisting hosts, or blocking traffic which doesn&apos;t appear to be SSL.</span><br><span class="line"></span><br><span class="line">客户端先请求一个代理服务器去建立和目标服务器之间的 tcp tunnel，目标服务器尝试连接客户端 (实际是代理服务器)，如果连接成功建立，代理服务器会给客户端返回 200 ok 并继续代理客户端和目标服务器之间的 tcp 流。</span><br><span class="line">任何发送给代理服务器的数据都会不加修改地被转发，远程主机和客户端可以通过任何协议 (TLS、SSH、SOCKS、PPTP...) 进行后续交互。</span><br><span class="line"></span><br><span class="line">代理服务器也可以通过端口限制 (443)、host 白名单、阻止非 SSL 的数据流来限制连接</span><br></pre></td></tr></table></figure><p>一些代理服务器需要认证信息来建立 tunnel. 常见的是 Proxy-Authorization 头域:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONNECT server.example.com:80 HTTP/1.1</span><br><span class="line">Host: server.example.com:80</span><br><span class="line">Proxy-Authorization: basic aGVsbG86d29ybGQ=</span><br></pre></td></tr></table></figure><p>关于这个中间代理的详细信息见 <a href="https://en.wikipedia.org/wiki/DMZ_(computing)" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/DMZ_(computing)</a></p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>讲到 Charles，不得不提另一个抓包工具 Wireshark。这两个工具的抓包原理不同，Charles 是通过代理过滤抓取本机的网络请求，主要抓 HTTP、HTTPS 的请求；<br>Wireshark 则是使用了 <a href="https://zh.wikipedia.org/wiki/%E6%B7%B7%E6%9D%82%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">网卡混杂模式 - promiscuous mode</a>，可以抓取指定网卡上所有流过的包，可以抓取应用层、传输层、网络层的各种封包，但是正常情况下不能解析 HTTPS 的内容 (可以通过配置浏览器提供的对称协商密钥或者服务器的私钥来解密 TLS 内容)。</p><p>开启混杂模式时除了可以看到自己电脑上的网络封包，还可以看到目标地址不是本机的网络包 (如果路由器没有做网络分发的工作的话，完全有可能接收到其他电脑的网络包)，还可以看到局域网内的广播等等。我看了一篇于此相关的网络攻击手段 - <a href="https://zhuanlan.zhihu.com/p/28818627" target="_blank" rel="noopener">ARP 攻击</a>。</p><p>ARP（Address Resolution Protocol）即地址解析协议， 用于实现从 IP 地址到 MAC 地址的映射，即询问目标 IP 对应的 MAC 地址，如图</p><p><img src="/images/http/ARP.png" alt="image"></p><p>而 ARP 攻击者可以通过两种方式实现抓取监听局域网内全部或者想要的目标的网络数据:</p><ul><li>通过大密集的 ARP 回应抢占或覆盖路由的映射表，使路由以为攻击者就是目标，然后把 ip 映射到错误对象的 mac 上，之后攻击者便能接收目标 ip 的网络数据</li><li>在局域网内向所有 ip 客户机广播，假装自己是网关，然后所有目标机器向自己发送外网或者转发请求数据</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E5%9F%BA%E7%A4%8E%E5%BB%BA%E8%A8%AD" target="_blank" rel="noopener">PKI - wiki</a></li><li><a href="https://www.wosign.com/faq/faq2016-0309-03.htm" target="_blank" rel="noopener">PKI 体系</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E4%BB%BB%E9%8F%88" target="_blank" rel="noopener">信任链 - wiki</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">MITM</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%87%91%E9%91%B0%E8%AA%8D%E8%AD%89" target="_blank" rel="noopener">数字证书 - wiki</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%95%B8%E4%BD%8D%E7%B0%BD%E7%AB%A0" target="_blank" rel="noopener">数字签名 - wiki</a></li><li><a href="https://en.wikipedia.org/wiki/HTTP_tunnel" target="_blank" rel="noopener">http tunnel</a></li><li><a href="https://en.wikipedia.org/wiki/Tunneling_protocol" target="_blank" rel="noopener">Tunneling protocol</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">代理服务器 - wiki</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86" target="_blank" rel="noopener">反向代理 - wiki</a></li></ul>]]></content>
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http 扩展阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSL/TLS 详解</title>
      <link href="/2018/03-http-tls.html"/>
      <url>/2018/03-http-tls.html</url>
      <content type="html"><![CDATA[<h2 id="1-TLS-定义"><a href="#1-TLS-定义" class="headerlink" title="1. TLS 定义"></a>1. TLS 定义</h2><p><strong>SSL</strong>(Secure Sockets Layer) 安全套接层，是一种安全协议，经历了 SSL 1.0、2.0、3.0 版本后发展成了标准安全协议 - <strong>TLS</strong>(Transport Layer Security) 传输层安全性协议。TLS 有 1.0 (RFC 2246)、1.1(RFC 4346)、1.2(RFC 5246)、1.3(1.3 在 3.26 号正式被批准) 版本。</p><p>TLS 在实现上分为 <strong>记录层</strong> 和 <strong>握手层</strong> 两层，其中握手层又含四个子协议: 握手协议（handshake protoco 协议（change cipher spec protocol）、应用数据协议（application data protocol）和警报协议（alert protocol）</p><p><img src="/images/http/tls.png" alt="image"></p><h2 id="2-HTTPS-HTTP-over-TLS"><a href="#2-HTTPS-HTTP-over-TLS" class="headerlink" title="2. HTTPS = HTTP over TLS."></a>2. HTTPS = HTTP over TLS.</h2><p>只需配置浏览器和服务器相关设置开启 TLS，即可实现 HTTPS，TLS 高度解耦，可装可卸，与上层高级应用层协议相互协作又相互独立。</p><p><img src="/images/http/https.png" alt="image"></p><h2 id="3-加密"><a href="#3-加密" class="headerlink" title="3. 加密"></a>3. 加密</h2><p>TLS/SSL 的功能实现主要依赖于三类基本算法：散列函数 Hash、对称加密和非对称加密，其利用非对称加密实现身份认证和密钥协商，对称加密算法采用协商的密钥对数据加密，基于散列函数验证信息的完整性。</p><p><img src="/images/http/encrypt.png" alt="image"></p><p>TLS 的基本工作方式是，客户端使用非对称加密与服务器进行通信，实现身份验证并协商对称加密使用的密钥，然后对称加密算法采用协商密钥对信息以及信息摘要进行加密通信，不同的节点之间采用的对称密钥不同，从而可以保证信息只能通信双方获取。</p><p>例如，在 HTTPS 协议中，客户端发出请求，服务端会将公钥发给客户端，客户端验证过后生成一个密钥再用公钥加密后发送给服务端，成功后建立连接。通信过程中客户端将请求数据用得到的公钥加密后发送，服务端用私钥解密；服务端用客户端给的密钥加密响应报文，回复客户端，客户端再用存好的相同的密钥解密。</p><h2 id="4-记录层"><a href="#4-记录层" class="headerlink" title="4. 记录层"></a>4. 记录层</h2><p>记录协议负责在传输连接上交换的所有底层消息，并且可以配置加密。每一条 TLS 记录以一个短标头开始。标头包含记录内容的类型 (或子协议)、协议版本和长度。原始消息经过分段 (或者合并)、压缩、添加认证码、加密转为 TLS 记录的数据部分。</p><p><img src="/images/http/message.png" alt="image"></p><h3 id="分片-Fragmentation"><a href="#分片-Fragmentation" class="headerlink" title="分片 (Fragmentation)"></a>分片 (Fragmentation)</h3><p>记录层将信息块分割成携带 2^14 字节 (16KB) 或更小块的数据的 TLSPlaintext 记录。</p><p>记录协议传输由其他协议层提交给它的不透明数据缓冲区。如果缓冲区超过记录的长度限制（2^14），记录协议会将其切分成更小的片段。反过来也是可能的，属于同一个子协议的小缓冲区也可以组合成一个单独的记录。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">  uint8 major, minor;</span><br><span class="line">&#125; ProtocolVersion;</span><br><span class="line"></span><br><span class="line">enum &#123;</span><br><span class="line">  change_cipher_spec(20),</span><br><span class="line">  alert(21),</span><br><span class="line">  handshake(22),</span><br><span class="line">  application_data(23), (255)</span><br><span class="line">&#125; ContentType;</span><br><span class="line"></span><br><span class="line">struct &#123;</span><br><span class="line">  ContentType type; // 用于处理封闭片段的较高级协议</span><br><span class="line">  ProtocolVersion version; // 使用的安全协议版本</span><br><span class="line">  uint16 length; // TLSPlaintext.fragment 的长度（以字节为单位），不超过 2^14</span><br><span class="line">  opaque fragment[TLSPlaintext.length]; // 透明的应用数据，被视为独立的块，由类型字段指定的较高级协议处理</span><br><span class="line">&#125; TLSPlaintext;</span><br></pre></td></tr></table></figure><h3 id="记录压缩和解压缩-Record-compression-and-decompression"><a href="#记录压缩和解压缩-Record-compression-and-decompression" class="headerlink" title="记录压缩和解压缩 (Record compression and decompression)"></a>记录压缩和解压缩 (Record compression and decompression)</h3><p>压缩算法将 TLSPlaintext 结构转换为 TLSCompressed 结构。如果定义 CompressionMethod 为 null 表示不压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">  ContentType type; // same as TLSPlaintext.type</span><br><span class="line">  ProtocolVersion version; // same as TLSPlaintext.version</span><br><span class="line">  uint16 length; // TLSCompressed.fragment 的长度，不超过 2^14 + 1024</span><br><span class="line">  opaque fragment[TLSCompressed.length];</span><br><span class="line">&#125; TLSCompressed;</span><br></pre></td></tr></table></figure><h3 id="空或标准流加密-Null-or-standard-stream-cipher"><a href="#空或标准流加密-Null-or-standard-stream-cipher" class="headerlink" title="空或标准流加密 (Null or standard stream cipher)"></a>空或标准流加密 (Null or standard stream cipher)</h3><p>流加密（BulkCipherAlgorithm）将 TLSCompressed.fragment 结构转换为流 TLSCiphertext.fragment 结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stream-ciphered struct &#123;</span><br><span class="line">opaque content[TLSCompressed.length];</span><br><span class="line">opaque MAC[CipherSpec.hash_size];</span><br><span class="line">&#125; GenericStreamCipher;</span><br></pre></td></tr></table></figure><p>MAC 产生方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HMAC_hash(MAC_write_secret, seq_num + TLSCompressed.type +</span><br><span class="line">TLSCompressed.version + TLSCompressed.length +</span><br><span class="line">TLSCompressed.fragment));</span><br></pre></td></tr></table></figure><p>seq_num（记录的序列号）、hash（SecurityParameters.mac_algorithm 指定的哈希算法）</p><blockquote><p>MAC(Message authentication code) - 消息认证码</p></blockquote><blockquote><p>注意，MAC 是在加密之前计算的。流加密加密整个块，包括 MAC。对于不使用同步向量 (例如 RC4) 的流加密，从一个记录结尾处的流加密状态仅用于后续数据包。如果 CipherSuite 是 TLS_NULL_WITH_NULL_NULL，则加密由身份操作 (数据未加密，MAC 大小为零，暗示不使用 MAC) 组成。TLSCiphertext.length 是 TLSCompressed.length 加上 CipherSpec.hash_size。</p></blockquote><h3 id="CBC-块加密-分组加密"><a href="#CBC-块加密-分组加密" class="headerlink" title="CBC 块加密 (分组加密)"></a>CBC 块加密 (分组加密)</h3><p>块加密（如 RC2 或 DES），将 TLSCompressed.fragment 结构转换为块 TLSCiphertext.fragment 结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">block-ciphered struct &#123;</span><br><span class="line">  opaque content[TLSCompressed.length];</span><br><span class="line">  opaque MAC[CipherSpec.hash_size];</span><br><span class="line">  uint8 padding[GenericBlockCipher.padding_length];</span><br><span class="line">  uint8 padding_length;</span><br><span class="line">&#125; GenericBlockCipher;</span><br></pre></td></tr></table></figure><p>padding: 添加的填充将明文长度强制为块密码块长度的整数倍。填充可以是长达 255 字节的任何长度，只要满足 TLSCiphertext.length 是块长度的整数倍。长度大于需要的值可以阻止基于分析交换信息长度的协议攻击。填充数据向量中的每个 uint8 必须填入填充长度值 (即 padding_length)。</p><p>padding_length: 填充长度应该使得 GenericBlockCipher 结构的总大小是加密块长度的倍数。合法值范围从零到 255（含）。<strong>该长度指定 padding_length 字段本身除外的填充字段的长度</strong></p><p>加密块的数据长度（TLSCiphertext.length）是 TLSCompressed.length，CipherSpec.hash_size 和 padding_length 的总和加一</p><blockquote><p>示例: 如果块长度为 8 字节，压缩内容长度（TLSCompressed.length）为 61 字节，MAC 长度为 20 字节，则填充前的长度为 82 字节（padding_length 占 1 字节）。<br>因此，为了使总长度为块长度 (8 字节) 的偶数倍，模 8 的填充长度必须等于 6，所以填充长度可以为 6，14，22 等。如果填充长度是需要的最小值，比如 6，填充将为 6 字节，每个块都包含值 6。因此，块加密之前的 GenericBlockCipher 的最后 8 个八位字节将为 xx 06 06 06 06 06 06 06，其中 xx 是 MAC 的最后一个八位字节。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; XX  - 06 06 06 06 06 06 - 06</span><br><span class="line">&gt; MAC -     padding[6]    - padding_length</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p></p></blockquote><h3 id="记录有效载荷保护-Record-payload-protection"><a href="#记录有效载荷保护-Record-payload-protection" class="headerlink" title="记录有效载荷保护 (Record payload protection)"></a>记录有效载荷保护 (Record payload protection)</h3><p>加密和 MAC 功能将 TLSCompressed 结构转换为 TLSCiphertext。记录的 MAC 还包括序列号，以便可以检测到丢失，额外或重复的消息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">  ContentType type; // same</span><br><span class="line">  ProtocolVersion version; // same</span><br><span class="line">  uint16 length; // TLSCiphertext.fragment 的长度，不超过 2^14 + 2048</span><br><span class="line">  select (CipherSpec.cipher_type) &#123;</span><br><span class="line">    case stream: GenericStreamCipher;</span><br><span class="line">    case block: GenericBlockCipher;</span><br><span class="line">  &#125; fragment; // TLSCompressed.fragment 的加密形式，带有 MAC</span><br><span class="line">&#125; TLSCiphertext;</span><br></pre></td></tr></table></figure><blockquote><p>注意<br>这里提到的都是先 MAC 再加密，是基于 RFC 2246 的方案 (TLS 1.0) 写的。但新的方案选择先加密再 MAC，这种替代方案中，首先对明文和填充进行加密，再将结果交给 MAC 算法。这可以保证主动网络攻击者不能操纵任何加密数据。</p></blockquote><h3 id="密钥计算-Key-calculation"><a href="#密钥计算-Key-calculation" class="headerlink" title="密钥计算 (Key calculation)"></a>密钥计算 (Key calculation)</h3><p>记录协议需要一种算法，从握手协议提供的安全性参数生成密钥、<a href="https://zh.wikipedia.org/wiki/%E5%88%9D%E5%A7%8B%E5%90%91%E9%87%8F" target="_blank" rel="noopener">IV</a> 和 MAC secret.</p><p>主密钥 (Master secret): 在连接中双方共享的一个 48 字节的密钥<br>客户随机数 (client random): 由客户端提供的 32 字节值<br>服务器随机数 (server random): 由服务器提供的 32 字节值</p><h2 id="5-握手层"><a href="#5-握手层" class="headerlink" title="5. 握手层"></a>5. 握手层</h2><ul><li>握手协议的职责是生成通信过程所需的共享密钥和进行身份认证。这部分使用无密码套件，为防止数据被窃听，通过公钥密码或 Diffie-Hellman 密钥交换技术通信。</li><li>密码规格变更协议，用于密码切换的同步，是在握手协议之后的协议。握手协议过程中使用的协议是“不加密”这一密码套件，握手协议完成后则使用协商好的密码套件。</li><li>警告协议，当发生错误时使用该协议通知通信对方，如握手过程中发生异常、消息认证码错误、数据无法解压缩等。</li><li>应用数据协议，通信双方真正进行应用数据传输的协议，传送过程通过 TLS 应用数据协议和 TLS 记录协议来进行传输。</li></ul><p>握手是 TLS 协议中最精密复杂的部分。在这个过程中，通信双方协商连接参数，并且完成身 份验证。根据使用的功能的不同，整个过程通常需要交换 6~10 条消息。根据配置和支持的协议扩展的不同，交换过程可能有许多变种。在使用中经常可以观察到以下三种流程：(1) 完整的握手， 对服务器进行身份验证；(2) 恢复之前的会话采用的简短握手；(3) 对客户端和服务器都进行身份验证的握手。</p><p>握手协议消息的标头信息包含消息类型（1 字节）和长度（3 字节），余下的信息则取决于消息类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">  HandshakeType msg_type;</span><br><span class="line">  uint24 length;</span><br><span class="line">  HandshakeMessage message;</span><br><span class="line">&#125; Handshake;</span><br></pre></td></tr></table></figure><h3 id="5-1-完整握手"><a href="#5-1-完整握手" class="headerlink" title="5.1 完整握手"></a>5.1 完整握手</h3><p>每一个 TLS 连接都会以握手开始。如果客户端此前并未与服务器建立会话，那么双方会执行一次完整的握手流程来协商 TLS 会话。握手过程中，客户端和服务器将进行以下四个主要步骤:</p><ul><li>交换各自支持的功能，对需要的连接参数达成一致</li><li>验证出示的证书，或使用其他方式进行身份验证</li><li>对将用于保护会话的共享主密钥达成一致</li><li>验证握手消息并未被第三方团体修改</li></ul><p>下面介绍最常见的握手规则，一种不需要验证客户端身份但需要验证服务器身份的握手:</p><p><img src="/images/http/full-handshake.png" alt="image"></p><h4 id="5-1-1-ClientHello"><a href="#5-1-1-ClientHello" class="headerlink" title="5.1.1 ClientHello"></a>5.1.1 ClientHello</h4><p>这条消息将客户端的功能和首选项传送给服务器。</p><p><img src="/images/http/wireshark-clienthello.png" alt="image"></p><ul><li>Version: 协议版本（protocol version）指示客户端支持的最佳协议版本</li><li>Random: 一个 32 字节数据，28 字节是随机生成的 (图中的 Random Bytes)；剩余的 4 字节包含额外的信息，与客户端时钟有关 (图中使用的是 GMT Unix Time)。在握手时，客户端和服务器都会提供随机数，客户端的暂记作 random_C (用于后续的密钥的生成)。这种随机性对每次握手都是独一无二的，在身份验证中起着举足轻重的作用。它可以防止 <a href="https://zh.wikipedia.org/wiki/%E9%87%8D%E6%94%BE%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">重放攻击</a>，并确认初始数据交换的完整性。</li><li>Session ID: 在第一次连接时，会话 ID（session ID）字段是空的，这表示客户端并不希望恢复某个已存在的会话。典型的会话 ID 包含 32 字节随机生成的数据，一般由服务端生成通过 ServerHello 返回给客户端。</li><li>Cipher Suites: 密码套件（cipher suite）块是由客户端支持的所有密码套件组成的列表，该列表是按优先级顺序排列的</li><li>Compression: 客户端可以提交一个或多个支持压缩的方法。默认的压缩方法是 null，代表没有压缩</li><li>Extensions: 扩展（extension）块由任意数量的扩展组成。这些扩展会携带额外数据</li></ul><h4 id="5-1-2-ServerHello"><a href="#5-1-2-ServerHello" class="headerlink" title="5.1.2 ServerHello"></a>5.1.2 ServerHello</h4><p>是将服务器选择的连接参数传回客户端。</p><p><img src="/images/http/wireshark-serverhello.png" alt="image"></p><p>这个消息的结构与 ClientHello 类似，只是每个字段只包含一个选项，其中包含服务端的 random_S 参数 (用于后续的密钥协商)。服务器无需支持客户端支持的最佳版本。如果服务器不支持与客户端相同的版本，可以提供某个其他版本以期待客户端能够接受</p><p>图中的 <code>Cipher Suite</code> 是后续密钥协商和身份验证要用的加密套件，此处选择的密钥交换与签名算法是 ECDHE_RSA，对称加密算法是 AES-GCM，后面会讲到这个</p><p>还有一点默认情况下 TLS 压缩都是关闭的，因为 <a href="https://zh.wikipedia.org/wiki/CRIME" target="_blank" rel="noopener">CRIME</a> 攻击会利用 TLS 压缩恢复加密认证 cookie，实现会话劫持，而且一般配置 gzip 等内容压缩后再压缩 TLS 分片效益不大又额外占用资源，所以一般都关闭 TLS 压缩</p><h4 id="5-1-3-Certificate"><a href="#5-1-3-Certificate" class="headerlink" title="5.1.3 Certificate"></a>5.1.3 Certificate</h4><p>典型的 Certificate 消息用于携带服务器 X.509 <a href="https://zh.wikipedia.org/wiki/%E4%BF%A1%E4%BB%BB%E9%8F%88" target="_blank" rel="noopener">证书链</a>。<br>服务器必须保证它发送的证书与选择的算法套件一致。比方说，公钥算法与套件中使用的必须匹配。除此以外，一些密钥交换算法依赖嵌入证书的特定数据，而且要求证书必须以客户端支持的算法签名。所有这些都表明服务器需要配置多个证书（每个证书可能会配备不同的证书链）。</p><p><img src="/images/http/wireshark-certificate.png" alt="image"></p><p>Certificate 消息是可选的，因为并非所有套件都使用身份验证，也并非所有身份验证方法都需要证书。更进一步说，虽然消息默认使用 X.509 证书，但是也可以携带其他形式的标志；一些套件就依赖 <a href="https://zh.wikipedia.org/wiki/PGP" target="_blank" rel="noopener">PGP 密钥</a></p><h4 id="5-1-4-ServerKeyExchange"><a href="#5-1-4-ServerKeyExchange" class="headerlink" title="5.1.4 ServerKeyExchange"></a>5.1.4 ServerKeyExchange</h4><p>携带密钥交换需要的额外数据。ServerKeyExchange 是可选的，消息内容对于不同的协商算法套件会存在差异。部分场景下，比如使用 RSA 算法时，服务器不需要发送此消息。</p><p>ServerKeyExchange 仅在服务器证书消息（也就是上述 Certificate 消息）不包含足够的数据以允许客户端交换预主密钥（premaster secret）时才由服务器发送。</p><p>比如基于 DH 算法的握手过程中，需要单独发送一条 ServerKeyExchange 消息带上 DH 参数:</p><p><img src="/images/http/wireshark-serverhellodone.png" alt="image"></p><h4 id="5-1-5-ServerHelloDone"><a href="#5-1-5-ServerHelloDone" class="headerlink" title="5.1.5 ServerHelloDone"></a>5.1.5 ServerHelloDone</h4><p>表明服务器已经将所有预计的握手消息发送完毕。在此之后，服务器会等待客户端发送消息。</p><h4 id="5-1-6-verify-certificate"><a href="#5-1-6-verify-certificate" class="headerlink" title="5.1.6 verify certificate"></a>5.1.6 verify certificate</h4><p>客户端验证证书的合法性，如果验证通过才会进行后续通信，否则根据错误情况不同做出提示和操作，合法性验证内容包括如下:</p><ul><li>证书链的可信性 trusted certificate path;</li><li>证书是否吊销 revocation，有两类方式 - 离线 CRL 与在线 OCSP，不同的客户端行为会不同;</li><li>有效期 expiry date，证书是否在有效时间范围;</li><li>域名 domain，核查证书域名是否与当前的访问域名匹配;</li></ul><p>由 <a href="pki.md">PKI</a> 章节的内容可知，对端发来的证书签名是 CA 私钥加密的，接收到证书后，先读取证书中的相关的明文信息，采用相同的散列函数计算得到信息摘要，然后利用对应 CA 的公钥解密签名数据，对比证书的信息摘要，如果一致，则可以确认证书的合法性；然后去查询证书的吊销情况等</p><h4 id="5-1-7-ClientKeyExchange"><a href="#5-1-7-ClientKeyExchange" class="headerlink" title="5.1.7 ClientKeyExchange"></a>5.1.7 ClientKeyExchange</h4><p>合法性验证通过之后，客户端计算产生随机数字的预主密钥（Pre-master），并用证书公钥加密，发送给服务器并携带客户端为密钥交换提供的所有信息。这个消息受协商的密码套件的影响，内容随着不同的协商密码套件而不同。</p><p>此时客户端已经获取全部的计算协商密钥需要的信息: 两个明文随机数 random_C 和 random_S 与自己计算产生的 Pre-master，然后得到协商密钥(用于之后的消息加密)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enc_key = PRF(Pre_master, &quot;master secret&quot;, random_C + random_S)</span><br></pre></td></tr></table></figure><p><img src="/images/http/wireshark-clientkeychange.png" alt="image"></p><p>图中使用的是 ECDHE 算法，ClientKeyExchange 传递的是 DH 算法的客户端参数，如果使用的是 RSA 算法则此处应该传递加密的预主密钥</p><h4 id="5-1-8-ChangeCipherSpec"><a href="#5-1-8-ChangeCipherSpec" class="headerlink" title="5.1.8 ChangeCipherSpec"></a>5.1.8 ChangeCipherSpec</h4><p>通知服务器后续的通信都采用协商的通信密钥和加密算法进行加密通信</p><blockquote><p>注意<br>ChangeCipherSpec 不属于握手消息，它是另一种协议，只有一条消息，作为它的子协议进行实现。</p></blockquote><h4 id="5-1-9-Finished-Encrypted-Handshake-Message"><a href="#5-1-9-Finished-Encrypted-Handshake-Message" class="headerlink" title="5.1.9 Finished (Encrypted Handshake Message)"></a>5.1.9 Finished (Encrypted Handshake Message)</h4><p>Finished 消息意味着握手已经完成。消息内容将加密，以便双方可以安全地交换验证整个握手完整性所需的数据。</p><p>这个消息包含 verify_data 字段，它的值是握手过程中所有消息的散列值。这些消息在连接两端都按照各自所见的顺序排列，并以协商得到的主密钥 (enc_key) 计算散列。这个过程是通过一个伪随机函数（pseudorandom function，PRF）来完成的，这个函数可以生成任意数量的伪随机数据。<br>两端的计算方法一致，但会使用不同的标签（finished_label）：客户端使用 client finished，而服务器则使用 server finished。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">verify_data = PRF(master_secret, finished_label, Hash(handshake_messages))</span><br></pre></td></tr></table></figure><p>因为 Finished 消息是加密的，并且它们的完整性由协商 MAC 算法保证，所以主动网络攻击者不能改变握手消息并对 vertify_data 的值造假。在 TLS 1.2 版本中，Finished 消息的长度默认是 12 字节（96 位），并且允许密码套件使用更长的长度。在此之前的版本，除了 SSL 3 使用 36 字节的定长消息，其他版本都使用 12 字节的定长消息。</p><h4 id="5-1-10-Server"><a href="#5-1-10-Server" class="headerlink" title="5.1.10 Server"></a>5.1.10 Server</h4><p>服务器用私钥解密加密的 Pre-master 数据，基于之前交换的两个明文随机数 random_C 和 random_S，同样计算得到协商密钥: <code>enc_key = PRF(Pre_master, &quot;master secret&quot;, random_C + random_S)</code>;</p><p>同样计算之前所有收发信息的 hash 值，然后用协商密钥解密客户端发送的 verify_data_C，验证消息正确性;</p><h4 id="5-1-11-change-cipher-spec"><a href="#5-1-11-change-cipher-spec" class="headerlink" title="5.1.11 change_cipher_spec"></a>5.1.11 change_cipher_spec</h4><p><img src="/images/http/wireshark-serverchangecipher.png" alt="image"></p><p>服务端验证通过之后，服务器同样发送 change_cipher_spec 以告知客户端后续的通信都采用协商的密钥与算法进行加密通信（图中多了一步 New Session Ticket，此为会话票证，会在会话恢复中解释）;</p><h4 id="5-1-12-Finished-Encrypted-Handshake-Message"><a href="#5-1-12-Finished-Encrypted-Handshake-Message" class="headerlink" title="5.1.12 Finished (Encrypted Handshake Message)"></a>5.1.12 Finished (Encrypted Handshake Message)</h4><p>服务器也结合所有当前的通信参数信息生成一段数据 (verify_data_S) 并采用协商密钥 session secret (enc_key) 与算法加密并发送到客户端;</p><h4 id="5-1-13-握手结束"><a href="#5-1-13-握手结束" class="headerlink" title="5.1.13 握手结束"></a>5.1.13 握手结束</h4><p>客户端计算所有接收信息的 hash 值，并采用协商密钥解密 verify_data_S，验证服务器发送的数据和密钥，验证通过则握手完成;</p><h4 id="5-1-14-加密通信"><a href="#5-1-14-加密通信" class="headerlink" title="5.1.14 加密通信"></a>5.1.14 加密通信</h4><p>开始使用协商密钥与算法进行加密通信。</p><p><img src="/images/http/wireshark-applicationdata.png" alt="image"></p><h3 id="5-2-密钥交换和签名算法"><a href="#5-2-密钥交换和签名算法" class="headerlink" title="5.2 密钥交换和签名算法"></a>5.2 密钥交换和签名算法</h3><h4 id="常用的密钥交换和签名算法"><a href="#常用的密钥交换和签名算法" class="headerlink" title="常用的密钥交换和签名算法"></a>常用的密钥交换和签名算法</h4><p>HTTPS 通过 TLS 层和证书机制提供了内容加密、身份认证和数据完整性三大功能。加密过程中，需要用到非对称密钥交换和对称内容加密两大算法。</p><p>对称内容加密强度非常高，加解密速度也很快，只是无法安全地生成和保管密钥。在 TLS 协议中，最后的应用数据都是经过对称加密后传输的，传输中所使用的对称协商密钥(上文中的 enc_key)，则是在握手阶段通过非对称密钥交换而来。常见的 AES-GCM、ChaCha20-Poly1305，都是对称加密算法。</p><p>非对称密钥交换能在不安全的数据通道中，产生只有通信双方才知道的对称加密密钥。目前最常用的密钥交换算法有 RSA 和 ECDHE。</p><p>RSA 历史悠久，支持度好，但不支持 <a href="https://zh.wikipedia.org/wiki/%E5%89%8D%E5%90%91%E5%AE%89%E5%85%A8%E6%80%A7" target="_blank" rel="noopener">完美前向安全 - PFS(Perfect Forward Secrecy)</a>；而 ECDHE 是使用了 ECC（椭圆曲线）的 DH（Diffie-Hellman）算法，计算速度快，且支持 PFS。</p><p>在 <a href="pki.md">PKI</a> 一节中说明了仅有非对称密钥交换还是无法抵御 MITM 攻击的，所以需要引入了 PKI 体系的证书来进行身份验证，其中服务端非对称加密产生的公钥会放在证书中传给客户端。</p><p>在 RSA 密钥交换中，浏览器使用证书提供的 RSA 公钥加密相关信息，如果服务端能解密，意味着服务端拥有与公钥对应的私钥，同时也能算出对称加密所需密钥。密钥交换和服务端认证合并在一起。</p><p>在 ECDH 密钥交换中，服务端使用私钥 (RSA 或 ECDSA) 对相关信息进行签名，如果浏览器能用证书公钥验证签名，就说明服务端确实拥有对应私钥，从而完成了服务端认证。密钥交换则是各自发送 DH 参数完成的，密钥交换和服务端认证是完全分开的。</p><p>可用于 ECDHE 数字签名的算法主要有 <a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">RSA</a> 和 <a href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm" target="_blank" rel="noopener">ECDSA - 椭圆曲线数字签名算法</a>，也就是目前密钥交换 + 签名有三种主流选择:</p><ul><li><code>RSA</code> - RSA 密钥交换（无需签名）</li><li><code>ECDHE_RSA</code> - ECDHE 密钥交换、RSA 签名</li><li><code>ECDHE_ECDSA</code> - ECDHE 密钥交换、ECDSA 签名</li></ul><p><img src="/images/http/signatureAlgorithm.png" alt="image"></p><p>比如我的网站使用的加密套件是 ECDHE_RSA，可以看到数字签名算法是 sha256 哈希加 RSA 加密，在 <a href="pki.md">PKI</a> 一节中讲了签名是服务器信息摘要的哈希值加密生成的</p><p>内置 ECDSA 公钥的证书一般被称之为 ECC 证书，内置 RSA 公钥的证书就是 RSA 证书。因为 256 位 ECC Key 在安全性上等同于 3072 位 RSA Key，所以 ECC 证书体积比 RSA 证书小，而且 ECC 运算速度更快，ECDHE 密钥交换 + ECDSA 数字签名是目前最好的加密套件</p><p>以上内容来自本文: <a href="https://imququ.com/post/ecc-certificate.html" target="_blank" rel="noopener">开始使用 ECC 证书</a></p><p>关于 ECC 证书的更多细节可见文档: <a href="https://www.rfc-editor.org/rfc/rfc4492.txt" target="_blank" rel="noopener">ECC Cipher Suites for TLS - RFC4492</a></p><h4 id="RSA-密钥交换和-DH-密钥交换的区别"><a href="#RSA-密钥交换和-DH-密钥交换的区别" class="headerlink" title="RSA 密钥交换和 DH 密钥交换的区别"></a>RSA 密钥交换和 DH 密钥交换的区别</h4><p>使用 RSA 进行密钥交换的握手过程与前面说明的基本一致，只是没有 ServerKeyExchange 消息，其中协商密钥涉及到三个参数 (客户端随机数 random_C、服务端随机数 random_S、预主密钥 Premaster secret)，<br>其中前两个随机数和协商使用的算法是明文的很容易获取，最后一个 Premaster secret 会用服务器提供的公钥加密后传输给服务器 (密钥交换)，如果这个预主密钥被截取并破解则协商密钥也可以被破解。</p><p>RSA 算法的细节见: <a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">wiki</a> 和 <a href="http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html" target="_blank" rel="noopener">RSA算法原理（二）- 阮一峰</a></p><p>RSA 的算法核心思想是利用了极大整数 <a href="https://zh.wikipedia.org/wiki/%E6%95%B4%E6%95%B0%E5%88%86%E8%A7%A3" target="_blank" rel="noopener">因数分解</a> 的计算复杂性</p><p>而使用 <a href="https://zh.wikipedia.org/wiki/%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E5%AF%86%E9%91%B0%E4%BA%A4%E6%8F%9B" target="_blank" rel="noopener">DH(Diffie-Hellman) 算法</a> 进行密钥交换，双方只要交换各自的 DH 参数(在 ServerKeyExchange 发送 Server params，在 ClientKeyExchange 发送 Client params)，不需要传递 Premaster secret，就可以各自算出这个预主密钥</p><p>DH 的握手过程如下，大致过程与 RSA 类似，图中只表达如何生成预主密钥:</p><p><img src="/images/http/DH-handshake.png" alt="image"></p><p>服务器通过私钥将客户端随机数 random_C，服务端随机数 random_S，服务端 DH 参数 Server params 签名生成 signature，然后在 ServerKeyExchange 消息中发送服务端 DH 参数和该签名；</p><p>客户端收到后用服务器给的公钥解密验证签名，并在 ClientKeyExchange 消息中发送客户端 DH 参数 Client params；</p><p>服务端收到后，双方都有这两个参数，再各自使用这两个参数生成预主密钥 Premaster secret，之后的协商密钥等步骤与 RSA 基本一致。</p><blockquote><p>基于 RSA 算法与 DH 算法的握手最大的区别就在于密钥交换与身份认证。前者客户端使用公钥加密预主密钥并发送给服务端完成密钥交换，服务端利用私钥解密完成身份认证。后者利用各自发送的 DH 参数完成密钥交换，服务器私钥签名数据，客户端公钥验签完成身份认证。</p></blockquote><p>关于 DH 算法如何生成预主密钥，推荐看下 <a href="https://zh.wikipedia.org/wiki/%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E5%AF%86%E9%91%B0%E4%BA%A4%E6%8F%9B#%E6%8F%8F%E8%BF%B0" target="_blank" rel="noopener">Wiki</a> 和 <a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/#ephemeraldiffiehellmanhandshake" target="_blank" rel="noopener">Ephemeral Diffie-Hellman handshake</a></p><p>其核心思想是利用了 <a href="https://en.wikipedia.org/wiki/Discrete_logarithm" target="_blank" rel="noopener">离散对数问题</a> 的计算复杂性</p><blockquote><p>原根：假设一个整数 g 对于质数 P 来说是原根，那么 g^i mod P (1 ≦ i &lt; P) 的结果各不相同，且其结果按一定顺序排列后是 1 到 P-1 的所有整数，<a href="https://zh.wikipedia.org/wiki/%E5%8E%9F%E6%A0%B9#%E4%BE%8B%E5%AD%90" target="_blank" rel="noopener">例子</a></p></blockquote><blockquote><p>离散对数：如果对于一个整数 n 和质数 P 的一个原根 g，可以找到一个唯一的指数 i，使得 n = g^i mod P (0 ≦ i &lt; P)，那么指数 i 称为 n 的以 g 为基数的模 P 的离散对数</p></blockquote><blockquote><p>Diffie-Hellman 算法的有效性依赖于计算离散对数的难度，其含义是：当已知大素数 P 和它的一个原根 g 后，对给定的 n，要计算 i，被认为是很困难的，而给定 i 计算 n 却相对容易</p></blockquote><p>算法过程可以抽象成下图:</p><p><img src="/images/http/Diffie-Hellman.png" alt="image"></p><p>双方预先商定好了一对 P g 值 (公开的)，而 Alice 有一个私密数 a(非公开，对应一个私钥)，Bob 有一个私密数 b(非公开，对应一个私钥)</p><ul><li><p>Alice 计算 A = g^a mod P，并把 A(公开，对应一个公钥) 发给 Bob</p></li><li><p>Bob 计算 B = g^b mod P，并把 B(公开，对应一个公钥) 发给 Alice</p></li><li><p>双方计算出共享密钥，K = B^a mod P = A^b mod P (= g^ab mod P)</p></li></ul><p>对于 Alice 和 Bob 来说通过对方发过来的公钥参数和自己手中的私钥可以得到最终相同的密钥</p><p>而第三方最多知道 P g A B，想得到私钥和最后的密钥很困难，当然前提是 a b P 足够大 (RFC3526 文档中有几个常用的大素数可供使用)，否则暴力破解也有可能试出答案，至于 g 一般取个较小值就可以</p><p>如下几张图是实际 DH 握手发送的内容:</p><p><img src="/images/http/Cipher-suite.png" alt="image"></p><p><img src="/images/http/Server-params.png" alt="image"></p><p><img src="/images/http/Client-params.png" alt="image"></p><p>可以看到双方发给对方的参数中携带了一个公钥值，对应上述的 A 和 B</p><p>而且实际用的加密套件是 <a href="https://zh.wikipedia.org/wiki/%E6%A9%A2%E5%9C%93%E6%9B%B2%E7%B7%9A%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E9%87%91%E9%91%B0%E4%BA%A4%E6%8F%9B" target="_blank" rel="noopener">椭圆曲线 DH 密钥交换 (ECDH)</a>，利用由椭圆曲线加密建立公钥与私钥对可以更进一步加强 DH 的安全性，因为目前解决椭圆曲线离散对数问题要比因式分解困难的多，而且 ECC 使用的密钥长度比 RSA 密钥短得多(目前 RSA 密钥需要 2048 位以上才能保证安全，而 ECC 密钥 256 位就足够)</p><p>关于 <a href="https://zh.wikipedia.org/wiki/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6" target="_blank" rel="noopener">椭圆曲线密码学 - ECC</a>，推荐看下 <a href="https://blog.cloudflare.com/a-relatively-easy-to-understand-primer-on-elliptic-curve-cryptography/" target="_blank" rel="noopener">A Primer on Elliptic Curve Cryptography - 原文</a> - <a href="https://zhuanlan.zhihu.com/p/26029199" target="_blank" rel="noopener">译文</a></p><h3 id="5-3-客户端身份验证"><a href="#5-3-客户端身份验证" class="headerlink" title="5.3 客户端身份验证"></a>5.3 客户端身份验证</h3><p>尽管可以选择对任意一端进行身份验证，但人们几乎都启用了对服务器的身份验证。如果服 务器选择的套件不是匿名的，那么就需要在 Certificate 消息中跟上自己的证书。</p><p><img src="/images/http/mutualAuthentication.png" alt="image"></p><p>相比之下，服务器通过发送 CertificateRequest 消息请求对客户端进行身份验证。消息中列 出所有可接受的客户端证书。作为响应，客户端发送自己的 Certificate 消息（使用与服务器发 送证书相同的格式），并附上证书。此后，客户端发送 CertificateVerify 消息，证明自己拥有对应的私钥。</p><p>只有已经过身份验证的服务器才被允许请求客户端身份验证。基于这个原因，这个选项也被称为相互身份验证（mutual authentication）。</p><h4 id="5-3-1-CertificateRequest"><a href="#5-3-1-CertificateRequest" class="headerlink" title="5.3.1 CertificateRequest"></a>5.3.1 CertificateRequest</h4><p>在 ServerHello 的过程中发出，请求对客户端进行身份验证，并将其接受的证书的公钥 和签名算法传送给客户端。</p><p>它也可以选择发送一份自己接受的证书颁发机构列表，这些机构都用其可分辨名称来表示:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">  ClientCertificateType certificate_types;</span><br><span class="line">  SignatureAndHashAlgorithm supported_signature_algorithms;</span><br><span class="line">  DistinguishedName certificate_authorities;</span><br><span class="line">&#125; CertificateRequest;</span><br></pre></td></tr></table></figure><p></p><h4 id="5-3-2-CertificateVerify"><a href="#5-3-2-CertificateVerify" class="headerlink" title="5.3.2 CertificateVerify"></a>5.3.2 CertificateVerify</h4><p>在 ClientKeyExchange 的过程中发出，证明自己拥有的私钥与之前发送的客户端证书中的公钥匹配。消息中包含一条到这一步为止的所有握手消息的签名：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struct &#123;</span><br><span class="line">  Signature handshake_messages_signature;</span><br><span class="line">&#125; CertificateVerify;</span><br></pre></td></tr></table></figure><p></p><h3 id="5-4-会话恢复"><a href="#5-4-会话恢复" class="headerlink" title="5.4 会话恢复"></a>5.4 会话恢复</h3><p>最初的会话恢复机制是，在一次完整协商的连接断开时，客户端和服务器都会将会话的安全参数保存一段时间。希望使用会话恢复的服务器为会话指定唯一的标识，称为会话 ID(Session ID)。服务器在 ServerHello 消息中将会话 ID 发回客户端。</p><p>希望恢复早先会话的客户端将适当的 Session ID 放入 ClientHello 消息，然后提交。服务器如果同意恢复会话，就将相同的 Session ID 放入 ServerHello 消息返回，接着使用之前协商的主密钥生成一套新的密钥，再切换到加密模式，发送 Finished 消息。<br>客户端收到会话已恢复的消息以后，也进行相同的操作。这样的结果是握手只需要一次网络往返。</p><p>Session ID 由服务器端支持，协议中的标准字段，因此基本所有服务器都支持，服务器端保存会话 ID 以及协商的通信信息，占用服务器资源较多。</p><p><img src="/images/http/simple-handshake.png" alt="image"></p><p>用来替代服务器会话缓存和恢复的方案是使用会话票证（Session ticket）。使用这种方式，除了所有的状态都保存在客户端（与 HTTP Cookie 的原理类似）之外，其消息流与服务器会话缓存是一样的。</p><p>其思想是服务器取出它的所有会话数据（状态）并进行加密 (密钥只有服务器知道)，再以票证的方式发回客户端。在接下来的连接中，客户端恢复会话时在 <strong>ClientHello 的扩展字段</strong> session_ticket 中携带加密信息将票证提交回服务器，由服务器检查票证的完整性，解密其内容，再使用其中的信息恢复会话。</p><p>这种方法有可能使扩展服务器集群更为简单，因为如果不使用这种方式，就需要在服务集群的各个节点之间同步会话。<br>Session ticket 需要服务器和客户端都支持，属于一个扩展字段，占用服务器资源很少。</p><blockquote><p>警告<br>会话票证破坏了 TLS 安全模型。它使用票证密钥加密的会话状态并将其暴露在线路上。有些实现中的票证密钥可能会比连接使用的密码要弱。如果票证密钥被暴露，就可以解密连接上的全部数据。因此，使用会话票证时，票证密钥需要频繁轮换。</p></blockquote><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.ietf.org/rfc/rfc2246.txt" target="_blank" rel="noopener">RFC 2246 - The TLS Protocol Version 1.0</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE%E5%8D%8F%E5%95%86" target="_blank" rel="noopener">NPN/ALPN - wiki</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A" target="_blank" rel="noopener">TLS - wiki</a></li><li><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc785811(v=ws.10" target="_blank" rel="noopener">SSL/TLS in detail</a>)</li><li><a href="https://www.wosign.com/faq/faq2016-0309-02.htm" target="_blank" rel="noopener">HTTPS 加密协议详解</a></li><li><a href="https://blog.cloudflare.com/keyless-ssl-the-nitty-gritty-technical-details/#rsahandshake" target="_blank" rel="noopener">Keyless SSL: The Nitty Gritty Technical Details</a></li><li><a href="https://en.wikipedia.org/wiki/Digital_Signature_Algorithm" target="_blank" rel="noopener">DSA - 数字签名算法</a></li><li>《HTTPS 权威指南 - 在服务器和 web 应用上部署 SSL/TLS 和 PKI》</li></ul>]]></content>
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http 扩展阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>http 报文</title>
      <link href="/2018/03-http-message.html"/>
      <url>/2018/03-http-message.html</url>
      <content type="html"><![CDATA[<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html" target="_blank" rel="noopener">RFC2616</a> 中定义的 HTTP Request 消息体结构：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Request = Request-Line             // 请求行</span><br><span class="line">          *(( general-header       // 通用首部</span><br><span class="line">            | request-header       // 请求首部</span><br><span class="line">            | entity-header )CRLF) // 实体首部</span><br><span class="line">          CRLF</span><br><span class="line">          [ message-body ]</span><br></pre></td></tr></table></figure><p></p><p><img src="/images/http/request.png" alt="image"></p><p>一个 HTTP 的 request 消息以一个请求行开始，从第二行开始是 headers (️每个键值对都以 CRLF 结尾)，接下来是一个 CRLF 开头的空行，表示 header 结束，最后是消息主体。</p><h3 id="请求行的定义如下"><a href="#请求行的定义如下" class="headerlink" title="请求行的定义如下:"></a>请求行的定义如下:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request-Line = Method SP Request-URI SP HTTP-Version CRLF</span><br><span class="line"></span><br><span class="line">Method = &quot;OPTIONS&quot; | &quot;GET&quot; | &quot;HEAD&quot; | &quot;POST&quot; | &quot;PUT&quot; | &quot;DELETE&quot; | &quot;TRACE&quot; | &quot;CONNECT&quot; | extension-method</span><br><span class="line"></span><br><span class="line">Request-URI = &quot;*&quot; | absoluteURI | abs_path | authotity（CONNECT）</span><br></pre></td></tr></table></figure><h3 id="请求方法（也叫请求动作）"><a href="#请求方法（也叫请求动作）" class="headerlink" title="请求方法（也叫请求动作）"></a>请求方法（也叫请求动作）</h3><ul><li>GET 请求会显示请求指定的资源。一般来说 GET 方法应该只用于数据的读取，而不应当用于会产生副作用的非幂等的操作中。GET 会方法请求指定的页面信息，并返回响应主体，GET 被认为是不安全的方法，因为 GET 方法会被网络蜘蛛等任意的访问。</li><li>HEAD 方法与 GET 方法一样，都是向服务器发出指定资源的请求。但是，服务器在响应 HEAD 请求时不会回传资源的内容部分，即：响应主体。这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。HEAD 方法常被用于客户端查看服务器的性能。</li><li>POST 请求会向指定资源提交数据，请求服务器进行处理，如：表单数据提交、文件上传等，请求数据会被包含在请求体中。POST 方法是非幂等的方法，因为这个请求可能会创建新的资源或 / 和修改现有资源。</li><li>PUT 请求会身向指定资源位置上传其最新内容，PUT 方法是幂等的方法。通过该方法客户端可以将指定资源的最新数据传送给服务器取代指定的资源的内容。</li><li>DELETE 请求用于请求服务器删除所请求 URI 所标识的资源。DELETE 请求后指定资源会被删除，DELETE 方法也是幂等的。</li><li>CONNECT 方法是 HTTP/1.1 协议预留的，代表使用隧道协议 (Tunneling Protocol) 进行连接。通常用于 SSL/TLS 加密服务器的链接与非加密的 HTTP 代理服务器的通信。</li><li>OPTIONS 请求与 HEAD 类似，一般也是用于客户端查看服务器的性能。 这个方法会请求服务器返回该资源所支持的所有 HTTP 请求方法，该方法会用 ‘*’ 来代替资源名称，向服务器发送 OPTIONS 请求，可以测试服务器功能是否正常。JavaScript 的 XMLHttpRequest 对象进行 CORS 跨域资源共享时，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。</li><li>TRACE 请求服务器回显其收到的请求信息，该方法主要用于 HTTP 请求的测试或诊断。</li></ul><h3 id="请求地址"><a href="#请求地址" class="headerlink" title="请求地址"></a>请求地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Request-URI = &quot;*&quot; | absoluteURI | abs_path | authority（CONNECT）</span><br></pre></td></tr></table></figure><ul><li>“*“ 代表请求不指向特定的资源，而是服务器本身，且只在所使用的方法没必要应用到资源时允许。一个典型的例子是 <code>OPTIONS * HTTP/1.1</code></li><li>absoluteURI 绝对地址，比如 <code>GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1</code>。只用于向代理服务器 (proxy) 发送请求</li><li>abs_path 相对路径，“/” 代表服务器根</li><li>只有 CONNECT 方法使用 authority 形式，由域名和可选端口组成的 URL，比如 <code>CONNECT developer.mozilla.org:80 HTTP/1.1</code></li></ul><blockquote><p>向一个代理服务器发送 HTTP 请求时，请求行中应该使用绝对路径的 URL。如果向目标服务器直接发送请求，则请求行中只会包含相对路径的 URL(完整 URL 的 path 部分)。<br>为了能在后续 http 版本中过渡，所有 http/1.1 服务器都应该能够处理 absoluteURI 形式的请求，即使客户端只会向代理发送这种形式的请求，详见 <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2" target="_blank" rel="noopener">https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2</a></p></blockquote><p>HTTP/1.1 中 Host 和 Request-URI 一起作为 Request 消息接收者判断请求资源的条件, 确认主机资源的方法如下：</p><ul><li><p>如果 Request-URI 是绝对地址（absoluteURI），这时请求里的主机存在于 Request-URI 里。忽略任何出现在请求里 Host 头域值</p></li><li><p>假如 Request-URI 不是绝对地址（absoluteURI），并且请求包括一个 Host 头域，则主机由该 Host 头域值决定</p></li><li><p>假如由规则１或规则２定义的主机是一个无效的主机，则应当以一个 400（错误请求）错误消息返回</p></li></ul><blockquote><p>⚠️ HTTP/1.1 请求必须带 Host 头域，否则会报 bad request;</p></blockquote><blockquote><p>HTTP/1.0 不支持 Host 头域，因为 1.0 认为一个 ip 只绑定一个主机，通过 ip 就能确认主机，但后来一台服务器可以存在多个虚拟主机 (virtual host) 共用一个 ip 的情况，所以 1.1 添加 Host 头域显示指定主机。</p></blockquote><h3 id="URI-统一资源标识符，Uniform-Resource-Identifier"><a href="#URI-统一资源标识符，Uniform-Resource-Identifier" class="headerlink" title="URI(统一资源标识符，Uniform Resource Identifier)"></a>URI(统一资源标识符，Uniform Resource Identifier)</h3><p>URI 就是由某个协议方案表示的资源的定位标识符，这个协议可以使 htpp、https、ftp 等，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ftp://ftp.is.co.za/rfc/rfc1808.txt</span><br><span class="line">http://www.ietf.org/rfc/rfc2396.txt</span><br><span class="line">ldap://[2001:db8::7]/c=GB?objectClass?one</span><br><span class="line">mailto:John.Doe@example.com</span><br><span class="line">news:comp.infosystems.www.servers.unix</span><br><span class="line">tel:+1-816-555-1212 telnet://192.0.2.16:80/</span><br><span class="line">urn:oasis:names:specification:docbook:dtd:xml:4.1.2</span><br></pre></td></tr></table></figure><p></p><p>绝对 URI 的格式应该是这样的:</p><hr><p><u>http</u>://<u>user:pass</u>@<u><a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a></u>:<u>80</u>/<u>dir/index.html</u>?<u>uid=1</u>#<u>ch1</u></p><p>协议:// 登录信息 @服务器地址: 端口号 / 文件路径? 查询字符串#片段标识符</p><hr><blockquote><p>与 URL(统一资源定位符，Universal Resource Locator) 和 URN(统一资源名，Uniform Resource Name) 的关系：</p></blockquote><blockquote><blockquote><p>URL 和 URN 是 URI 的两个子集，URI 唯一标识了文件资源对象 (类似身份证)，URN 标识资源名称，URL 标识资源地址</p></blockquote></blockquote><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Response = Status-Line             // 状态行</span><br><span class="line">           *(( general-header      // 通用首部</span><br><span class="line">            | response-header      // 响应首部</span><br><span class="line">            | entity-header )CRLF) // 实体首部</span><br><span class="line">           CRLF</span><br><span class="line">           [ message-body ]</span><br></pre></td></tr></table></figure><p><img src="/images/http/response.png" alt="image"></p><p>response 第一行是状态行，包含状态码 Status-Code，Reason-Phrase 是状态码的简单文本描述 (比如 200 - OK、404 - Not Found)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF</span><br></pre></td></tr></table></figure><p>Status-Code:</p><ul><li>1xx: 信息性——收到请求，继续处理</li><li>2xx: 成功性——成功收到、理解并接受行动</li><li>3xx: 重定向——必须采取进一步行动来完成请求</li><li>4xx: 客户端错误——请求包含错误语法或不能完成</li><li>5xx: 服务器错误——服务器没有成功完成显然有效的请求</li></ul><h2 id="消息体"><a href="#消息体" class="headerlink" title="消息体"></a>消息体</h2><p>HTTP 消息的 message-body（如果存在）用于挟带与请求或响应相关联的 entity-body.<br>message-body 只有在应用了 transfer-coding 时，通过 Transfer-Encoding 头部域指出，与 entity-body 不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message-body = entity-body | &lt;entity-body encoded as per Transfer-Encoding&gt;</span><br></pre></td></tr></table></figure><h2 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h2><p>这里只列举了 2616 中提到的头部域，还有很多新添加的头部域，可以自行查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">general-header = Cache-Control      // 控制缓存的行为，比如 `private, max-age=0, no-cache`</span><br><span class="line">                | Connection        // 控制不再转发给代理的首部字段或者管理持久连接 (Keep-Alive 或者 close)</span><br><span class="line">                | Date              // 表明创建 HTTP 报文的日期和时间</span><br><span class="line">                | Pragma            // 唯一字段 `no-cache`，用于兼容 HTTP/1.1 之前的版本，客户端会要求所有的中间服务器不返回缓存的资源</span><br><span class="line">                | Trailer           // 事先说明在报文主体后记录了哪些首部字段。该首部字段可应用在 HTTP/1.1 版本分块传输编码</span><br><span class="line">                | Transfer-Encoding // 规定了传输报文主体时采用的编码方式，比如 `chunked`</span><br><span class="line">                | Upgrade           // 检测 HTTP 协议及其他协议是否可使用更高的 版本进行通信，其参数值可以用来指定一个完全不同的通信协议，使用首部字段 Upgrade 时，还需要额外指定 Connection:Upgrade</span><br><span class="line">                | Via               // 追踪客户端与服务器之间的请求和响应报文 的传输路径</span><br><span class="line">                | Warning           // 从 HTTP/1.0 的响应首部（Retry-After）演变过来的。该首部通常会告知用户一些与缓存相关的问题的警告，字段格式:`[警告码][警告的主机: 端口号]“[警告内容]”([日期时间])`</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">request-header = Accept               // 通知服务器，用户代理能够处理的媒体类型及媒体类型的相对优先级（可用权重 q=0~1 来表示相对优先级）。可使用 type/subtype 这种形式，一次指定多种媒体类型，支持通配符。例如 `text/html, text/plain, text/css, image/jpeg, video/mpeg, application/zip` 等</span><br><span class="line">                | Accept-Charset      // 通知服务器用户代理支持的字符集及字符集的相对优先顺序，可一次性指定多种字符集</span><br><span class="line">                | Accept-Encoding     // 告知服务器用户代理支持的内容编码及内容编码的优先级顺序。可一次性指定多种内容编码，例如: `gzip, compress, deflate, identity`</span><br><span class="line">                | Accept-Language     // 告知服务器用户代理能够处理的自然语言集及优先级顺序，例如: `zh-cn,zh;q=0.7,en-us,en;q=0.3` 优先返回中文版响应</span><br><span class="line">                | Authorization       // 告知服务器，用户代理的认证信息（证书值），例如: `Basic dWVub3NlbjpwYXNzd29yZA==`</span><br><span class="line">                | Expect              // 告知服务器，客户端期望出现的某种特定行为。因服务器无法理解客户端的期望作出回应而发生错误时，会返回状态码 417 Expectation Failed。</span><br><span class="line">                | From                // 告知服务器使用用户代理的用户的电子邮件地址</span><br><span class="line">                | Host                // Host 会告知服务器，请求的资源所处的互联网主机名和端口号</span><br><span class="line">                | If-Match            // 只有当 If-Match 的字段值跟资源的 ETag 值匹配一致时，服务器才会接受请求，否则返回状态码 412 Precondition Failed</span><br><span class="line">                | If-Modified-Since   // If-Modified-Since 字段指定的日期时间后，资源发生了更新，服务器才会接受请求，否则返回状态码 304 Not Modified</span><br><span class="line">                | If-None-Match       // If-None-Match 的字段值与 ETag 值不一致时，可处理该请求。与 If-Match 首部字段的作用相反</span><br><span class="line">                | If-Range            // 告知服务器若指定的 If-Range 字段值（ETag 值或者时间）和请求资源的 ETag 值或时间相一致时，则作为范围请求处理。反之，则返回全体资源。</span><br><span class="line">                | If-Unmodified-Since // 与 If-Modified-Since 的作用相反</span><br><span class="line">                | Max-Forwards        // 通过 TRACE 方法或 OPTIONS 方法，发送包含首部字段 Max-Forwards 的请求时，该字段以十进制整数形式指定可经过的服务器最大数目，服务器转发请求之前，Max-Forwards 的值减 1 后重新赋值。当服务器接收到 Max-Forwards 值为 0 的请求时，则不再进行转发，直接返回响应。</span><br><span class="line">                | Proxy-Authorization // 接收到从代理服务器发来的认证质询时，客户端会发送包含首部字段 Proxy-Authorization 的请求，以告知服务器认证所需要的信息。</span><br><span class="line">                | Range               // 对于只需获取部分资源的范围请求，包含首部字段 Range 即可告知服 务器资源的指定范围。例如: `bytes=5001-10000` 表示请求获取从第 5001 字节至第 10000 字节的资源。服务器会在处理请求之后返回 206 Partial Content 的响应。无法处理该范围请求时，则返回 200 OK 的响应及全部资源。</span><br><span class="line">                | Referer             // 告知服务器请求的原始资源的 URI。</span><br><span class="line">                | TE                  // 告知服务器客户端能够处理响应的传输编码方式及相对优先级。它和首部字段 Accept-Encoding 的功能很相像，但是用于传输编码。</span><br><span class="line">                | User-Agent          // 将创建请求的浏览器和用户代理名称等信息传达给服务器</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">response-header = Accept-Ranges      // 告知客户端服务器是否能处理范围请求，以指定获取服务器端某个部分的资源。可处理范围请求时指定其为 bytes，反之则指定其为 none。</span><br><span class="line">                | Age                // 告知客户端，源服务器在多久前创建了响应。字段值的单位为秒。若创建该响应的服务器是缓存服务器，Age 值是指缓存后的响应再次发起认证到认证完成的时间值。代理创建响应时必须加上首部字段 Age。</span><br><span class="line">                | ETag               // 告知客户端实体标签 (Entity Tag)。它是一种可将资源以字符串形式做唯一性标识的方式。服务器会为每份资源分配对应的 ETag 值。有强弱之分，弱 Etag 以 &apos;w/&apos; 开头。</span><br><span class="line">                | Location           // 将响应接收方引导至某个与请求 URI 位置不同的资源。该字段会配合 3xx ：Redirection 的响应，提供重定向的 URI。</span><br><span class="line">                | Proxy-Authenticate // 由代理服务器所要求的认证信息发送给客户端。</span><br><span class="line">                | Retry-After        // 告知客户端应该在多久之后再次发送请求。主要配合状态码 503 Service Unavailable 响应，或 3xx Redirect 响应一起使用。字段值可以指定为具体的日期时间（Wed, 04 Jul 2012 06：34：24 GMT 等格式），也可以是创建响应后的秒数</span><br><span class="line">                | Server             // 告知客户端当前服务器上安装的 HTTP 服务器应用程序的信息。例如: `Apache/2.2.6 (Unix) PHP/5.2.5`</span><br><span class="line">                | Vary               // 可对缓存进行控制。源服务器会向代理服务器传达关于本地缓存使用方法的命令。</span><br><span class="line">                | WWW-Authenticate   // WWW-Authenticate 用于 HTTP 访问认证。它会告知客户端适用于访问请求 URI 所指定资源的认证方案（Basic 或是 Digest）和带参数提示的质询（challenge）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">entity-header = Allow              // 服务端通知客户端能够支持 Request-URI 指定资源的所有 HTTP 方法。当服务器接收到不支持的 HTTP 方法时，会以状态码 405 Method Not Allowed 作为响应返回。与此同时，还会把所有能支持的 HTTP 方法写入首部字段 Allow 后返回</span><br><span class="line">                | Content-Encoding // 告知客户端服务器对实体的主体部分选用的内容编码方式，字段值参见 Accept-Encoding</span><br><span class="line">                | Content-Language // 会告知客户端，实体主体使用的自然语言，例如: `zh-CN`</span><br><span class="line">                | Content-Length   // 表明了实体主体部分的大小（单位是字节）。对实体主体进行内容编码传输时，不能再使用 Content-Length 首部字段</span><br><span class="line">                | Content-Location // 给出与报文主体部分相对应的 URI。和首部字段 Location 不同，Content-Location 表示的是报文主体返回资源对应的 URI。</span><br><span class="line">                | Content-MD5      // 客户端会对接收的报文主体执行相同的 MD5 算法，然后与首部字段 Content-MD5 的字段值比较，其目的在于检查报文主体在传输过程中是否保持完整，以及确认传输到达。无法检测出恶意篡改</span><br><span class="line">                | Content-Range    // 能告知客户端作为响应返回的实体的哪个部分符合范围请求。字段值以字节为单位，表示当前发送部分及整个实体大小。例如: `bytes 5001-10000/10000`</span><br><span class="line">                | Content-Type     // 说明了实体主体内对象的媒体类型。和首部字段 Accept 一样，字段值用 type/subtype 形式赋值。例如: `text/html; charset=UTF-8`</span><br><span class="line">                | Expires          // 将资源失效的日期告知客户端。当首部字段 Cache-Control 有指定 max-age 指令时，Cache-Control 优先级大于 Expires</span><br><span class="line">                | Last-Modified    // 指明资源最终修改的时间</span><br><span class="line">                | extension-header // 允许定义额外的 entity-header 域而不改变协议，但不能假设接收方认识这些域。接收方应该忽略未识别的头域，但透明代理必须转发它</span><br></pre></td></tr></table></figure><h3 id="强缓存和协商缓存"><a href="#强缓存和协商缓存" class="headerlink" title="强缓存和协商缓存"></a>强缓存和协商缓存</h3><h4 id="浏览器在加载资源的时，先根据-http-header-判断它是否命中强缓存"><a href="#浏览器在加载资源的时，先根据-http-header-判断它是否命中强缓存" class="headerlink" title="浏览器在加载资源的时，先根据 http header 判断它是否命中强缓存."></a>浏览器在加载资源的时，先根据 http header 判断它是否命中强缓存.</h4><ul><li>命中强缓存：浏览器直接从自己缓存中读取资源，不发送请求到服务器</li><li>不命中强缓存：浏览器发送一个请求到服务器，服务器根据资源携带的 http header 验证该资源是否命中协商缓存<ul><li>命中协商缓存：将请求返回，但不是返回该资源的数据，而是告诉浏览器可以直接从缓存中加载这个资源。</li><li>不命中协商缓存：服务器返回该资源数据</li></ul></li></ul><p><img src="/images/http/Intermediaries.png" alt="image"></p><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><p>-【Cache-Control、Expires】: Expires 指定一个过期的时间戳 (绝对时间)，Cache-Control 指定缓存行为 (比如 max-age=604800 代表有效期为七天，是相对时间)。一般用其中一个，如果两个同时出现，Cache-Control 优先级大于 Expires。</p><blockquote><p>Cache-Control 是 http/1.1 弥补 Expires 缺陷新加入的，增加了很多行为</p></blockquote><table><thead><tr><th>Cache-Control</th><th>description</th></tr></thead><tbody><tr><td>public</td><td>资源将被客户端和代理服务器缓存</td></tr><tr><td>private</td><td>资源仅被客户端缓存, 代理服务器不缓存</td></tr><tr><td>no-store</td><td>请求和响应都不缓存 (真正地不缓存)</td></tr><tr><td>no-cache</td><td>do-not-serve-from-cache-without-revalidation，响应实际上可以缓存在本地缓存区，只是在与原服务器进行新鲜度验证之前不能返回给客户端</td></tr><tr><td>max-age</td><td>缓存资源, 但是在指定时间 (单位为秒) 后缓存过期</td></tr><tr><td>s-maxage</td><td>同上, 依赖 public 设置, 覆盖 max-age, 且只在代理服务器上有效</td></tr><tr><td>max-stale</td><td>指定时间内, 即使缓存过时, 资源依然有效</td></tr><tr><td>min-fresh</td><td>缓存的资源至少要保持指定时间的新鲜期</td></tr><tr><td>must-revalidation / proxy-revalidation</td><td>如果缓存失效, 强制重新向服务器 (或代理) 发起验证 (使用 must-revalidate 指令会忽略请求的 max-stale 指令)</td></tr><tr><td>only-if-cached</td><td>仅仅返回已经缓存的资源, 不访问源服务器, 若无缓存则返回 504 Gateway Timeout</td></tr><tr><td>no-transform</td><td>强制要求代理服务器不要对资源进行转换, 禁止代理服务器对 Content-Encoding, Content-Range, Content-Type 字段的修改 (因此代理的 gzip 压缩将不被允许)</td></tr><tr><td>cache-extension token</td><td>通过 cache-extension 标记（token），可以扩展 Cache-Control 首部字段内的指令，如果缓存服务器不能理解这个新指令，就会直接忽略</td></tr></tbody></table><p><img src="/images/http/StrongCache.png" alt="image"></p><p>在控制台中可以查看读取的是本地缓存还是向服务器拉取的资源:</p><p><img src="/images/http/hit%20cache.png" alt="image"></p><p><img src="/images/http/no%20cache.png" alt="image"></p><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>-【Last-Modified、If-Modified-Since】: If-Modified-Since 就是上次请求返回的 Last-Modified，服务器再次收到资源请求时，根据浏览器传过来 If-Modified-Since 和资源在服务器上的最后修改时间判断资源是否有变化，如果有变化就正常返回资源内容。如果没有变化，就返回 304 Not Modified，不返回资源内容，不更新 Last-Modified。</p><p>-【ETag、If-None-Match】: 浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在 respone 的 header 加上 ETag（服务器根据当前请求的资源生成的一个唯一标识），这个唯一标识是一个字符串，只要资源有变化这个串就不同，服务器再次收到资源请求时，根据资源生成一个新的 ETag 和浏览器传过来 If-None-Match 比较，如果这两个值相同就说明资源没有变化，否则就是有变化；如果没有变化，返回 304 和 ETag 不返回资源；如果有变化，返回资源。ETag 优先级比 Last-Modified 高</p><blockquote><p>⚠️</p><ul><li>在分布式部署的时候，多台机器的 Last-Modified 必须保持一致，否则协商缓存会出问题。</li><li>分布式部署，不同的机器生成的 ETag 都会不一样， 然后协商缓存就会出问题。【如果没有搞定 ETag 一致，就先关闭掉】</li><li>协商缓存需要配合强缓存使用 【不启动强缓存，协商缓存也就不起作用】</li></ul></blockquote><p><img src="/images/http/NegotiateCache.png" alt="image"></p><blockquote><p>另外浏览器的刷新 (F5 / cmd + r) 和强刷 (Ctrl + F5 / shift + cmd +r / option + cmd + r(safari)):<br>普通刷新会使用协商缓存，忽略强缓存；强刷会忽略浏览器所有缓存（并且请求头会携带 Cache-Control:no-cache 和 Pragma:no-cache，用来通知所有中间节点忽略缓存）。<br>只有从地址栏或收藏夹输入网址、点击链接等情况下，浏览器才会使用强缓存。</p></blockquote><h4 id="强校验和弱校验"><a href="#强校验和弱校验" class="headerlink" title="强校验和弱校验"></a>强校验和弱校验</h4><p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.3.3" target="_blank" rel="noopener">https://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.3.3</a></p><p><a href="https://zh.wikipedia.org/wiki/HTTP_ETag" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/HTTP_ETag</a></p><p>ETag 强校验表明资源的两个版本每个字节都是相同，并且请求头（如 Content-Language）也不能有改变。强校验允许缓存，以及字节请求部分响应合并。</p><p>ETag 弱校验表明资源的两个版本只需要语义上保持一致，忽略细微差别比如修改时间等，这意味着，他们是可以互换的，并且缓存的副本也可以被使用。因为不需要资源版本保持字节程度的相同，所以这种 ETag 不适合字节请求。如果 web 服务器要动态的生成响应，这时弱校验 ETag 比较合适。</p><p>比如使用弱验证类型，一个页面与另外一个页面只是在页脚显示的时间上有所不同，或者是展示的广告不相同，那么就会被认为是相同的。但是在使用强验证的情况下，二者是不同的。</p><p>Last-Modified 存在的问题，也是使用 Etag 的原因:</p><ul><li>一些文件也许会周期性的更改，但是他的内容并不改变 (仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新 GET</li><li>有些文档可能被修改了，但所做的修改并不重要，不需要让所有缓存都重装数据 (比如对拼写和注释的修改)</li><li>某些文件修改非常频繁，比如在秒以下的时间内进行修改 (比如实时监控器)，If-Modified-Since 能检查到的粒度是秒级的，对于小于秒级的修改无法判断 (或者说 UNIX 记录 MTIME 只能精确到秒)</li><li>某些服务器不能精确的得到文件的最后修改时间；</li></ul><p>例子:</p><ul><li>强校验</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 05 May 2018 11:28:26 GMT</span><br><span class="line">ETag: &quot;aaa&quot;</span><br><span class="line">Server: nginx/1.12.2</span><br><span class="line">Content-Length: 5</span><br><span class="line">Content-Type: text/html</span><br><span class="line"></span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><p>若添加了内容编码 <code>Content-Encoding: gzip</code> 后，ETag 便会改变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 05 May 2018 11:28:26 GMT</span><br><span class="line">ETag: &quot;bbb&quot;</span><br><span class="line">Server: nginx/1.12.2</span><br><span class="line">Content-Length: 5</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line"></span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><ul><li>弱检验</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 05 May 2018 11:28:26 GMT</span><br><span class="line">ETag: W/&quot;ccc&quot;</span><br><span class="line">Server: nginx/1.12.2</span><br><span class="line">Content-Type: text/css</span><br><span class="line"></span><br><span class="line">.absolute-center &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 50%;</span><br><span class="line">  top: 50%;</span><br><span class="line">  transform: translate(-50%, -50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若 CSS 样式做了 minify，ETag 并不会改变，因为内容并没有发生实际变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sat, 05 May 2018 11:28:26 GMT</span><br><span class="line">ETag: W/&quot;ccc&quot;</span><br><span class="line">Server: nginx/1.12.2</span><br><span class="line">Content-Type: text/css</span><br><span class="line"></span><br><span class="line">.absolute-center&#123;position:absolute;left:50%;top:50%;transform:translate(-50%, -50%)&#125;</span><br></pre></td></tr></table></figure><p>此时客户端发起 <code>If-None-Match</code> 请求，服务端还是会响应 304 Not Modified，客户端继续读取之前未 minify 的缓存</p><h4 id="其他字段"><a href="#其他字段" class="headerlink" title="其他字段"></a>其他字段</h4><ul><li>Age: 告知客户端，源服务器在多久前创建了响应。若创建该响应的服务器是缓存服务器，Age 值是指缓存后的响应已过时间<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Age:2383321</span><br><span class="line">Date:Wed, 08 Mar 2017 16:12:42 GMT</span><br></pre></td></tr></table></figure></li></ul><p>代理服务器在 2017 年 3 月 8 日 16:12:42 时向源服务器发起了对该资源的请求, 目前已缓存了该资源 2383321 秒</p><ul><li>Vary: 从代理服务器接收到源服务器返回包含 Vary 指定项的响应之后，若再要进行缓存，仅对请求中含有相同 Vary 指定首部字段的请求返回缓存。即使对相同资源发起请求，但由于 Vary 指定的首部字段不相同，必须要从源服务器重新获取资源。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vary:Accept-Encoding,User-Agent</span><br></pre></td></tr></table></figure></li></ul><p>代理服务器将针对是否压缩和浏览器类型去缓存资源. 对于同一个 url, 就能针对 PC 和 Mobile 返回不同的缓存内容</p><ul><li>Pragma: <code>Pragma: no-cache</code> 是 http/1.1 之前的遗留版本，作用与 <code>Cache-Control: no-cache</code> 一样</li></ul><h3 id="CDN-缓存"><a href="#CDN-缓存" class="headerlink" title="CDN 缓存"></a>CDN 缓存</h3><p>CDN 的全称是 Content Delivery Network，即内容分发网络。将网站的内容发布到最接近用户的网络 “ 边缘 “ 的节点，使用户可以就近取得所需的内容，提高用户访问网站的响应速度</p><p>CDN 缓存，也叫网关缓存、反向代理缓存。浏览器先向 CDN 网关发起 WEB 请求，网关服务器后面对应着一台或多台负载均衡源服务器，会根据它们的负载请求，动态地请求转发到合适的源服务器上<br>当客户端向 CDN 节点请求数据时，CDN 节点会判断缓存数据是否过期，若缓存数据并没有过期，则直接将缓存数据返回给客户端；否则，CDN 节点就会向源站发出回源请求（back to the source request），从源站拉取最新数据，更新本地缓存，并将最新数据返回给客户端。</p><p>CDN 服务商一般会提供基于文件后缀、目录多个维度来指定 CDN 缓存时间，为用户提供更精细化的缓存管理。</p><p>CDN 缓存时间会对“回源率”产生直接的影响。若 CDN 缓存时间较短，CDN 边缘节点上的数据会经常失效，导致频繁回源，增加了源站的负载，同时也增大的访问延时；若 CDN 缓存时间太长，会带来数据更新时间慢的问题。开发者需要增对特定的业务，来做特定的数据缓存时间管理。</p><p>优点:</p><ul><li>CDN 节点解决了跨运营商和跨地域访问的问题，访问延时大大降低；</li><li>大部分请求在 CDN 边缘节点完成，CDN 起到了分流作用，减轻了源站的负载。</li></ul><h2 id="chunked-response"><a href="#chunked-response" class="headerlink" title="chunked response"></a>chunked response</h2><p>HTTP 1.1 默认使用的是持久连接 (Persistent Connection)，当服务器返回一个响应时连接不会关闭，如果未申明 <code>Connection: close</code> 关闭长连接，客户端会一直处于 pending 状态。</p><p>要让客户端知道这个响应到哪里结束主要有两种方式:</p><ol><li><p>在响应头上加上 <code>Content-Length</code> 显示申明实体 body 的长度，此时客户端便知道读到哪里结束，但是如果 <code>Content-Length</code> 长度短于实体长度，则内容会被截取；如果超过实体长度，客户端还是会 pending 等待后续缺省的数据。</p></li><li><p>HTTP 1.1 协议在 header 中引入 <code>Transfer-Encoding</code>，当其值为 <code>chunked</code> 时, 表明采用分块编码方式来进行报文体的传输。基本方法是将大块数据分解成多块小数据，每块都可以自定长度。</p></li></ol><p><strong>分块传输的优点:</strong></p><ul><li>HTTP 分块传输编码允许服务器为动态生成的内容以维持 HTTP 持久链接</li><li>分块传输编码允许服务器在最后发送消息头字段。对于那些头字段值在内容被生成之前无法知道的情形非常重要，例如消息的内容要使用散列进行签名，散列的结果通过 HTTP 消息头字段进行传输。没有分块传输编码时，服务器必须缓冲内容直到完成后计算头字段的值并在发送内容前发送这些头字段的值。</li><li>HTTP 服务器有时使用压缩 （gzip 或 deflate）以缩短传输花费的时间。分块传输编码可以用来分隔压缩对象的多个部分。在这种情况下，块不是分别压缩的，而是整个负载进行压缩，压缩的输出使用本文描述的方案进行分块传输。在压缩的情形中，分块编码有利于一边进行压缩一边发送数据，而不是先完成压缩过程以得知压缩后数据的大小。</li></ul><p><strong>格式:</strong></p><p>每一个非空的块都以该块包含数据的字节数（字节数以十六进制表示）开始，跟随一个 CRLF，然后是数据本身，最后 CRLF 结束。</p><p>最后一块是单行，由块大小（0），一些可选的填充空格，以及 CRLF。最后一块不再包含任何数据，但是可以发送可选的尾部，包括消息头字段。</p><p>消息最后以 CRLF 结尾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Chunked-Body   = *chunk</span><br><span class="line">                 last-chunk</span><br><span class="line">                 trailer</span><br><span class="line">                 CRLF</span><br><span class="line"></span><br><span class="line">chunk          = chunk-size [ chunk-extension ] CRLF</span><br><span class="line">                 chunk-data CRLF</span><br><span class="line"></span><br><span class="line">chunk-size     = 1*HEX</span><br><span class="line"></span><br><span class="line">last-chunk     = 1*(&quot;0&quot;) [ chunk-extension ] CRLF</span><br><span class="line"></span><br><span class="line">chunk-extension= *( &quot;;&quot; chunk-ext-name [ &quot;=&quot; chunk-ext-val ] )</span><br><span class="line">chunk-ext-name = token</span><br><span class="line">chunk-ext-val  = token | quoted-string</span><br><span class="line">chunk-data     = chunk-size(OCTET)</span><br><span class="line"></span><br><span class="line">trailer        = *(entity-header CRLF)</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">25</span><br><span class="line"></span><br><span class="line">This is the data in the first chunk</span><br><span class="line"></span><br><span class="line">1C</span><br><span class="line"></span><br><span class="line">and this is the second one</span><br><span class="line"></span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">con</span><br><span class="line"></span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">sequence</span><br><span class="line"></span><br><span class="line">0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;This is the data in the first chunk\r\n&quot;      (37 字符 =&gt; 十六进制: 0x25)</span><br><span class="line">&quot;and this is the second one\r\n&quot;               (28 字符 =&gt; 十六进制: 0x1C)</span><br><span class="line">&quot;con&quot;                                          (3  字符 =&gt; 十六进制: 0x03)</span><br><span class="line">&quot;sequence&quot;                                     (8  字符 =&gt; 十六进制: 0x08)</span><br></pre></td></tr></table></figure><p>最后以 “0\r\n\r\n” 结束</p><p>解码数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is the data in the first chunk</span><br><span class="line">and this is the second one</span><br><span class="line">consequence</span><br></pre></td></tr></table></figure><p>实际抓包数据:</p><p><img src="/images/http/chunked.png" alt="image"></p><p>首部字段 <code>Trailer</code> 会事先说明在报文主体后记录了哪些首部字段，比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Tue, 03 Jul 2012 04:40:56 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">...</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Trailer: Expires</span><br><span class="line"></span><br><span class="line">...(报文主体)...</span><br><span class="line"></span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">Expires: Tue, 28 Sep 2004 23:59:59 GMT</span><br></pre></td></tr></table></figure><p>请求首部字段 <code>TE</code> 告知服务器 客户端能够处理响应的传输编码方式及相对优先级</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html" target="_blank" rel="noopener">RFC2616</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E6%A0%87%E5%BF%97%E7%AC%A6" target="_blank" rel="noopener">wikipedia uri</a></li><li>《图解 HTTP》</li><li><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81" target="_blank" rel="noopener">Chunked transfer encoding - 分块传输编码 wiki</a></li><li><a href="https://tools.ietf.org/html/rfc2616#section-3.6.1" target="_blank" rel="noopener">RFC 2616 - Chunked Transfer Coding</a></li><li><a href="https://github.com/amandakelake/blog/issues/41" target="_blank" rel="noopener">缓存机制</a></li><li><a href="https://notfalse.net/56/http-stale-response" target="_blank" rel="noopener">http cache</a></li><li><a href="http://imweb.io/topic/55c6f9bac222e3af6ce235b9" target="_blank" rel="noopener">缓存策略</a></li></ul>]]></content>
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http 扩展阅读 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>更换博客评论系统</title>
      <link href="/2018/03-valine.html"/>
      <url>/2018/03-valine.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前使用 Disqus，必须翻墙才能显示，而且 Disqus 会产生大量请求，一直想换个评论系统但是好用的好像都倒了 <em>(:зゝ∠)</em></p><p>最近无意间看到这个 Valine 评论系统，好像很好用，而且简单简洁，试了一下感觉还行，可惜少了嵌套评论。</p><h2 id="Yelee-添加方法"><a href="#Yelee-添加方法" class="headerlink" title="Yelee 添加方法"></a>Yelee 添加方法</h2><p><a href="https://valine.js.org" target="_blank" rel="noopener">Valine 配置官网</a></p><p>使用前还需要注册一个 <a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a> 账户，然后创建一个应用来存储管理评论内容。</p><ol><li>然后修改 Yelee 主题配置文件 <code>_config.yml</code><br>添加：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  appid: *** # LeanCloud 应用 AppID</span><br><span class="line">  appkey: *** # LeanCloud 应用 AppKey</span><br><span class="line">  verify: false # 验证码</span><br><span class="line">  notify: false # 评论回复邮箱提醒</span><br><span class="line">  avatar: identicon # 评论列表头像样式：&apos;&apos;/mm/identicon/monsterid/wavatar/retro/hide</span><br><span class="line">  placeholder: Just do it ! # 评论框占位符</span><br></pre></td></tr></table></figure><ol start="2"><li>修改 <code>yelee/layout/_partial/article.ejs</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line">    &lt;% if (theme.duoshuo.on) &#123; %&gt;</span><br><span class="line">      &lt;%- partial(&apos;comments/duoshuo&apos;, &#123;</span><br><span class="line">          key: post.path,</span><br><span class="line">          title: post.title,</span><br><span class="line">          url: config.url+url_for(post.path),</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; else if (theme.youyan.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(&apos;comments/youyan&apos;) %&gt;</span><br><span class="line">    &lt;% &#125; else if (theme.disqus.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(&apos;comments/disqus&apos;, &#123;</span><br><span class="line">            shortname: theme.disqus.shortname</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; else if (config.disqus_shortname) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(&apos;comments/disqus&apos;, &#123;</span><br><span class="line">            shortname: config.disqus_shortname</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">+   &lt;% &#125; else if (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; %&gt;</span><br><span class="line">+       &lt;%- partial(&apos;comments/valine&apos;, &#123;</span><br><span class="line">+           key: post.slug,</span><br><span class="line">+           title: post.title,</span><br><span class="line">+           url: config.url+url_for(post.path)</span><br><span class="line">+       &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建 <code>layout/_partial/comments/valine.ejs</code> 文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;section id=&quot;comments&quot; style=&quot;margin: 2em; padding: 2em; background: rgba(255, 255, 255, 0.5)&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;vcomment&quot; class=&quot;comment&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;script src=&quot;//cdn1.lncld.net/static/js/3.0.4/av-min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;//unpkg.com/valine/dist/Valine.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var notify = &apos;&lt;%= theme.valine.notify %&gt;&apos; == true ? true : false;</span><br><span class="line">      var verify = &apos;&lt;%= theme.valine.verify %&gt;&apos; == true ? true : false;</span><br><span class="line">      new Valine(&#123;</span><br><span class="line">        el: &apos;#vcomment&apos;,</span><br><span class="line">        notify: notify,</span><br><span class="line">        verify: verify,</span><br><span class="line">        app_id: &quot;&lt;%= theme.valine.appid %&gt;&quot;,</span><br><span class="line">        app_key: &quot;&lt;%= theme.valine.appkey %&gt;&quot;,</span><br><span class="line">        placeholder: &quot;&lt;%= theme.valine.placeholder %&gt;&quot;,</span><br><span class="line">        avatar:&quot;&lt;%= theme.valine.avatar %&gt;&quot;</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>在 <code>yelee/source/css/_partial/mobile.styl</code> 中添加</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#comments &#123;</span><br><span class="line">    margin: (10/16)rem 10px !important;</span><br><span class="line">    padding: 1rem !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yelee </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GithubPages 绑定二级域名并开启 HTTPS</title>
      <link href="/2018/01-githubpage.html"/>
      <url>/2018/01-githubpage.html</url>
      <content type="html"><![CDATA[<h2 id="1-创建-github-仓库"><a href="#1-创建-github-仓库" class="headerlink" title="1. 创建 github 仓库"></a>1. 创建 github 仓库</h2><p>通常使用 GithubPages 创建个人主页需要创建一个与用户名同名的 <code>XXX.github.io</code> 仓库</p><p>以我的博客为例，创建一个新仓库 <code>wangriyu.github.io</code>，上传网页文件，然后在仓库设置里开启 GitHub Pages 功能</p><p>此时应该能够在浏览器中输入 <a href="https://wangriyu.github.io" target="_blank" rel="noopener">https://wangriyu.github.io</a> 访问自己的网页了</p><p>而且 GithubPages 默认开启 HTTPS</p><h2 id="2-绑定自定义域名"><a href="#2-绑定自定义域名" class="headerlink" title="2. 绑定自定义域名"></a>2. 绑定自定义域名</h2><p>到 <a href="https://wanwang.aliyun.com" target="_blank" rel="noopener">万网</a> 上买个喜欢的域名，比如我买了 <code>wangriyu.wang</code>(可惜买不到 <code>riyu.wang</code>)</p><p>到上面的仓库目录下添加 <code>CNAME</code> 文件，里面的内容就是我的域名，比如我的就写了二级域名 <code>blog.wangriyu.wang</code></p><p>此时 Github Pages 看起来是这样的</p><p><img src="/images/githubpages/githubpages.png" alt="image"></p><p><code>Enforce HTTPS</code> 选项显示 <code>Unavailable for your site because you have a custom domain configured</code></p><p>自定义域名不提供 HTTPS 服务</p><p>此时还无法访问 <a href="http://blog.wangriyu.wang" target="_blank" rel="noopener">http://blog.wangriyu.wang</a>, 需要到 DNS 服务商那配置 DNS 解析，比如阿里云的即可</p><h2 id="3-配置-DNS-解析"><a href="#3-配置-DNS-解析" class="headerlink" title="3. 配置 DNS 解析"></a>3. 配置 DNS 解析</h2><p>打开 <a href="https://home.console.aliyun.com/new#/" target="_blank" rel="noopener">阿里云的域名控制台</a>，点击自己域名的解析按钮进入 DNS 设置页，添加解析:</p><p><img src="/images/githubpages/DNS.png" alt="image"></p><ul><li>记录类型中 A 类填的是 IP 地址，CNAME 类填的是域名，我们需要把 wangriyu.github.io 转向 blog.wangriyu.wang, 所以填 CNAME</li><li>主机记录填二级域名即可，‘@’ 值代表一级域名，更多选项见阿里云说明</li><li>解析路线填默认即可，如果分国内国外需要另外选择使其能够根据国内外 IP 解析到不同地址</li><li>记录值就是我们的原域名 wangriyu.github.io，如果记录类型是 A 类这里需要填 IP 地址 (可以 PING 一下得到)</li></ul><p>等待 DNS 生效即可通过 <a href="http://blog.wangriyu.wang" target="_blank" rel="noopener">http://blog.wangriyu.wang</a> 访问自己的网页了，而且原本的 <a href="https://wangriyu.github.io" target="_blank" rel="noopener">https://wangriyu.github.io</a><br>也会重定向到自定义域名上</p><p>DNS 解析这里我用了二级域名 blog 访问博客，还可以添加别的二级域名，比如我用了 home 访问我的另一个仓库 <a href="https://github.com/wangriyu/homepage" target="_blank" rel="noopener">https://github.com/wangriyu/homepage</a></p><p>只要在新的仓库根目录下添加 <code>CNAME</code> 文件并写入添加的有效二级域名 (home.wangriyu.wang), 再开启 GithubPages 功能即可访问另一个主页</p><p>二级域名可能有数量限制，看你购买域名时服务提供商的要求</p><h2 id="4-实现自定义域名-HTTPS"><a href="#4-实现自定义域名-HTTPS" class="headerlink" title="4. 实现自定义域名 HTTPS"></a>4. 实现自定义域名 HTTPS</h2><h3 id="到-CloudFlare-注册一个账号，注册成功后在返回的页面中添加域名-一级域名-wangriyu-wang-，点击扫描-DNS-记录"><a href="#到-CloudFlare-注册一个账号，注册成功后在返回的页面中添加域名-一级域名-wangriyu-wang-，点击扫描-DNS-记录" class="headerlink" title="到 CloudFlare 注册一个账号，注册成功后在返回的页面中添加域名 (一级域名 wangriyu.wang)，点击扫描 DNS 记录"></a>到 <a href="https://www.cloudflare.com/" target="_blank" rel="noopener">CloudFlare</a> 注册一个账号，注册成功后在返回的页面中添加域名 (一级域名 wangriyu.wang)，点击扫描 DNS 记录</h3><p><img src="https://zhouhao.me/img/https_20170721_3.png" alt="image"></p><h3 id="添加域名解析"><a href="#添加域名解析" class="headerlink" title="添加域名解析"></a>添加域名解析</h3><p>如果 DNS 扫描不到你的解析记录，可以手动添加，与上面的添加方法类似</p><p><img src="/images/githubpages/cloundflare.png" alt="image"></p><h3 id="修改域名服务器"><a href="#修改域名服务器" class="headerlink" title="修改域名服务器"></a>修改域名服务器</h3><p>我用的是万网的 DNS，所以现在要在万网的域名控制台将 DNS 服务器修改至 CloudFlare 提供的域名服务器</p><p><img src="/images/githubpages/nameserver.png" alt="image"></p><p>进入万网的域名控制台，点击域名的管理按钮，修改域名 DNS 为 CloudFlare 提供的</p><p><img src="https://zhouhao.me/img/https_20170721_6.png" alt="image"></p><h3 id="回到-CloudFlare-页面，设置-SSL-为-Flexible"><a href="#回到-CloudFlare-页面，设置-SSL-为-Flexible" class="headerlink" title="回到 CloudFlare 页面，设置 SSL 为 Flexible"></a>回到 CloudFlare 页面，设置 SSL 为 Flexible</h3><p><img src="https://zhouhao.me/img/https_20170721_7.png" alt="image"></p><h3 id="添加路由重定向规则"><a href="#添加路由重定向规则" class="headerlink" title="添加路由重定向规则"></a>添加路由重定向规则</h3><p>在 <code>Page Rules</code> 里使用通配符将路由重定向到 HTTPS 的链接</p><p><img src="/images/githubpages/pagerules.png" alt="image"></p><p>待设置生效后再访问 <a href="http://blog.wangriyu.wang" target="_blank" rel="noopener">http://blog.wangriyu.wang</a> 就会变成 https 了</p><p>具体原理如图，cloundflare 访问原网址的服务器获取储存原网页文件，用户再访问 cloundflare 的加密连接<br>如果在控制台中 Ping 一下 CloudFlare 代理前后的网址就会发现博客 ip 变了</p><p><img src="/images/githubpages/FlexibleSSL.png" alt="image"></p><p>除此之外，在 CloudFlare 控制台中还提供了很多服务，比如 js、html 等静态文件压缩，设置浏览器缓存过期时间，<br>清空 CloudFlare 服务器缓存 (强制刷新资源，避免原网页更新用户访问的还是旧资源) 等等</p><p>更多技巧见文章: <a href="https://wzfou.com/cloudflare/" target="_blank" rel="noopener">十个你可能不知道的 CloudFlare 免费 CDN 加速技巧 -SSL\DDOS\Cache</a></p><p>cloundflare 的服务很适合博客这样的静态网页，也弥补了 GithubPages 的不足</p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yelee </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dart 语法入门 V</title>
      <link href="/2017/12-Dart%20V.html"/>
      <url>/2017/12-Dart%20V.html</url>
      <content type="html"><![CDATA[<h2 id="分离-Isolates"><a href="#分离-Isolates" class="headerlink" title="分离 Isolates"></a>分离 Isolates</h2><p>现在的网页浏览器，甚至是移动平台上的，运行在多核 CPU 之上。为了充分利用多核心的优势，开发人员通常对共享内存的线程采取并行策略。然而，在共享状态下使用并发容易出错并且会使代码复杂化。<br>Dart 在代码中使用 isolates 来替代线程。每个 isolate 有自己的内存堆，以确保 isolate 的状态不能被其他任何 isolate 访问。</p><hr><h2 id="类型定义-Typedefs"><a href="#类型定义-Typedefs" class="headerlink" title="类型定义 Typedefs"></a>类型定义 Typedefs</h2><p>在 Dart 中，方法是对象，就像字符串和数字也是对象。typedef , 又被称作函数类型别名，让你可以为函数类型命名，并且该命名可以在声明字段和返回类型的时候使用。当一种函数类型被分配给一个变量的时候，typedef 会记录原本的类型信息。<br>考虑下面的代码，哪一个没有使用 typedef：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortedCollection</span> </span>&#123;</span><br><span class="line">  <span class="built_in">Function</span> compare;</span><br><span class="line"></span><br><span class="line">  SortedCollection(<span class="built_in">int</span> f(<span class="built_in">Object</span> a, <span class="built_in">Object</span> b)) &#123;</span><br><span class="line">    compare = f;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Initial, broken implementation.</span></span><br><span class="line"> <span class="built_in">int</span> sort(<span class="built_in">Object</span> a, <span class="built_in">Object</span> b) =&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  SortedCollection coll = <span class="keyword">new</span> SortedCollection(sort);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// All we know is that compare is a function,</span></span><br><span class="line">  <span class="comment">// but what type of function?</span></span><br><span class="line">  <span class="keyword">assert</span>(coll.compare <span class="keyword">is</span> <span class="built_in">Function</span>); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 f 分配到 compare 的时候类型信息丢失了。f 的类型是 (Object, Object) → int(→ 意味着返回的)，然而 compare 的类型是方法。如果我们使用显式的名字更改代码并保留类型信息，则开发者和工具都可以使用这些信息。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">int</span> Compare(<span class="built_in">Object</span> a, <span class="built_in">Object</span> b);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortedCollection</span> </span>&#123;</span><br><span class="line">  Compare compare;</span><br><span class="line"></span><br><span class="line">  SortedCollection(<span class="keyword">this</span>.compare);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// Initial, broken implementation.</span></span><br><span class="line"> <span class="built_in">int</span> sort(<span class="built_in">Object</span> a, <span class="built_in">Object</span> b) =&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  SortedCollection coll = <span class="keyword">new</span> SortedCollection(sort);</span><br><span class="line">  <span class="keyword">assert</span>(coll.compare <span class="keyword">is</span> <span class="built_in">Function</span>); <span class="comment">// true</span></span><br><span class="line">  <span class="keyword">assert</span>(coll.compare <span class="keyword">is</span> Compare); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>目前 typedefs 仅限于函数类型，以后可能会有所改变。</p></blockquote><p>typedefs 是简单的别名，所以它提供了一种方法来检查任何函数的类型。比如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">int</span> Compare(<span class="built_in">int</span> a, <span class="built_in">int</span> b);</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> sort(<span class="built_in">int</span> a, <span class="built_in">int</span> b) =&gt; a - b;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">assert</span>(sort <span class="keyword">is</span> Compare); <span class="comment">// True</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="元数据-Metadata"><a href="#元数据-Metadata" class="headerlink" title="元数据 Metadata"></a>元数据 Metadata</h2><p>使用元数据来给你的代码提供附加信息。<br>元数据注解以 @ 字符开头，后面跟一个编译时的常量引用（例如 deprecated）或者调用常量构造器的语句。<br>所有的 Dart 代码中支持三个注解：@deprecated，@override 和 @proxy。@override 和 @proxy 的用法示例，请查看 <a href="https://www.dartlang.org/guides/language/language-tour#extending-a-class" target="_blank" rel="noopener">类的继承</a>。以下是 @deprecated 用法的示例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Deprecated: Use [turnOn] instead</span></span><br><span class="line">  <span class="meta">@deprecated</span></span><br><span class="line">  <span class="keyword">void</span> activate() &#123;</span><br><span class="line">    turnOn();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Turns the TV's power on.</span></span><br><span class="line">  <span class="keyword">void</span> turnOn() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'on!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以定义你自己的元数据注解。下面的例子定义了一个有两个参数的 @todo 注解：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">library</span> todo;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">todo</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> who;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> what;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> todo(<span class="keyword">this</span>.who, <span class="keyword">this</span>.what);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是使用 @todo 注解的例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'todo.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@todo</span>(<span class="string">'seth'</span>, <span class="string">'make this do something'</span>)</span><br><span class="line"><span class="keyword">void</span> doSomething() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'do something'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元数据可以出现在库、类、typedef、类型参数、构造器、工厂、函数、属性、参数、变量声明、import 或 export 指令之前。你可以在运行时通过反射来取回元数据。</p><hr><h2 id="注释-Comments"><a href="#注释-Comments" class="headerlink" title="注释 Comments"></a>注释 Comments</h2><p>Dart 支持单行注释、多行注释和文档注释。</p><ul><li><p>单行注释由 // 开始</p></li><li><p>多行注释由 /<em> 开始，由 </em>/ 结束，多行注释可以嵌套</p></li><li><p>文档注释是由 /// 或 /** 开始的多行或单行注释<br>在连续的行上使用 /// 的效果等同于多行注释。<br>在一段文档注释中，Dart 编译器忽略所有除括号内的文本。你可以使用括号来引用类、方法、属性、顶级变量、函数和参数。括号中的名字会在被文档化程序元素的词法范围内解析。<br>下面是一个引用了其它类和参数的文档注释的例子：</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// A domesticated South American camelid (Lama glama).</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// Andean cultures have used llamas as meat and pack</span></span><br><span class="line"><span class="comment">/// animals since pre-Hispanic times.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Llama</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Feeds your llama [Food].</span></span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  <span class="comment">/// The typical llama eats one bale of hay per week.</span></span><br><span class="line">  <span class="keyword">void</span> feed(Food food) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// Exercises your llama with an [activity] for</span></span><br><span class="line">  <span class="comment">/// [timeLimit] minutes.</span></span><br><span class="line">  <span class="keyword">void</span> exercise(Activity activity, <span class="built_in">int</span> timeLimit) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生成的文档中， [food] 变成了指向 Food 类的 API 文档连接。</p><hr><p><strong>更多内容</strong></p><ul><li><a href="https://www.dartlang.org/articles" target="_blank" rel="noopener">文章</a></li><li><a href="https://www.dartlang.org/dart-vm/dart-by-example" target="_blank" rel="noopener">代码用法示例</a></li><li><a href="https://www.dartlang.org/guides/libraries/library-tour" target="_blank" rel="noopener">Dart 核心库</a></li><li><a href="https://www.dartlang.org/guides/language/effective-dart" target="_blank" rel="noopener">Effective Dart</a></li><li><a href="https://www.dartlang.org/tutorials/language/futures" target="_blank" rel="noopener">Futures 教程</a></li><li><a href="https://www.dartlang.org/docs/tutorials/streams" target="_blank" rel="noopener">Streams 教程</a></li></ul>]]></content>
      
      <categories>
          
          <category> Dart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>极具性价比的 Mac 存储扩展方案</title>
      <link href="/2017/12-MacStorageExpansion.html"/>
      <url>/2017/12-MacStorageExpansion.html</url>
      <content type="html"><![CDATA[<h2 id="常见-Mac-扩容方案"><a href="#常见-Mac-扩容方案" class="headerlink" title="常见 Mac 扩容方案"></a>常见 Mac 扩容方案</h2><ul><li>直接更换大容量 SSD：效果最好，速度最快，成本最高，需要专业人士操刀</li><li>外接移动硬盘：容量大速度也挺快，还算便捷但是不方便，而且占用一个 usb</li><li>外接小尺寸 U 盘：像三星这个 <a href="https://item.jd.com/2154209.html" target="_blank" rel="noopener">https://item.jd.com/2154209.html</a> ，占用空间小，速度也还行，但会占用一个 usb</li><li>利用 SD 卡槽扩展：比如创见的 <a href="https://item.jd.com/1212838.html" target="_blank" rel="noopener">JetDrive Lite</a> 扩展卡，专为 Mac 设计，速度也还可以，但是性价比一般</li><li>本文同样利用 SD 卡槽扩展但性价比远超 JetDrive Lite</li></ul><h2 id="准备物品"><a href="#准备物品" class="headerlink" title="准备物品"></a>准备物品</h2><ul><li>三星 Evo Plus UHS 高速 MicroSD 卡 - 128G，某东上活动价 249，速度和稳定性比较好，选择其他类似的 tf 卡也可以</li></ul><p><img src="/images/MacStorage/SamsungEvoPlus.png" width="50%"></p><ul><li>适配 Mac SD 卡槽的卡套，某宝上几块钱一个，这东西只是转接作用，不影响速度，主要是长度问题，普通卡套插上 Mac 会突出一部分影响体验，而且需要注意不同 Mac 版本 SD 卡槽深度不一，买前请留意</li></ul><p><img src="/images/MacStorage/IMG_20171224_214833.jpg" width="50%"><br><img src="/images/MacStorage/IMG_20171224_214954.jpg" width="50%"></p><ul><li>四合一读卡器，这个可有可无，我只是推荐一下，配合这个读卡器可以在需要转储文件时很方便的连接安卓、苹果、电脑等</li></ul><p><img src="/images/MacStorage/IMG_20171224_214714.jpg" width="50%"></p><h2 id="最后效果"><a href="#最后效果" class="headerlink" title="最后效果"></a>最后效果</h2><p><img src="/images/MacStorage/IMG_20171231_210739.jpg" width="50%"></p><p>全套工具<br><img src="/images/MacStorage/IMG_20171224_224139.jpg" width="50%"></p><p>速度测试，读写基本稳定几十 M 每秒，普通使用足矣<br><img src="/images/MacStorage/SpeedTest.png" width="50%"></p><h2 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h2><ul><li>SD 卡在速度上可靠性上不如前面那些方案，适合存储一些图片视频音乐的文件，但像系统或者比较细碎的文件经常反复读写的文件不建议存 SD 卡里</li><li>SD 卡的常见格式有 exFat、Fat32、NTFS，像我这样会在多设备间转储的，包括 Mac、Windows、Android、ios 等，SD 卡格式最好的选择是 exFat，基本都支持此格式而且支持 4g 以上的单文件，而 Fat32 兼容性最好但不支持 4g 以上的单文件</li><li>exFat 格式的 SD 卡在部分安卓设备上无法识别，我的手机就识别不了，以下方法 (没有 root 的情况) 可以通过第三方软件实现读取<br>详细步骤见视频：<br><a href="https://www.youtube.com/watch?v=Daaydbsc5_c" target="_blank" rel="noopener">How to Mount NTFS/EXFat in your Android device without root</a><br>相关软件：<ul><li>Total Commender <a href="https://play.google.com/store/apps/details?id=com.ghisler.android.TotalCommander&amp;hl=en" target="_blank" rel="noopener">https://play.google.com/store/apps/details?id=com.ghisler.android.TotalCommander&amp;hl=en</a></li><li>USB-Stick Plugin <a href="https://play.google.com/store/apps/details?id=de.hechler.tcplugins.usbstick&amp;hl=en" target="_blank" rel="noopener">https://play.google.com/store/apps/details?id=de.hechler.tcplugins.usbstick&amp;hl=en</a></li><li>exFat/NTFS for USB <a href="https://play.google.com/store/apps/details?id=com.paragon.tcplugins_ntfs_ro&amp;hl=en" target="_blank" rel="noopener">https://play.google.com/store/apps/details?id=com.paragon.tcplugins_ntfs_ro&amp;hl=en</a></li></ul></li><li>最好在 Finder 中添加一个外接 SD 设备的替身，避免点击到弹出按钮</li></ul><p><img src="/images/MacStorage/finder.gif" width="50%"></p>]]></content>
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac 存储扩展 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UEFI + GPT + Win10 + Ubuntu + rEFInd</title>
      <link href="/2017/12-Win+Ubuntu.html"/>
      <url>/2017/12-Win+Ubuntu.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚好赶上 win10 更新 1709 和 Ubuntu 更新 17.10，心血来潮给我的 Windows 笔记本重装一下系统并加上 Ubuntu，这里记录一下过程，以留备用。我的配置是 256G SSD+1T HHD，两个系统都装在固态盘，如果需要把 Ubuntu 装在机械硬盘里，可能还需要额外做一下引导：<a href="https://www.zhihu.com/question/33461827" target="_blank" rel="noopener">https://www.zhihu.com/question/33461827</a></p><hr><h2 id="安装-win10"><a href="#安装-win10" class="headerlink" title="安装 win10"></a>安装 win10</h2><h3 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h3><ul><li>4G 以上 U 盘</li><li>win10 镜像: <a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a> MSDN-&gt; 操作系统 -&gt;Windows10,Version1709</li><li>启动盘制作工具 Rufus:<a href="http://rufus.akeo.ie/?locale=zh_CN" target="_blank" rel="noopener">http://rufus.akeo.ie/?locale=zh_CN</a></li></ul><h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><ol><li>打开 rufus，选择 U 盘</li><li><code>分区方案和目标系统类型</code> 选择 <code>用于 UEFI 计算机的 GPT 分区方案</code></li><li>文件系统默认 fat32(这个不能改，uefi 只识别这个格式)</li><li>下面的 <code>创建一个启动盘使用</code> 默认选中的即是 <code>ISO 镜像</code>，然后点击右侧的磁盘图标在电脑中找到下载好的 Win10 正式版 ISO 镜像</li><li>最后点击 “开始” 按钮即可开始制作支持 UEFI 启动的 Win10 系统安装 U 盘</li></ol><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><ol><li>插上 U 盘重启电脑，进入 BIOS 选择开机启动项为自己做好的的 <code>uefi U 盘</code>，保存重启</li><li>能进入 win10 安装界面则成功了一半，如果进不去需要检查一下之前 U 盘是否写入成功，还有 bios 的 uefi 是否打开</li><li>进入 win10 安装界面，选择安装，提示输入密钥，可以先跳过</li><li>接受许可条款后，提示选择 <code>安装类型</code>，点击自定义安装进入分区界面</li></ol><p><img src="/images/win10&amp;ubuntu/partition.png" alt="iamge"></p><p>这里网上找的图，实际情况按自身需求处理，我的是驱动器 0 代表固态，1 代表机械，然后我把固态的分区全删除，在未分配的空间上新建分区，给 win10 系统盘 C 盘分配 80GB(uefi 会在系统盘的基础上自动多创建几个分区用于 uefi 引导)，再划分 100GB 做 D 盘，留 50GB 未分配的空间 (之后安装 Ubuntu)，分完区 <code>注意选中你要安装系统的盘即第一个分的 C 盘</code>，再点下一步进入正式安装</p><p>⚠️如果这里点新建，如果新建不了可能是硬盘格式不对，mbr 格式的磁盘需要先全部删除才能转成 GPT 格式，然后再新建</p><ol start="5"><li>安装完正常会自动进入系统，如果没有进去，可能得进 BIOS 把开机启动项改回系统，并退出 U 盘</li><li>进入系统，刚开始没有桌面图标可以到主题设置里找，我的电脑没有硬盘可以右键 <code>系统菜单</code> 或者 <code>我的电脑</code> 选择并进入磁盘管理给分区分配盘符，联网后系统更新会自动下载安装电脑驱动，分享一些我常年收藏的工具：<a href="https://mega.nz/#F!AOwwyaZY!iR2HEt15jl2chNbEfs6_Nw" target="_blank" rel="noopener">https://mega.nz/#F!AOwwyaZY!iR2HEt15jl2chNbEfs6_Nw</a></li></ol><hr><h2 id="安装-Ubuntu"><a href="#安装-Ubuntu" class="headerlink" title="安装 Ubuntu"></a>安装 Ubuntu</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>2G 以上的 U 盘</li><li>Ubuntu 镜像：<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">https://www.ubuntu.com/download/desktop</a></li><li>启动盘制作工具 Rufus</li><li>同样打开 Rufus，步骤同上，制作好启动盘</li></ul><h3 id="开始安装-1"><a href="#开始安装-1" class="headerlink" title="开始安装"></a>开始安装</h3><ol><li>还是插上 U 盘改启动项进入 Ubuntu 安装界面，一样的套路</li><li>刚开始会选择 <code>try Ubuntu</code> 或者 <code>install Ubuntu</code>，那个都可以，try 就是先尝试一下然后再安装</li><li>正式进入安装程序后，出现 <code>为图形或无线硬件安装第三方软件</code> 不勾选，直接继续，避免安装过程下载东西</li><li>出现 <code>已安装 Windows10，准备如何安装 Ubuntu</code>，选择 <code>其他选项</code></li><li>出现选择分区时，选中之前留下来的 50GB 未分配的空闲空间，千万别选错了。选中后点 + 号新建分区，分区可以按下图示例 (盗的图) 进行分，/ 是 linux 根目录的空间大小、交换空间 swap 是虚拟内存大小 (按个人需求调整大小)、/boot 是启动引导的分区 (一般 200MB 足够)、/home 是给 home 目录分配独立分区并分配一定大小，也可以不分把所有空间放到根目录下<br><img src="/images/win10&amp;ubuntu/1.png" alt="image"><br><img src="/images/win10&amp;ubuntu/2.png" alt="image"><br><img src="/images/win10&amp;ubuntu/3.png" alt="image"><br><img src="/images/win10&amp;ubuntu/4.png" alt="image"><br>⚠️分好区后 <code>安装启动引导器的设备</code> 时要选中 / boot 分区所在的设备</li><li>点安装下一步确认改动，等待安装完成</li><li>安装完退出 U 盘重启，可以选择启动项，点 Ubuntu 进 linux，点 Windows boot manager 进 win10，但这个 grub 引导界面太丑，下面会使用 rEFInd 引导</li><li>进入 Ubuntu 后一些基础设置可以参考这篇文章：<a href="http://www.jianshu.com/p/62d947731401" target="_blank" rel="noopener">http://www.jianshu.com/p/62d947731401</a></li></ol><hr><h2 id="rEFInd-引导"><a href="#rEFInd-引导" class="headerlink" title="rEFInd 引导"></a><a href="http://www.rodsbooks.com/refind/" title=" 点击访问官网 " target="_blank" rel="noopener">rEFInd</a> 引导</h2><h3 id="安装-rEFInd"><a href="#安装-rEFInd" class="headerlink" title="安装 rEFInd"></a>安装 rEFInd</h3><p>这是官网的安装简介：<br><strong>Ubuntu—Two Ubuntu-specific methods of installing rEFInd in this distribution exist:</strong></p><ul><li>Ubuntu 17.04 (“Zesty Zapus”) includes rEFInd 0.10.4. Note that, like the Debian package, this one is not signed for use with Secure Boot, but if your system includes the sbsigntool package, the installer will generate a local key for this purpose. If you want a more recent version, you can use my PPA or install my Debian package.</li><li>I’ve created a rEFInd PPA for Ubuntu. To use it, open a Terminal window and type the following commands:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-add-repository ppa:rodsmith/refind</span><br><span class="line"><span class="meta">$</span> sudo apt-get update</span><br><span class="line"><span class="meta">$</span> sudo apt-get install refind</span><br></pre></td></tr></table></figure></li></ul><p>You’ll be asked whether to install rEFInd to the ESP when you first install it. Thereafter, the rEFInd version will update along with your other software. This package is built with GNU-EFI and is not signed with a Secure Boot key; however, the install script should sign the binary with a locally-generated key if it detects that your system uses Secure Boot. Thus, if you’ve previously installed one of my binaries on a Secure Boot system and added its key as a MOK, you’ll have to add your local key when you reboot.</p><p>对于 Ubuntu 而言就是关掉 BIOS 里的 <code>Secure Boot</code> 选项（最好关掉），运行上述三条命令即可安装。</p><p>安装好后，文件目录默认是 <code>/boot/efi/efi/refind</code>，我的是这样，安装方式不同可能目录也不一样。之后要修改这里面的配置文件</p><h3 id="更换引导主题"><a href="#更换引导主题" class="headerlink" title="更换引导主题"></a>更换引导主题</h3><p>找到自己想要的主题：<a href="http://www.rodsbooks.com/refind/themes.html" target="_blank" rel="noopener">http://www.rodsbooks.com/refind/themes.html</a><br>比如我用的就是 <a href="https://github.com/EvanPurkhiser/rEFInd-minimal" target="_blank" rel="noopener">Minimal theme</a></p><ol><li>找到 refind 安装目录，比如 [/boot/efi/efi/refind]</li><li>如果不存在 <code>themes</code> 则创建一个 <code>themes</code> 文件夹</li><li>在 themes 目录下创建 <code>minimal</code> 文件夹，把克隆或下载下来的主题文件拷进来</li><li>修改 refind 目录下的 refind.conf 文件，修改配置。注释里有介绍，也可以找官网的介绍，或者其他例子：<a href="https://tieba.baidu.com/p/4459857693" target="_blank" rel="noopener">https://tieba.baidu.com/p/4459857693</a></li></ol><p>我的配置是这样的，可供参考：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"># Minimal refind theme</span><br><span class="line"></span><br><span class="line"># Hide user interface elements for personal preference or to increase</span><br><span class="line"># security:</span><br><span class="line">#  banner      - the rEFInd title banner (built-in or loaded via &quot;banner&quot;)</span><br><span class="line">#  label       - boot option text label in the menu</span><br><span class="line">#  singleuser  - remove the submenu options to boot Mac OS X in single-user</span><br><span class="line">#                or verbose modes; affects ONLY MacOS X</span><br><span class="line">#  safemode    - remove the submenu option to boot Mac OS X in &quot;safe mode&quot;</span><br><span class="line">#  hwtest      - the submenu option to run Apple&apos;s hardware test</span><br><span class="line">#  arrows      - scroll arrows on the OS selection tag line</span><br><span class="line">#  hints       - brief command summary in the menu</span><br><span class="line">#  editor      - the options editor (+, F2, or Insert on boot options menu)</span><br><span class="line">#  all         - all of the above</span><br><span class="line"># Default is none of these (all elements active)</span><br><span class="line">#</span><br><span class="line">hideui singleuser,hints,arrows,badges</span><br><span class="line"></span><br><span class="line"># Set the name of a subdirectory in which icons are stored. Icons must</span><br><span class="line"># have the same names they have in the standard directory. The directory</span><br><span class="line"># name is specified relative to the main rEFInd binary&apos;s directory. If</span><br><span class="line"># an icon can&apos;t be found in the specified directory, an attempt is made</span><br><span class="line"># to load it from the default directory; thus, you can replace just some</span><br><span class="line"># icons in your own directory and rely on the default for others.</span><br><span class="line"># Default is &quot;icons&quot;.</span><br><span class="line">#</span><br><span class="line">icons_dir themes/minimal/icons</span><br><span class="line"></span><br><span class="line"># Use a custom title banner instead of the rEFInd icon and name. The file</span><br><span class="line"># path is relative to the directory where refind.efi is located. The color</span><br><span class="line"># in the top left corner of the image is used as the background color</span><br><span class="line"># for the menu screens. Currently uncompressed BMP images with color</span><br><span class="line"># depths of 24, 8, 4 or 1 bits are supported, as well as PNG images.</span><br><span class="line">#</span><br><span class="line">banner themes/minimal/background.png</span><br><span class="line"></span><br><span class="line"># Tells rEFInd whether to display banner images pixel-for-pixel (noscale)</span><br><span class="line"># or to scale banner images to fill the screen (fillscreen). The former is</span><br><span class="line"># the default.</span><br><span class="line">#</span><br><span class="line">banner_scale fillscreen</span><br><span class="line"></span><br><span class="line"># Custom images for the selection background. There is a big one (144 x 144)</span><br><span class="line"># for the OS icons, and a small one (64 x 64) for the function icons in the</span><br><span class="line"># second row. If only a small image is given, that one is also used for</span><br><span class="line"># the big icons by stretching it in the middle. If only a big one is given,</span><br><span class="line"># the built-in default will be used for the small icons.</span><br><span class="line">#</span><br><span class="line"># Like the banner option above, these options take a filename of an</span><br><span class="line"># uncompressed BMP image file with a color depth of 24, 8, 4, or 1 bits,</span><br><span class="line"># or a PNG image. The PNG format is required if you need transparency</span><br><span class="line"># support (to let you &quot;see through&quot; to a full-screen banner).</span><br><span class="line">#</span><br><span class="line">selection_big   themes/rEFInd-minimal/selection_big.png</span><br><span class="line">selection_small themes/rEFInd-minimal/selection_small.png</span><br><span class="line"></span><br><span class="line"># Which non-bootloader tools to show on the tools line, and in what</span><br><span class="line"># order to display them:</span><br><span class="line">#  shell           - the EFI shell (requires external program; see rEFInd</span><br><span class="line">#                    documentation for details)</span><br><span class="line">#  gptsync         - the (dangerous) gptsync.efi utility (requires external</span><br><span class="line">#                    program; see rEFInd documentation for details)</span><br><span class="line">#  apple_recovery  - boots the Apple Recovery HD partition, if present</span><br><span class="line">#  mok_tool        - makes available the Machine Owner Key (MOK) maintenance</span><br><span class="line">#                    tool, MokManager.efi, used on Secure Boot systems</span><br><span class="line">#  about           - an &quot;about this program&quot; option</span><br><span class="line">#  exit            - a tag to exit from rEFInd</span><br><span class="line">#  shutdown        - shuts down the computer (a bug causes this to reboot</span><br><span class="line">#                    EFI systems)</span><br><span class="line">#  reboot          - a tag to reboot the computer</span><br><span class="line">#  firmware        - a tag to reboot the computer into the firmware&apos;s</span><br><span class="line">#                    user interface (ignored on older computers)</span><br><span class="line"># Default is shell,apple_recovery,mok_tool,about,shutdown,reboot,firmware</span><br><span class="line">#</span><br><span class="line">showtools shutdown,reboot</span><br></pre></td></tr></table></figure><p></p><p>最终效果：<br><img src="/images/win10&amp;ubuntu/refind.jpg" alt="image"></p><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><p>Ubuntu 16.04 与 Win10 双系统双硬盘安装图解 <a href="http://blog.csdn.net/fesdgasdgasdg/article/details/54183577" target="_blank" rel="noopener">http://blog.csdn.net/fesdgasdgasdg/article/details/54183577</a></p></li><li><p>最新版 Ubuntu 17.10 与 Windows 双系统安装、配置与美化教程 <a href="http://www.jianshu.com/p/62d947731401" target="_blank" rel="noopener">http://www.jianshu.com/p/62d947731401</a></p></li><li><p>rEFInd 引导教程 - refind 吧 <a href="https://tieba.baidu.com/p/4383185951?red_tag=2713770601" target="_blank" rel="noopener">https://tieba.baidu.com/p/4383185951?red_tag=2713770601</a></p></li></ul>]]></content>
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UEFI&amp;GPT </tag>
            
            <tag> win10&amp;Ubuntu 双系统 </tag>
            
            <tag> rEFInd 引导美化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dart 语法入门 IV</title>
      <link href="/2017/12-Dart%20IV.html"/>
      <url>/2017/12-Dart%20IV.html</url>
      <content type="html"><![CDATA[<h2 id="泛型-Generics"><a href="#泛型-Generics" class="headerlink" title="泛型 Generics"></a>泛型 Generics</h2><p>如果你在 API 文档寻找基本数组类型或者 List 类型，你将会看到该类型实际上为 List<e>, 其中&lt;…&gt;标记表示此表为一个泛型类型（或为参数化结构）—— 一种含有正规类型参数的类型。按照惯例，类型变量通常为单字符名称，例如 E, T, S, K 以及 V。</e></p><h3 id="为何要使用泛型？"><a href="#为何要使用泛型？" class="headerlink" title="为何要使用泛型？"></a>为何要使用泛型？</h3><p>因为在 Dart 中类型是可选的，你不一定要使用泛型。或许你想用，可是，因为一些相同的原因你会想在代码中使用其他的类型：这些类型（泛型或者其他类型）可以记录并注释你的代码，使你的意图更加清晰。</p><p>比如，如果你打算使用一个仅仅包含字符串的 List，你可以声明它为 List<string>（可理解为“字符串类型组成的 List”），通过这种方式，你的程序员同事，以及你的工具（比如 Dart 编辑器和调试模式下的 Dart 虚拟机）能检测到将一个非字符串的变量分配到 List 中很可能是错误的，这里给出一个样例：</string></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">names.addAll([<span class="string">'Seth'</span>, <span class="string">'Kathy'</span>, <span class="string">'Lars'</span>]);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">names.add(<span class="number">42</span>); <span class="comment">// 在调试模式中失败 (在生产模式中成功)</span></span><br></pre></td></tr></table></figure><p>另外一个使用泛型的原因是为了减少代码的重复。泛型可以让你能共享多个类型的一个接口和实现方式，它在调试模式以及静态分析的错误预警中仍然很有优势。举个例子，当你在创建一个接口来缓存一个对象时：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectCache</span></span>&#123;</span><br><span class="line">  object getByKey(<span class="built_in">String</span> key);</span><br><span class="line">  setByKey(<span class="built_in">String</span> key,<span class="built_in">Object</span> value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你发现你想要一个字符串专用的接口，所以你创建了另外一个接口：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">StringCache</span></span>&#123;</span><br><span class="line">  string getByKey(<span class="built_in">String</span> key);</span><br><span class="line">  setByKey(<span class="built_in">String</span> key,<span class="built_in">String</span> value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你想要一个这种接口的数字专用的接口，又要创建不同类型的接口。<br>泛型类型可以减少你创建这些接口的麻烦。取而代之的是，你只需要创建一个带有一个类型参数的接口即可：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cache</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  T getByKey(<span class="built_in">String</span> key);</span><br><span class="line">  setByKey(<span class="built_in">String</span> key,T value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个代码中，T 是一个替代类型，即占位符，你可以将他视为后续被开发者定义的类型。</p><h3 id="使用集合常量"><a href="#使用集合常量" class="headerlink" title="使用集合常量"></a>使用集合常量</h3><p>Lis 常量以及 map 常量都能被参数化，参数常量就像你已经见过的常量那样，除非你在左 方括号之前添加<type>(对于 List）或者&lt;keyType,valuetype&gt;(对于 map）。当你需要避免调试模式下的类型警告，你或许可以使用参数常量。这里有一个使用常量类型的例子：</type></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = &lt;<span class="built_in">String</span>&gt;[<span class="string">'Seth'</span>, <span class="string">'Kathy'</span>, <span class="string">'Lars'</span>];</span><br><span class="line"><span class="keyword">var</span> pages = &lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt;&#123;</span><br><span class="line">  <span class="string">'index.html'</span>: <span class="string">'Homepage'</span>,</span><br><span class="line">  <span class="string">'robots.txt'</span>: <span class="string">'Hints for web robots'</span>,</span><br><span class="line">  <span class="string">'humans.txt'</span>: <span class="string">'We are people, not machines'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用带构造器的参数化类型"><a href="#使用带构造器的参数化类型" class="headerlink" title="使用带构造器的参数化类型"></a>使用带构造器的参数化类型</h3><p>为了在使用构造器时详细说明一个或多个类型，将类型放入类名后的三角括号（&lt;…&gt;）中，举个例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">names.addAll([‘Seth’, ‘Kathy’ , ‘Lars’]);</span><br><span class="line"><span class="keyword">var</span> nameSet = <span class="keyword">new</span> <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt;.from(names);</span><br></pre></td></tr></table></figure><p>下列代码创建了一个含有整型的键以及值为 View 的 map：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> views = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">int</span>,view&gt;();</span><br></pre></td></tr></table></figure><h3 id="泛型集合及其包含的类型"><a href="#泛型集合及其包含的类型" class="headerlink" title="泛型集合及其包含的类型"></a>泛型集合及其包含的类型</h3><p>Dart 泛型类型是被具体化的，意思就是它们在整个运行时间中都携带着类型信息。举个例子，你可以测试一个集合中的类型甚至是在生产模式中：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">names.addAll([<span class="string">'Seth'</span>, <span class="string">'Kathy'</span>, <span class="string">'Lars'</span>]);</span><br><span class="line"><span class="built_in">print</span>(names <span class="keyword">is</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>然而，is 表达式检查的仅仅是集合中的类型并不是其中的对象。在生产模式下，一个 List<string>中可能含有一些非字符项，解决方法可以是逐项检查其类型或者在异常处理程序中加入数据项操作代码 (参见 <a href="">异常</a>)。</string></p><blockquote><p>相比之下，Java 中的泛型使用擦除，这意味着通用类型参数在运行时被删除。在 Java 中，您可以测试对象是否为 List，但是不能测试它是否为 List<string></string></p></blockquote><h3 id="限制参数化类型"><a href="#限制参数化类型" class="headerlink" title="限制参数化类型"></a>限制参数化类型</h3><p>实现通用类型时，可能需要限制其参数的类型。你可以使用 extends 来做到这一点</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// T 必须是某个类或者类的后代</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">SomeBaseClass</span>&gt; </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Extender</span> <span class="keyword">extends</span> <span class="title">SomeBaseClass</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main () &#123;</span><br><span class="line">  <span class="comment">// 在&lt;&gt;中使用某个类或者其子类都可以</span></span><br><span class="line">  <span class="keyword">var</span> someBaseClassFoo = <span class="keyword">new</span> Foo&lt;SomeBaseClass&gt;();</span><br><span class="line">  <span class="keyword">var</span> extenderFoo = <span class="keyword">new</span> Foo&lt;Extender&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不使用&lt;&gt;也可以</span></span><br><span class="line">  <span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定任何非 SomeBaseClass 类型会导致警告（检查模式中是运行时错误 runtime error）</span></span><br><span class="line">  <span class="comment">// var objectFoo = new Foo&lt;Object&gt;();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用泛型函数"><a href="#使用泛型函数" class="headerlink" title="使用泛型函数"></a>使用泛型函数</h3><p>最初，Dart 的泛型支持仅限于类。一种较新的语法（称为泛型方法，SDK1.21 之后）允许在方法和函数上使用类型参数：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">T first&lt;T&gt;(<span class="built_in">List</span>&lt;T&gt; ts) &#123;</span><br><span class="line">  <span class="comment">// ... 一些初始化工作或者错误检查...</span></span><br><span class="line">  T tmp = ts[<span class="number">0</span>];</span><br><span class="line">  <span class="comment">// ... 做一些额外的检查或处理...</span></span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型参数（<t>）允许你在多个位置使用类型参数 T：</t></p><ul><li>函数的返回类型 (T)</li><li>参数类型 (List<t>)</t></li><li>局部变量类型 (T tmp)<br>更多关于泛型函数，详见 <a href="https://github.com/dart-lang/sdk/blob/master/pkg/dev_compiler/doc/GENERIC_METHODS.md" target="_blank" rel="noopener">泛型方法</a></li></ul><hr><h2 id="库和可见性-Libraries-and-visibility"><a href="#库和可见性-Libraries-and-visibility" class="headerlink" title="库和可见性 Libraries and visibility"></a>库和可见性 Libraries and visibility</h2><p>import，library 指令可以帮助创建一个模块化的，可共享的代码库。库不仅提供了 API，还提供隐私单元：以下划线 ( _ ) 开头的标识符只对内部库可见。每个 Dartapp 就是一个库，即使它不使用库指令。</p><p>库可以分布式使用包。见 <a href="https://www.dartlang.org/tools/pub" target="_blank" rel="noopener">Pub Package and Asset Manager</a> 中有关 pub(SDK 中的一个包管理器）。</p><h3 id="使用库"><a href="#使用库" class="headerlink" title="使用库"></a>使用库</h3><p>使用 import 来指定如何从一个库命名空间用于其他库的范围。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:html'</span>; <span class="comment">// Dart Web 应用一般采用这个库 dart:html</span></span><br></pre></td></tr></table></figure><p>唯一需要 import 的参数是一个指向库的 URI。对于内置库，URI 中具有特殊 dart: scheme。对于其他库，你可以使用文件系统路径或 package: scheme。包 package：scheme 指定由程序包管理器（如 pub 工具）提供的库。例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:io'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:mylib/mylib.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:utils/utils.dart'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注：URI 代表统一资源标识符。网址（统一资源定位器）是一种常见的 URI 的。</p></blockquote><h3 id="指定库前缀"><a href="#指定库前缀" class="headerlink" title="指定库前缀"></a>指定库前缀</h3><p>如果导入两个库是有冲突的标识符，那么你可以指定一个或两个库的前缀。例如，如果 library1 和 library2 都有一个元素类，那么你可能有这样的代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:lib1/lib1.dart'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:lib2/lib2.dart'</span> <span class="keyword">as</span> lib2;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">var</span> element1 = <span class="keyword">new</span> <span class="built_in">Element</span>(); <span class="comment">// 使用 lib1 里的元素</span></span><br><span class="line"><span class="keyword">var</span> element2 = <span class="keyword">new</span> lib2.<span class="built_in">Element</span>();       <span class="comment">// 使用 lib2 里的元素</span></span><br></pre></td></tr></table></figure><h3 id="导入部分库"><a href="#导入部分库" class="headerlink" title="导入部分库"></a>导入部分库</h3><p>如果想使用的库一部分，你可以选择性导入库。例如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只导入 foo 库</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:lib1/lib1.dart'</span> show foo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入所有除了 foo</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:lib2/lib2.dart'</span> hide foo;</span><br></pre></td></tr></table></figure><h3 id="延迟加载库"><a href="#延迟加载库" class="headerlink" title="延迟加载库"></a>延迟加载库</h3><p>延迟 (deferred) 加载（也称为懒 (lazy) 加载）允许应用程序按需加载库。下面是当你可能会使用延迟加载某些情况：</p><ul><li>为了减少应用程序的初始启动时间</li><li>例如，要执行 A / B 测试 ( A/B testing) - 尝试算法的替代实现</li><li>加载很少使用的功能，例如可选的屏幕和对话框</li></ul><p>为了延迟加载一个库，你必须使用 deferred as 先导入它:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:deferred/hello.dart'</span> deferred <span class="keyword">as</span> hello;</span><br></pre></td></tr></table></figure><p>当需要库时，使用该库的调用标识符调用 LoadLibrary（）:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">greet() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">await</span> hello.loadLibrary();</span><br><span class="line">  hello.printGreeting();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，await 关键字将暂停执行，直到库被加载。更多关于 async 和 await 详见 <a href="https://www.dartlang.org/guides/language/language-tour#asynchrony-support" target="_blank" rel="noopener">异步支持</a></p><p>您可以在库中多次调用 loadLibrary( )。该库仅加载一次。<br>当您使用延迟加载，要注意一下几点：</p><ul><li>延迟库的常量在其作为导入文件时不是常量。记住，这些常量不存在，直到迟库被加载完成。</li><li>你不能在导入文件中使用延迟库常量的类型。相反，考虑将接口类型移到同时由延迟库和导入文件导入的库。</li><li>Dart 隐式地将 loadLibrary（）插入到使用 deferred 作为命名空间定义的命名空间中。调用 LoadLibrary（）函数返回一个 Future 对象（类似于 JS 的 promise 对象）。</li></ul><h3 id="库的实现"><a href="#库的实现" class="headerlink" title="库的实现"></a>库的实现</h3><p>详见 <a href="https://www.dartlang.org/guides/libraries/create-library-packages" target="_blank" rel="noopener">创建库文件包</a></p><hr><h2 id="异步的支持-Asynchrony-support"><a href="#异步的支持-Asynchrony-support" class="headerlink" title="异步的支持 Asynchrony support"></a>异步的支持 Asynchrony support</h2><p>Dart 添加了一些新的语言特性用于支持异步编程。最通常使用的特性是 async 方法和 await 表达式。Dart 库大多方法返回 Future 和 Stream 对象。这些方法是异步的：它们在设置一个可能的耗时操作（比如 I/O 操作）之后返回，而无需等待操作完成。</p><p>当你需要使用 Future 来表示一个值时，你有两个选择：</p><ul><li>使用 async 和 await</li><li>使用 <a href="https://www.dartlang.org/guides/libraries/library-tour#future" target="_blank" rel="noopener">Future API</a></li></ul><p>同样的，当你需要从 Stream 获取值的时候，你有两个选择:</p><ul><li>使用 async 和一个异步的 for 循环 (await for)</li><li>使用 <a href="https://www.dartlang.org/guides/libraries/library-tour#stream" target="_blank" rel="noopener">Stream API</a></li></ul><p>要使用 await，代码必须用 async 标记函数:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">checkVersion() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> version = <span class="keyword">await</span> lookUpVersion();</span><br><span class="line">  <span class="keyword">if</span> (version == expectedVersion) &#123;</span><br><span class="line">    <span class="comment">// Do something.</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Do something else.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以使用 try, catch, 和 finally 来处理错误并清理使用了 await 的代码:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  server = <span class="keyword">await</span> HttpServer.bind(InternetAddress.LOOPBACK_IP_V4, <span class="number">4044</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// 响应无法绑定到端口...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="声明异步函数"><a href="#声明异步函数" class="headerlink" title="声明异步函数"></a>声明异步函数</h3><p>一个异步函数是一个由 async 修饰符标记的函数。虽然一个异步函数可能在操作上比较耗时，但是它可以在任何方法体执行之前立即返回。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">checkVersion() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lookUpVersion() <span class="keyword">async</span> =&gt; <span class="comment">/* ... */</span>;</span><br></pre></td></tr></table></figure><p>在函数中添加关键字 async 使得它返回一个 Future 对象。<br>比如，考虑一下这个同步函数，它将返回一个字符串：<br>String lookUpVersionSync() =&gt; ‘1.0.0’;<br>更改它成为异步方法 - 因为在之后的实现中将会非常耗时 - 它的返回值是一个 Future 对象：<br>Future<string>lookUpVersion() async =&gt; ‘1.0.0’;<br>请注意函数体不需要使用 Future API，如果必要的话 Dart 将会自己创建 Future 对象。</string></p><h3 id="使用带-future-的-await-表达式"><a href="#使用带-future-的-await-表达式" class="headerlink" title="使用带 future 的 await 表达式"></a>使用带 future 的 await 表达式</h3><p>在异步方法中你可以使用 await 多次。比如，下列代码为了得到函数的结果一共等待了三次：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> entrypoint = <span class="keyword">await</span> findEntrypoint();</span><br><span class="line"><span class="keyword">var</span> exitCode = <span class="keyword">await</span> runExecutable(entrypoint, args);</span><br><span class="line"><span class="keyword">await</span> flushThenExit(exitCode);</span><br></pre></td></tr></table></figure><p>在 await 表达式中， 表达式 的值通常是一个 Future 对象；如果不是，那么这个值会自动转为 Future。这个 Future 对象表明了表达式应该返回一个对象。await 表达式 的值就是返回的一个对象。在对象可用之前，await 表达式将会一直处于暂停状态。</p><p>如果 await 没有起作用，请确认它是一个异步方法。比如，在你的 main() 函数里面使用 await，main() 的函数体必须被 async 标记:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main() <span class="keyword">async</span> &#123;</span><br><span class="line">  checkVersion();</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'In main: version is <span class="subst">$&#123;await lookUpVersion()&#125;</span>'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结合-streams-使用异步循环"><a href="#结合-streams-使用异步循环" class="headerlink" title="结合 streams 使用异步循环"></a>结合 streams 使用异步循环</h3><p>一个异步循环具有以下形式：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="keyword">for</span> (variable declaration <span class="keyword">in</span> expression) &#123;</span><br><span class="line">  <span class="comment">// 每次 stream 发出一个值时执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表达式 的值 the value of expression 必须有 Stream 类型（流类型）。执行过程如下：</p><ul><li>在 stream 发出一个值之前等待</li><li>执行 for 循环的主体，把变量设置为发出的值</li><li>重复 1 和 2，直到 Stream 关闭</li></ul><p>如果要停止监听 stream ，你可以使用 break 或者 return 语句，跳出循环并取消来自 stream 的订阅 。<br>如果一个异步 for 循环没有正常运行，请确认它是一个异步方法。 比如，在应用的 main() 方法中使用异步的 for 循环时，main() 的方法体必须被 async 标记：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main() <span class="keyword">async</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">for</span> (<span class="keyword">var</span> request <span class="keyword">in</span> requestServer) &#123;</span><br><span class="line">    handleRequest(request);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多关于异步编程的信息，请看 <a href="https://www.dartlang.org/guides/libraries/library-tour#dartasync---asynchronous-programming" target="_blank" rel="noopener">dart:async</a> 库的介绍。<br>也可以看文章 <a href="https://www.dartlang.org/articles/language/await-async" target="_blank" rel="noopener">Dart Language Asynchrony Support: Phase 1</a> 和 <a href="https://www.dartlang.org/articles/language/beyond-async" target="_blank" rel="noopener">Dart Language Asynchrony Support: Phase 2</a> 和 <a href="https://www.dartlang.org/guides/language/spec" target="_blank" rel="noopener">the Dart language specification</a>。</p><hr><h2 id="可调用类-Callable-classes"><a href="#可调用类-Callable-classes" class="headerlink" title="可调用类 Callable classes"></a>可调用类 Callable classes</h2><p>为了允许你的 Dart 类可以像函数一样被调用，实现了 call（）方法。<br>在下面的例子中，WannabeFunction 类定义了一个 call（）函数，它需要三个字符串并用空格串联它们，并加上感叹号：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WannabeFunction</span> </span>&#123;</span><br><span class="line">  call(<span class="built_in">String</span> a, <span class="built_in">String</span> b, <span class="built_in">String</span> c) =&gt; <span class="string">'$a $b $c!'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> wf = <span class="keyword">new</span> WannabeFunction();</span><br><span class="line">  <span class="keyword">var</span> out = wf(<span class="string">"Hi"</span>,<span class="string">"there,"</span>,<span class="string">"gang"</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'$out'</span>);  <span class="comment">// Hi there, gang!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多关于类函数，详见 <a href="https://www.dartlang.org/articles/language/emulating-functions" target="_blank" rel="noopener">将类用作函数</a>。</p>]]></content>
      
      <categories>
          
          <category> Dart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>masm for mac</title>
      <link href="/2017/11-masm.html"/>
      <url>/2017/11-masm.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Mac 推荐使用的汇编语法是 nasm，但学校实验用的是 masm，Windows 上有专门的 masm 编辑器，Mac 上想要编写 masm 会麻烦一点，需要用到 DOSBox 和一些编译链接文件，下面就是折腾的过程</p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="到用户目录克隆文件"><a href="#到用户目录克隆文件" class="headerlink" title="到用户目录克隆文件"></a>到用户目录克隆文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/wangriyu/masm-for-mac.git</span><br></pre></td></tr></table></figure><p><code>~/masm-for-mac</code> 目录下应有以下文件，masm5 是主要的编译链接文件，DOSBox.app 提供沙盒环境，src 中有一些事例代码</p><p><img src="/images/masm/files.png" alt="image"></p><h3 id="打开-DOSBox，输入-mount-指令挂载虚拟磁盘，盘符为-c，目录是克隆下来的-masm5-文件夹路径，挂载成功后输入-c-进入虚拟磁盘，再输入-dir-列出目录文件，输入-HELP-查看帮助，与-Dos-环境的命令一致"><a href="#打开-DOSBox，输入-mount-指令挂载虚拟磁盘，盘符为-c，目录是克隆下来的-masm5-文件夹路径，挂载成功后输入-c-进入虚拟磁盘，再输入-dir-列出目录文件，输入-HELP-查看帮助，与-Dos-环境的命令一致" class="headerlink" title="打开 DOSBox，输入 mount 指令挂载虚拟磁盘，盘符为 c，目录是克隆下来的 masm5 文件夹路径，挂载成功后输入 c: 进入虚拟磁盘，再输入 dir 列出目录文件，输入 HELP 查看帮助，与 Dos 环境的命令一致"></a>打开 DOSBox，输入 mount 指令挂载虚拟磁盘，盘符为 c，目录是克隆下来的 masm5 文件夹路径，挂载成功后输入 c: 进入虚拟磁盘，再输入 dir 列出目录文件，输入 HELP 查看帮助，与 Dos 环境的命令一致</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mount c ~/masm-for-mac/masm5</span><br><span class="line"></span><br><span class="line">$ c:</span><br><span class="line"></span><br><span class="line">$ dir</span><br></pre></td></tr></table></figure><p><img src="/images/masm/mount.png" alt="image"></p><h3 id="用自己常用的文本编辑器，比如-VSCode-打开文件目录，在-masm5-下新建-asm-文件-src-中有一些事例-，用-masm-语法编写汇编代码，然后通过-masm-汇编、link-链接后就可以运行输出"><a href="#用自己常用的文本编辑器，比如-VSCode-打开文件目录，在-masm5-下新建-asm-文件-src-中有一些事例-，用-masm-语法编写汇编代码，然后通过-masm-汇编、link-链接后就可以运行输出" class="headerlink" title="用自己常用的文本编辑器，比如 VSCode 打开文件目录，在 masm5 下新建 asm 文件 (src 中有一些事例)，用 masm 语法编写汇编代码，然后通过 masm 汇编、link 链接后就可以运行输出"></a>用自己常用的文本编辑器，比如 VSCode 打开文件目录，在 masm5 下新建 asm 文件 (src 中有一些事例)，用 masm 语法编写汇编代码，然后通过 masm 汇编、link 链接后就可以运行输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ masm hello.asm</span><br><span class="line">// 连按三次回车</span><br><span class="line">$ link hello.obj</span><br><span class="line">// 连按三次回车</span><br><span class="line">$ hello.exe</span><br></pre></td></tr></table></figure><p><img src="/images/masm/hello.png" alt="image"></p><h2 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h2><h3 id="平均数计算，连续输入十个-10-以下的数，程序计算去掉一个最小数，去掉一个最大数后八个数的平均值，从显示器显示出来，结果保留-3-位小数"><a href="#平均数计算，连续输入十个-10-以下的数，程序计算去掉一个最小数，去掉一个最大数后八个数的平均值，从显示器显示出来，结果保留-3-位小数" class="headerlink" title="平均数计算，连续输入十个 10 以下的数，程序计算去掉一个最小数，去掉一个最大数后八个数的平均值，从显示器显示出来，结果保留 3 位小数"></a>平均数计算，连续输入十个 10 以下的数，程序计算去掉一个最小数，去掉一个最大数后八个数的平均值，从显示器显示出来，结果保留 3 位小数</h3><p><img src="/images/masm/average.png" alt="average"></p><h3 id="按-15-行-X16-列的表格显示表示-ASCII-码为-10H—100H-的所有字符，即以行为主的顺序及-ASCII-码递增的次序一次显示对应的字符，每-16-个字符为一行，每行中的相邻的字符之间用空白（ASCII-为-0）隔开"><a href="#按-15-行-X16-列的表格显示表示-ASCII-码为-10H—100H-的所有字符，即以行为主的顺序及-ASCII-码递增的次序一次显示对应的字符，每-16-个字符为一行，每行中的相邻的字符之间用空白（ASCII-为-0）隔开" class="headerlink" title="按 15 行 X16 列的表格显示表示 ASCII 码为 10H—100H 的所有字符，即以行为主的顺序及 ASCII 码递增的次序一次显示对应的字符，每 16 个字符为一行，每行中的相邻的字符之间用空白（ASCII 为 0）隔开"></a>按 15 行 X16 列的表格显示表示 ASCII 码为 10H—100H 的所有字符，即以行为主的顺序及 ASCII 码递增的次序一次显示对应的字符，每 16 个字符为一行，每行中的相邻的字符之间用空白（ASCII 为 0）隔开</h3><p><img src="/images/masm/test1.png" alt="test1"></p><h3 id="程序接受用户键入的一个关键字以及一个句子，如果句子中不包含关键字则显示-“No-match-”；如果句子中包含关键字则显示-“match-”，且把该字在句子中的位置用十六进制数显示出来"><a href="#程序接受用户键入的一个关键字以及一个句子，如果句子中不包含关键字则显示-“No-match-”；如果句子中包含关键字则显示-“match-”，且把该字在句子中的位置用十六进制数显示出来" class="headerlink" title="程序接受用户键入的一个关键字以及一个句子，如果句子中不包含关键字则显示 “No match!”；如果句子中包含关键字则显示 “match!”，且把该字在句子中的位置用十六进制数显示出来"></a>程序接受用户键入的一个关键字以及一个句子，如果句子中不包含关键字则显示 “No match!”；如果句子中包含关键字则显示 “match!”，且把该字在句子中的位置用十六进制数显示出来</h3><p><img src="/images/masm/test2.png" alt="test2"></p><h3 id="程序接受用户键入一行字符（字符个数不超过-80-个，该字符串用回车符结束），并按字母、数字、其它字符分类计数，然后将结果存入以-letter、digit-和-other-为名的存储单元中"><a href="#程序接受用户键入一行字符（字符个数不超过-80-个，该字符串用回车符结束），并按字母、数字、其它字符分类计数，然后将结果存入以-letter、digit-和-other-为名的存储单元中" class="headerlink" title="程序接受用户键入一行字符（字符个数不超过 80 个，该字符串用回车符结束），并按字母、数字、其它字符分类计数，然后将结果存入以 letter、digit 和 other 为名的存储单元中"></a>程序接受用户键入一行字符（字符个数不超过 80 个，该字符串用回车符结束），并按字母、数字、其它字符分类计数，然后将结果存入以 letter、digit 和 other 为名的存储单元中</h3><p><img src="/images/masm/test3.png" alt="test3"></p><h3 id="添加查找电话号码本，程序可接受输入人名及相应的电话号码，并把它们加入电话号码表中，程序可按人名对电话号码表重新排序，程序可接受需要查询电话号码的人名，并从电话号码表中查出其电话号码"><a href="#添加查找电话号码本，程序可接受输入人名及相应的电话号码，并把它们加入电话号码表中，程序可按人名对电话号码表重新排序，程序可接受需要查询电话号码的人名，并从电话号码表中查出其电话号码" class="headerlink" title="添加查找电话号码本，程序可接受输入人名及相应的电话号码，并把它们加入电话号码表中，程序可按人名对电话号码表重新排序，程序可接受需要查询电话号码的人名，并从电话号码表中查出其电话号码"></a>添加查找电话号码本，程序可接受输入人名及相应的电话号码，并把它们加入电话号码表中，程序可按人名对电话号码表重新排序，程序可接受需要查询电话号码的人名，并从电话号码表中查出其电话号码</h3><p><img src="/images/masm/test4.png" alt="test4"></p><h2 id="DOSBox-进阶玩法"><a href="#DOSBox-进阶玩法" class="headerlink" title="DOSBox 进阶玩法"></a>DOSBox 进阶玩法</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>在 DOSBox 输入 <code>intro special</code> 可以查看热键，比如 alt(option) + enter(return) 切换全屏，但有些键在 mac 上好像没用</p><h3 id="运行-Dos-游戏和旧应用"><a href="#运行-Dos-游戏和旧应用" class="headerlink" title="运行 Dos 游戏和旧应用"></a>运行 Dos 游戏和旧应用</h3><p>在 DOSBox 中可以运行 exe 文件，一些很老的 Dos 游戏和旧应用也可以运行，网上有很多经典游戏的资源，可以用 DOSBox 尝试下</p>]]></content>
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> masm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dart 语法入门 III</title>
      <link href="/2017/11-Dart%20III.html"/>
      <url>/2017/11-Dart%20III.html</url>
      <content type="html"><![CDATA[<h2 id="类-Class"><a href="#类-Class" class="headerlink" title="类 Class"></a>类 Class</h2><p>Dart 是一种面向对象语言，包含类和基于 mixin 的继承两部分。每个对象是一个类的实例，并且 Object 是所有类的父类。基于 mixin 的继承指的是每个类（除了 Object ）都只有一个父类，类体还可以在多个类继承中被重用。</p><p>要创建一个对象，你可以使用 new 关键词并在其后跟上一个构造函数。构造函数可以写成&lt;类名&gt;或者&lt;类名. 标识符&gt;形式。例如:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonData = JSON.decode(<span class="string">'&#123;"x":1, "y":2&#125;'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 Point() 创建一个点。</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 Point().fromJson() 创建一个点。</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point.fromJson(jsonData);</span><br></pre></td></tr></table></figure><p>对象的成员分为函数和数据两类（各自的方法和实例变量）。当你调用一个方法时，通过一个对象来调用它的：该方法可访问该对象的方法和数据。用 . 指向对象的方法和数据成员:<br></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给 y 赋值。</span></span><br><span class="line">p.y = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 y 的值。</span></span><br><span class="line"><span class="keyword">assert</span>(p.y == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 p 对象调用 distanceTo() 。</span></span><br><span class="line"><span class="built_in">num</span> distance = p.distanceTo(<span class="keyword">new</span> Point(<span class="number">4</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用?. 代替. 来避免操作对象为 null 时产生的异常</span></span><br><span class="line">p?.y = <span class="number">4</span>; <span class="comment">// 如果 p 不为空则设置 p.y 等于 4</span></span><br></pre></td></tr></table></figure><p></p><p>当你想对一个对象的成员进行一系列操作时，用级联操作（ cascade ）：<br></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">querySelector</span>(<span class="string">'#button'</span>) <span class="comment">// 获取一个对象。</span></span><br><span class="line">    ..text = <span class="string">'Confirm'</span>   <span class="comment">// 调用他的成员。</span></span><br><span class="line">    ..classes.add(<span class="string">'important'</span>)</span><br><span class="line">    ..onClick.listen((e) =&gt; <span class="built_in">window</span>.alert(<span class="string">'Confirmed!'</span>));</span><br></pre></td></tr></table></figure><p></p><p>一些类提供常量构造函数，要创建一个编译时常量构造函数，使用 const 关键字代替 new ：<br></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">const</span> ImmutablePoint(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">const</span> ImmutablePoint(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(identical(a, b)); <span class="comment">// 他们是相同的实例！</span></span><br></pre></td></tr></table></figure><p></p><p>如果想在运行时获取对象的类型，可以使用 runtimeType 属性：<br></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'The type of a is <span class="subst">$&#123;a.runtimeType&#125;</span>'</span>);</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><p>声明实例变量：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x; <span class="comment">// 声明实例变量 x ，默认值为 null 。</span></span><br><span class="line">  <span class="built_in">num</span> y; <span class="comment">// 声明实例变量 y ，默认值为 null 。</span></span><br><span class="line">  <span class="built_in">num</span> z = <span class="number">0</span>; <span class="comment">// 声明实例变量 z ，初始化为 0 。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的实例变量会自动生成一个隐式的 getter 方法。 Non-final 实例变量也会自动生成一个隐式的 setter 方法。有关详细信息，参见 <a href="https://www.dartlang.org/guides/language/language-tour#getters-and-setters" target="_blank" rel="noopener">getter&amp;setter</a>。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x;</span><br><span class="line">  <span class="built_in">num</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> point = <span class="keyword">new</span> Point();</span><br><span class="line">  point.x = <span class="number">4</span>;          <span class="comment">// 用 setter 方法得到 x 。</span></span><br><span class="line">  <span class="keyword">assert</span>(point.x == <span class="number">4</span>); <span class="comment">// 用 getter 方法得到 x 。</span></span><br><span class="line">  <span class="keyword">assert</span>(point.y == <span class="keyword">null</span>); <span class="comment">// 值为 null 。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>要声明一个构造函数，只需创建一个与类同名的方法（或者加上一个额外的标识符命名构造函数的描述）。构造函数最常见的形式，就是自动生成的构造函数，下面创建一个类的新实例：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x;</span><br><span class="line">  <span class="built_in">num</span> y;</span><br><span class="line"></span><br><span class="line">  Point(<span class="built_in">num</span> x, <span class="built_in">num</span> y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x;</span><br><span class="line">    <span class="keyword">this</span>.y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 有个更好的方法来实现。用语法糖来设置 x，y: Point(this.x, this.y)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>默认构造函数: 如果你不声明一个构造函数，系统会提供默认构造函数。默认构造函数没有参数，它将调用父类的无参数构造函数。</p></li><li><p>子类不继承父类的构造函数。子类只有默认构造函数。（无参数，没有名字的构造函数）</p></li><li><p>命名构造函数。使用命名构造函数可以为一个类声明多个构造函数，或者说是提供额外的声明</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x;</span><br><span class="line">  <span class="built_in">num</span> y;</span><br><span class="line"></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 命名构造函数</span></span><br><span class="line">  Point.fromJson(<span class="built_in">Map</span> json) &#123;</span><br><span class="line">    x = json[<span class="string">'x'</span>];</span><br><span class="line">    y = json[<span class="string">'y'</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用非默认的父类的构造函数。默认情况下，在子类的构造函数将会调用父类的无参数默认构造函数。如果父类没有构造函数，则必须手动调用父类的构造函数中的一个。在冒号（：）之后、构造函数之前指定父类的构造函数（如果有的话）。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> firstName;</span><br><span class="line">  Person.fromJson(<span class="built_in">Map</span> data) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'in Person'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Person 没有默认构造函数，子类必需调用 super.&lt;命名构造函数&gt;</span></span><br><span class="line">  Employee.fromJson(<span class="built_in">Map</span> data) : <span class="keyword">super</span>.fromJson(data) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'in Employee'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> emp = <span class="keyword">new</span> Employee.fromJson(&#123;&#125;);</span><br><span class="line">  <span class="comment">// 输出:</span></span><br><span class="line">  <span class="comment">// in Person</span></span><br><span class="line">  <span class="comment">// in Employee</span></span><br><span class="line">  <span class="keyword">if</span> (emp <span class="keyword">is</span> Person) &#123; <span class="comment">// 类型检查</span></span><br><span class="line">    emp.firstName = <span class="string">'Bob'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  (emp <span class="keyword">as</span> Person).firstName = <span class="string">'Bob'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用父类构造函数前会检测参数，这个参数可以是一个表达式作为函数调用：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  Employee() : <span class="keyword">super</span>.fromJson(findDefaultData());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️警告：父类构造函数的参数不能访问 this 。例如，参数可调用静态方法但是不能调用实例方法。</p><hr><h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><p>除了调用父类构造函数，你也可以在构造函数体运行之前初始化实例变量。用逗号隔开使其分别初始化。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x;</span><br><span class="line">  <span class="built_in">num</span> y;</span><br><span class="line"></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化列表在构造函数运行前设置实例变量。</span></span><br><span class="line"></span><br><span class="line">  Point.fromJson(<span class="built_in">Map</span> jsonMap)</span><br><span class="line">      : x = jsonMap[<span class="string">'x'</span>],</span><br><span class="line">        y = jsonMap[<span class="string">'y'</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'In Point.fromJson(): ($x, $y)'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️警告：右手边的初始化程序无法访问 this 关键字</p><p>以下示例在初始化程序列表中初始化三个 final 字段<br></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> x;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> y;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> distanceFromOrigin;</span><br><span class="line"></span><br><span class="line">  Point(x, y)</span><br><span class="line">      : x = x,</span><br><span class="line">        y = y,</span><br><span class="line">        distanceFromOrigin = sqrt(x * x + y * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main () &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">2</span>,  <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">print</span>(p.distanceFromOrigin);  <span class="comment">// 输出 3.605551275463989</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="重定向构造函数"><a href="#重定向构造函数" class="headerlink" title="重定向构造函数"></a>重定向构造函数</h3><p>有时一个构造函数的目的只是重定向到同一个类中的另一个构造函数。如果一个重定向的构造函数的主体为空，那么调用这个构造函数的时候，直接在冒号后面调用这个构造函数即可。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x;</span><br><span class="line">  <span class="built_in">num</span> y;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 主构造函数</span></span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 主函数的委派</span></span><br><span class="line">  Point.alongXAxis(<span class="built_in">num</span> x) : <span class="keyword">this</span>(x, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="静态构造函数"><a href="#静态构造函数" class="headerlink" title="静态构造函数"></a>静态构造函数</h3><p>如果你的类产生的对象永远不会改变，你可以让这些对象成为编译时常量。为此，需要定义一个 const 构造函数并确保所有的实例变量都是 final 的。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImmutablePoint</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> x;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">num</span> y;</span><br><span class="line">  <span class="keyword">const</span> ImmutablePoint(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> ImmutablePoint origin =</span><br><span class="line">      <span class="keyword">const</span> ImmutablePoint(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="工厂构造函数"><a href="#工厂构造函数" class="headerlink" title="工厂构造函数"></a>工厂构造函数</h3><p>当实现一个使用 factory 关键词修饰的构造函数时，这个构造函数不必创建类的新实例。例如，工厂构造函数可能从缓存返回实例，或者它可能返回子类型的实例。 下面的示例演示一个工厂构造函数从缓存返回的对象：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">bool</span> mute = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Logger&gt; _cache = &lt;<span class="built_in">String</span>, Logger&gt;&#123;&#125;; <span class="comment">//  _cache 是一个私有库，因为名字前有个 _</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> Logger (<span class="built_in">String</span> name)  &#123;</span><br><span class="line">    <span class="keyword">if</span> (_cache.containsKey(name)) &#123;</span><br><span class="line">      <span class="keyword">return</span> _cache[name];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> logger = <span class="keyword">new</span> Logger._internal(name);</span><br><span class="line">      _cache[name] = logger;</span><br><span class="line">      <span class="keyword">return</span> logger;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Logger._internal(<span class="keyword">this</span>.name);</span><br><span class="line">  <span class="keyword">void</span> log (<span class="built_in">String</span> msg) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!mute) &#123;</span><br><span class="line">      <span class="built_in">print</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>⚠️注：工厂构造函数不能用 this。</p><p>调用一个工厂构造函数，你需要使用 new 关键字：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> logger = <span class="keyword">new</span> Logger(<span class="string">'UI'</span>);</span><br><span class="line">logger.log(<span class="string">'Button clicked'</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法就是为对象提供行为的函数。</p><ul><li>实例方法<br>对象的实例方法可以访问实例变量和 this 。以下示例中的 distanceTo() 方法是实例方法的一个例子：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x;</span><br><span class="line">  <span class="built_in">num</span> y;</span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">num</span> distanceTo (Point other) &#123;</span><br><span class="line">    <span class="keyword">var</span> dx = x - other.x;</span><br><span class="line">    <span class="keyword">var</span> dy = y - other.y;</span><br><span class="line">    <span class="keyword">return</span> sqrt(dx * dx + dy * dy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setters 和 Getters: 是一种提供对方法属性读和写的特殊方法。每个实例变量都有一个隐式的 getter 方法，如果合适的话可以加上 setter 方法。你可以通过实现 getters 和 setters 来创建附加属性，也就是直接使用 get 和 set 关键词：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> left;</span><br><span class="line">  <span class="built_in">num</span> top;</span><br><span class="line">  <span class="built_in">num</span> width;</span><br><span class="line">  <span class="built_in">num</span> height;</span><br><span class="line"></span><br><span class="line">  Rectangle(<span class="keyword">this</span>.left, <span class="keyword">this</span>.top, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义两个计算属性: right and bottom</span></span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> right             =&gt; left + width;</span><br><span class="line">      <span class="keyword">set</span> right(<span class="built_in">num</span> value)  =&gt; left = value - width;</span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> bottom            =&gt; top + height;</span><br><span class="line">      <span class="keyword">set</span> bottom(<span class="built_in">num</span> value) =&gt; top = value - height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main () &#123;</span><br><span class="line">  <span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle(<span class="number">3</span>, <span class="number">4</span>, <span class="number">20</span>, <span class="number">15</span>);</span><br><span class="line">  <span class="keyword">assert</span>(rect.left == <span class="number">3</span>);</span><br><span class="line">  rect.right = <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">assert</span>(rect.left == <span class="number">-8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借助于 getter 和 setter，你可以直接使用实例变量，并且在不改变客户代码的情况下把他们包装成方法。</p><p>⚠️注：不论是否显式地定义了一个 getter，类似增量（++）的操作符，都能以预期的方式工作。为了避免产生任何向着不期望的方向的影响，操作符一旦调用 getter ，就会把他的值存在临时变量里。</p><ul><li>抽象方法<br>Instance，getter 和 setter 方法可以是抽象的，也就是定义一个接口，但是把实现交给其他的类。要创建一个抽象方法，使用分号 (;) 代替方法体：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Doer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ... 定义实例变量和方法...</span></span><br><span class="line">  <span class="keyword">void</span> doSomething(); <span class="comment">// 定义一个抽象方法，没有 body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EffectiveDoer</span> <span class="keyword">extends</span> <span class="title">Doer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> doSomething() &#123;</span><br><span class="line">    <span class="comment">// ... 提供一个实现，所以这里的方法不是抽象的...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用抽象方法会导致运行时错误。</p><hr><h3 id="重载操作符"><a href="#重载操作符" class="headerlink" title="重载操作符"></a>重载操作符</h3><p>你可以重写在下表中列出的操作符。例如，如果你定义了一个向量类，你可以定义一个 + 方法来加两个向量。</p><table><thead><tr><th style="text-align:center">&lt;</th><th style="text-align:center">+</th><th style="text-align:center">I</th><th style="text-align:center">[ ]</th></tr></thead><tbody><tr><td style="text-align:center">&gt;</td><td style="text-align:center">/</td><td style="text-align:center">^</td><td style="text-align:center">[ ]=</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">~/</td><td style="text-align:center">&amp;</td><td style="text-align:center">~</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">*</td><td style="text-align:center">&lt;&lt;</td><td style="text-align:center">==</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">%</td><td style="text-align:center">&gt;&gt;</td></tr></tbody></table><p>以下是一个类中重写 + 和 - 操作符的例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> x;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> y;</span><br><span class="line">  <span class="keyword">const</span> Vector(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重写 + (a + b).</span></span><br><span class="line">  Vector <span class="keyword">operator</span> +(Vector v) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Vector(x + v.x, y + v.y);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 重写 - (a - b).</span></span><br><span class="line">  Vector <span class="keyword">operator</span> -(Vector v) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Vector(x - v.x, y - v.y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main () &#123;</span><br><span class="line">  <span class="keyword">final</span> v = <span class="keyword">new</span> Vector(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">final</span> w = <span class="keyword">new</span> Vector(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// v == (2, 3)</span></span><br><span class="line">  <span class="keyword">assert</span>(v.x == <span class="number">2</span> &amp;&amp; v.y == <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// v + w == (4, 5)</span></span><br><span class="line">  <span class="keyword">assert</span>((v + w).x == <span class="number">4</span> &amp;&amp; (v + w).y == <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// v - w == (0, 1)</span></span><br><span class="line">  <span class="keyword">assert</span>((v - w).x == <span class="number">0</span> &amp;&amp; (v - w).y == <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dart 中的每个对象自动提供一个整数哈希码，因此可以用作 map 的一个键。但是，你可以重写 hashCode getter 来生成自定义哈希码。如果你这样做，你可能也想重写 == 运算符。相等的（通过 ==）的对象必须具有相同的哈希码。哈希码不一定是唯一的，但是它具有良好的分布性。<br>重写 == 和 hashCode 例子:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> firstName, lastName;</span><br><span class="line"></span><br><span class="line">  Person(<span class="keyword">this</span>.firstName, <span class="keyword">this</span>.lastName);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 Effective Java 中的策略重写 hashCode</span></span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> hashCode &#123;</span><br><span class="line">    <span class="built_in">int</span> result = <span class="number">17</span>;</span><br><span class="line">    result = <span class="number">37</span> * result + firstName.hashCode;</span><br><span class="line">    result = <span class="number">37</span> * result + lastName.hashCode;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果重写了 hashCode，一般也要实现‘==''</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">operator</span> ==(other) &#123;</span><br><span class="line">    <span class="keyword">if</span> (other <span class="keyword">is</span>! Person) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    Person person = other;</span><br><span class="line">    <span class="keyword">return</span> (person.firstName == firstName &amp;&amp; person.lastName == lastName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main () &#123;</span><br><span class="line">  <span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'bob'</span>, <span class="string">'smith'</span>);</span><br><span class="line">  <span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'bob'</span>, <span class="string">'smith'</span>);</span><br><span class="line">  <span class="keyword">var</span> p3 = <span class="string">'not a person'</span>;</span><br><span class="line">  <span class="keyword">assert</span>(p1.hashCode == p2.hashCode);</span><br><span class="line">  <span class="keyword">assert</span>(p1 == p2);</span><br><span class="line">  <span class="keyword">assert</span>(p1 != p3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多关于重载的信息，详见 <a href="https://www.dartlang.org/guides/language/language-tour#extending-a-class" target="_blank" rel="noopener">扩展一个类</a></p><hr><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>使用 abstract 修饰符来定义一个抽象类，该类不能被实例化。抽象类在定义接口的时候非常有用，实际上抽象中也包含一些实现。如果你想让你的抽象类被实例化，请定义一个 工厂构造函数。</p><p>抽象类通常包含 抽象方法。下面是声明一个含有抽象方法的抽象类的例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个类是抽象类，因此不能被实例化。</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractContainer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ... 定义构造函数，域，方法...</span></span><br><span class="line">  <span class="keyword">void</span> updateChildren(); <span class="comment">// 抽象方法。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的类不是抽象类，因此它可以被实例化，即使定义了一个抽象方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpecializedContainer</span> <span class="keyword">extends</span> <span class="title">AbstractContainer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ... 定义更多构造函数，域，方法...</span></span><br><span class="line">  <span class="keyword">void</span> updateChildren() &#123;</span><br><span class="line">    <span class="comment">// ... 实现 updateChildren()...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 抽象方法造成一个警告，但是不会阻止实例化。</span></span><br><span class="line">  <span class="keyword">void</span> doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="隐式接口"><a href="#隐式接口" class="headerlink" title="隐式接口"></a>隐式接口</h3><p>每个类隐式的定义了一个接口，含有类的所有实例和它实现的所有接口。如果你想创建一个支持类 B 的 API 的类 A，但又不想继承类 B ，那么，类 A 应该实现类 B 的接口。<br>一个类实现一个或更多接口通过用 implements 子句声明，然后提供 API 接口要求。例如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个 person 类 ，包含 greet() 的隐式接口。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 在这个接口中，只有库中可见。</span></span><br><span class="line">  <span class="keyword">final</span> _name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不在接口中，因为这是个构造函数。</span></span><br><span class="line">  Person(<span class="keyword">this</span>._name);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这个接口中。</span></span><br><span class="line">  <span class="built_in">String</span> greet(who) =&gt; <span class="string">'Hello, $who. I am $_name.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Person 接口的一个实现。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Imposter</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 我们不得不定义它，但不用它。</span></span><br><span class="line">  <span class="keyword">final</span> _name = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> greet(who) =&gt; <span class="string">'Hi $who. Do you know who I am?'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greetBob(Person person) =&gt; person.greet(<span class="string">'bob'</span>);</span><br><span class="line"></span><br><span class="line">main () &#123;</span><br><span class="line">  <span class="built_in">print</span>(greetBob(<span class="keyword">new</span> Person(<span class="string">'kathy'</span>)));  <span class="comment">// Hello, bob. I am kathy.</span></span><br><span class="line">  <span class="built_in">print</span>(greetBob(<span class="keyword">new</span> Imposter()));  <span class="comment">// Hi bob. Do you know who I am?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个类实现多个接口的例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> <span class="keyword">implements</span> <span class="title">Comparable</span>, <span class="title">Location</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="扩展一个类"><a href="#扩展一个类" class="headerlink" title="扩展一个类"></a>扩展一个类</h3><p>使用 extends 创建一个子类，同时 supper 将指向父类：<br></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> turnOn() &#123;</span><br><span class="line">    _illuminateDisplay();</span><br><span class="line">    _activateIrSensor();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartTelevision</span> <span class="keyword">extends</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> turnOn() &#123;</span><br><span class="line">    <span class="keyword">super</span>.turnOn();</span><br><span class="line">    _bootNetworkInterface();</span><br><span class="line">    _initializeMemory();</span><br><span class="line">    _upgradeApps();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><hr><h3 id="重写成员"><a href="#重写成员" class="headerlink" title="重写成员"></a>重写成员</h3><p>子类可以重载实例方法，getters 方法，setters 方法。可以使用 @override 注释来显示地表明你要重写的成员：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartTelevision</span> <span class="keyword">extends</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> turnOn() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以使用 covariant 关键字来缩小类型安全代码中方法参数或实例变量的类型范围。<br>在一些（很少见到）的编码模式中使用子类型重写一个参数类型来缩小类型范围，这在强模式 Dart 中是非法的。在这种情况下，您可以使用协变关键字 covariant 告诉分析器您正在进行此操作。这将删除静态错误，而在运行时检查无效的参数类型。<br>下面是使用 covariant 的例子：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:meta/meta.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> chase(Animal x) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> chase(covariant Mouse x) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>covariant 关键字可以放置在父类或子类方法中, 通常，父类方法是放置它的最佳方法。covariant 关键字适用于单个参数，并且支持 setters 和 fields。</p><hr><h3 id="noSuchMethod"><a href="#noSuchMethod" class="headerlink" title="noSuchMethod()"></a>noSuchMethod()</h3><p>当代码试图用不存在的方法或实例变量时，这个方法会被调用。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;  <span class="comment">// 如果你不重写 noSuchMethod 方法，就用一个不存在的成员，会导致 NoSuchMethodError 错误。</span></span><br><span class="line">  <span class="keyword">void</span> noSuchMethod (Invocation mirror) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'You tried to use a non-existent member:'</span> +</span><br><span class="line">          <span class="string">'<span class="subst">$&#123;mirror.memberName&#125;</span>'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你用 noSuchMethod() 实现每一个可能的 getter 方法，setter 方法和类的方法，那么你可以使用 @proxy 标注来避免警告。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@proxy</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> noSuchMethod(Invocation mirror) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于注释 annotations，详见 <a href="https://www.dartlang.org/guides/language/language-tour#metadata" target="_blank" rel="noopener">元数据 MetaData</a></p><hr><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>枚举类型，通常被称为 enumerations 或 enums ，是一种用来代表一个固定数量的常量的特殊类。</p><ul><li>使用枚举<br>声明一个枚举类型需要使用关键字 enum ：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">  red,</span><br><span class="line">  green,</span><br><span class="line">  blue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在枚举中每个值都有一个 index getter 方法，它返回一个在枚举声明中从 0 开始的位置。例如，第一个值索引值为 0，第二个值索引值为 1。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>(Color.red.index == <span class="number">0</span>);</span><br><span class="line"><span class="keyword">assert</span>(Color.green.index == <span class="number">1</span>);</span><br><span class="line"><span class="keyword">assert</span>(Color.blue.index == <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要得到枚举列表的所有值，可使用枚举的 values 常量</span></span><br><span class="line"><span class="built_in">List</span>&lt;Color&gt; colors = Color.values;</span><br><span class="line"><span class="keyword">assert</span>(colors[<span class="number">2</span>] == Color.blue);</span><br></pre></td></tr></table></figure><p>你可以在 switch 语句 中使用枚举。如果 e 在 switch (e) 是显式类型的枚举，那么如果你不处理所有的枚举值将会弹出警告：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">  red,</span><br><span class="line">  green,</span><br><span class="line">  blue</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">Color aColor = Color.blue;</span><br><span class="line"><span class="keyword">switch</span> (aColor) &#123;</span><br><span class="line">  <span class="keyword">case</span> Color.red:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Red as roses!'</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> Color.green:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Green as grass!'</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>: <span class="comment">// 如果没有这个分句，将会弹出警告</span></span><br><span class="line">    <span class="built_in">print</span>(aColor);  <span class="comment">// 'Color.blue'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举类型有以下限制</p><ol><li>你不能在子类中混合或实现一个枚举</li><li>你不能显式实例化一个枚举</li></ol><hr><h3 id="为类添加特征：mixins"><a href="#为类添加特征：mixins" class="headerlink" title="为类添加特征：mixins"></a>为类添加特征：mixins</h3><p>mixins 是一种多类层次结构的类的代码重用。<br>要使用 mixins ，在 with 关键字后面跟一个或多个 mixin 的名字。下面的例子显示了两个使用 mixins 的类：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Musician</span> <span class="keyword">extends</span> <span class="title">Performer</span> <span class="title">with</span> <span class="title">Musical</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Maestro</span> <span class="keyword">extends</span> <span class="title">Person</span> <span class="title">with</span> <span class="title">Musical</span>, <span class="title">Aggressive</span>, <span class="title">Demented</span> </span>&#123;</span><br><span class="line">  Maestro(<span class="built_in">String</span> maestroName) &#123;</span><br><span class="line">    name = maestroName;</span><br><span class="line">    canConduct = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要实现 mixin ，就创建一个继承 Object 类的子类，不声明任何构造函数，不调用 super。例如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Musical</span> </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> canPlayPiano = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">bool</span> canCompose = <span class="keyword">false</span>;</span><br><span class="line">  <span class="built_in">bool</span> canConduct = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> entertainMe() &#123;</span><br><span class="line">    <span class="keyword">if</span> (canPlayPiano) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'Playing piano'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (canConduct) &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'Waving hands'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">'Humming to self'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从 1.13 起，Dart VM 已经取消了对 mixin 的两个限制：</p><blockquote><ol><li>Mixins 允许继承自类 class，不局限于 Object</li><li>Mixins 可以调用 super（）<br>“super mixins” 在 dart2js 不受支持，并且需要在 dartanalyzer 中使用 –supermixin 标签。更多关于 mixins，详见 <a href="https://www.dartlang.org/articles/language/mixins" target="_blank" rel="noopener">Mixins in Dart</a></li></ol></blockquote></blockquote><h3 id="类的变量和方法"><a href="#类的变量和方法" class="headerlink" title="类的变量和方法"></a>类的变量和方法</h3><p>使用 static 关键字来实现类变量和类方法。</p><ul><li>静态变量<br>静态变量（类变量）对于类状态和常数是有用的：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> red = <span class="keyword">const</span> Color(<span class="string">'red'</span>);  <span class="comment">// 一个恒定的静态变量</span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> name;      <span class="comment">// 一个实例变量。</span></span><br><span class="line">  <span class="keyword">const</span> Color(<span class="keyword">this</span>.name);  <span class="comment">// 一个恒定的构造函数。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">assert</span>(Color.red.name == <span class="string">'red'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有当静态变量被调用时才被初始化。</p><ul><li>静态方法<br>静态方法（类方法）不在一个实例上进行操作，因而不必访问 this 。例如：</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'dart:math'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> x;</span><br><span class="line">  <span class="built_in">num</span> y;</span><br><span class="line">  Point(<span class="keyword">this</span>.x, <span class="keyword">this</span>.y);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">num</span> distanceBetween(Point a, Point b) &#123;</span><br><span class="line">    <span class="keyword">var</span> dx = a.x - b.x;</span><br><span class="line">    <span class="keyword">var</span> dy = a.y - b.y;</span><br><span class="line">    <span class="keyword">return</span> sqrt(dx * dx + dy * dy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="keyword">new</span> Point(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> b = <span class="keyword">new</span> Point(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">var</span> distance = Point.distanceBetween(a, b);</span><br><span class="line">  <span class="keyword">assert</span>(distance &lt; <span class="number">2.9</span> &amp;&amp; distance &gt; <span class="number">2.8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以将静态方法作为编译时常量。例如，你可以把静态方法作为一个参数传递给静态构造函数。</p>]]></content>
      
      <categories>
          
          <category> Dart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dart 语法入门 II</title>
      <link href="/2017/10-Dart%20II.html"/>
      <url>/2017/10-Dart%20II.html</url>
      <content type="html"><![CDATA[<h2 id="函数-Functions"><a href="#函数-Functions" class="headerlink" title="函数 Functions"></a>函数 Functions</h2><p>Dart 是一门面向对象的语言，即使函数也是对象也有类型。这意味着函数可以分配给变量或者当作参数传给其他函数。也可以像函数一样调用一个类的实例，比如 <a href="https://www.dartlang.org/guides/language/language-tour#callable-classes" target="_blank" rel="noopener">可调用的 Classes</a>。<br>下面是定义了一个函数：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> isNoble(<span class="built_in">int</span> atomicNumber) &#123; <span class="comment">// 不指定函数返回类型也可以执行，但不推荐这样做</span></span><br><span class="line">  <span class="keyword">return</span> _nobleGases[atomicNumber] != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以用箭头语法描述单个表达式，但不能使用多行的语句，比如 if statement，可以用条件表达式 (?:) 代替 if else</span></span><br><span class="line"><span class="built_in">bool</span> isNoble(<span class="built_in">int</span> atomicNumber) =&gt; _nobleGases[atomicNumber] != <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="函数的参数有两种类型：required-和-optional"><a href="#函数的参数有两种类型：required-和-optional" class="headerlink" title="函数的参数有两种类型：required 和 optional"></a>函数的参数有两种类型：required 和 optional</h3><p>首先列出所有必需的参数，再跟上可选的参数。</p><p>可选参数有两种指定方式：可选命名参数 named 和可选位置参数 positional</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义函数时用&#123;param1, param2, …&#125;的形式指定 named 参数</span></span><br><span class="line">enableFlags(&#123;<span class="built_in">bool</span> bold, <span class="built_in">bool</span> hidden&#125;) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数时可以使用 paramName: value 的方式</span></span><br><span class="line">enableFlags(bold: <span class="keyword">true</span>, hidden: <span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>用 [ ] 包裹可选参数：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义函数时用 [param1, param2, …] 的形式指定 positional 参数</span></span><br><span class="line"><span class="built_in">String</span> say(<span class="built_in">String</span> from, <span class="built_in">String</span> msg, [<span class="built_in">String</span> device]) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">'$from says $msg'</span>;</span><br><span class="line">  <span class="keyword">if</span> (device != <span class="keyword">null</span>) &#123;</span><br><span class="line">    result = <span class="string">'$result with a $device'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(say(<span class="string">'Bob'</span>, <span class="string">'Howdy'</span>) == <span class="string">'Bob says Howdy'</span>);</span><br><span class="line"><span class="keyword">assert</span>(say(<span class="string">'Bob'</span>, <span class="string">'Howdy'</span>, <span class="string">'smoke signal'</span>) ==</span><br><span class="line">    <span class="string">'Bob says Howdy with a smoke signal'</span>);</span><br></pre></td></tr></table></figure><h3 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h3><p>在函数定义时可以用 = 给参数指定默认值，这个默认值必须是编译时常量，如果没有指定默认值则为 null。</p><p>下面是给 named 参数设置默认值的方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> enableFlags(&#123;<span class="built_in">bool</span> bold = <span class="keyword">false</span>, <span class="built_in">bool</span> hidden = <span class="keyword">false</span>&#125;) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// bold will be true; hidden will be false.</span></span><br><span class="line">enableFlags(bold: <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>下面是给 positional 参数设置默认值的方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> say(<span class="built_in">String</span> from, <span class="built_in">String</span> msg,</span><br><span class="line">    [<span class="built_in">String</span> device = <span class="string">'carrier pigeon'</span>, <span class="built_in">String</span> mood]) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="string">'$from says $msg'</span>;</span><br><span class="line">  <span class="keyword">if</span> (device != <span class="keyword">null</span>) &#123;</span><br><span class="line">    result = <span class="string">'$result with a $device'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (mood != <span class="keyword">null</span>) &#123;</span><br><span class="line">    result = <span class="string">'$result (in a $mood mood)'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(say(<span class="string">'Bob'</span>, <span class="string">'Howdy'</span>) ==</span><br><span class="line">    <span class="string">'Bob says Howdy with a carrier pigeon'</span>);</span><br></pre></td></tr></table></figure><p>也可以传递 lists 或者 maps 作为默认值：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> doStuff(&#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list = <span class="keyword">const</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; gifts = <span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="string">'first'</span>: <span class="string">'paper'</span>,</span><br><span class="line">      <span class="string">'second'</span>: <span class="string">'cotton'</span>,</span><br><span class="line">      <span class="string">'third'</span>: <span class="string">'leather'</span></span><br><span class="line">    &#125;&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'list:  $list'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'gifts: $gifts'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Main-函数"><a href="#Main-函数" class="headerlink" title="Main() 函数"></a>Main() 函数</h3><p>每个 app 都必需有一个 main() 函数，main() 返回 void 而且有一个可选的 List<string>字符参数列表。</string></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">querySelector</span>(<span class="string">"#sample_text_id"</span>)</span><br><span class="line">    ..text = <span class="string">"Click me!"</span></span><br><span class="line">    ..onClick.listen(reverseText);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .. 是级联 (cascade) 操作符，可以对单个对象执行多个操作</span></span><br></pre></td></tr></table></figure><p>给 main() 传入参数：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 运行 app 时传入参数：dart args.dart 1 test</span></span><br><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; arguments) &#123;</span><br><span class="line">  <span class="built_in">print</span>(arguments);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span>(arguments.length == <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">assert</span>(<span class="built_in">int</span>.parse(arguments[<span class="number">0</span>]) == <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">assert</span>(arguments[<span class="number">1</span>] == <span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将函数作为参数传给其他函数或者赋给变量：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">printElement(element) &#123;</span><br><span class="line">  <span class="built_in">print</span>(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">list.forEach(printElement);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> loudify = (msg) =&gt; <span class="string">'!!! <span class="subst">$&#123;msg.toUpperCase()&#125;</span> !!!'</span>; <span class="comment">// 一个匿名函数</span></span><br><span class="line"><span class="keyword">assert</span>(loudify(<span class="string">'hello'</span>) == <span class="string">'!!! HELLO !!!'</span>);</span><br></pre></td></tr></table></figure><h3 id="词法作用域-Lexical-scope"><a href="#词法作用域-Lexical-scope" class="headerlink" title="词法作用域 Lexical scope"></a>词法作用域 Lexical scope</h3><p>Dart 时一门词法作用域的语言，即变量的作用域是静态地决定的，由代码的布局决定的。<br>词法作用域的函数遇到既不是形参也不是函数内部定义的局部变量的变量时，会去函数定义时的环境中查询。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> topLevel = <span class="number">1</span>; <span class="comment">// 如果去掉这一行，getLevel 报错“No top-level getter 'topLevel' declared”</span></span><br><span class="line"><span class="keyword">void</span> getLevel() &#123;</span><br><span class="line">  <span class="built_in">print</span>(topLevel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main () &#123;</span><br><span class="line">  <span class="keyword">var</span> topLevel = <span class="number">2</span>;</span><br><span class="line">  getLevel(); <span class="comment">// 输出 1，因为 getsome() 定义时 topLevel=1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="词法闭包"><a href="#词法闭包" class="headerlink" title="词法闭包"></a>词法闭包</h3><p>指的是一个函数可以访问其语法作用域内的变量，即使这个函数是在变量本身的作用域之外被调用的。<br>下面的例子中 makeAdder() 捕获了变量 addBy，不管返回的函数在哪里被调用，它都可以使用 addBy：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span> makeAdder(<span class="built_in">num</span> addBy) &#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">num</span> i) =&gt; addBy + i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> add2 = makeAdder(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> add4 = makeAdder(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span>(add2(<span class="number">3</span>) == <span class="number">5</span>);</span><br><span class="line">  <span class="keyword">assert</span>(add4(<span class="number">3</span>) == <span class="number">7</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的等价性测试"><a href="#函数的等价性测试" class="headerlink" title="函数的等价性测试"></a>函数的等价性测试</h3><p>下面是关于顶层函数、静态方法和实例方法的等价性测试</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">foo() &#123;&#125; <span class="comment">// 一个顶层函数</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> bar() &#123;&#125; <span class="comment">// 一个静态方法</span></span><br><span class="line">  <span class="keyword">void</span> baz() &#123;&#125; <span class="comment">// 一个实例方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">main () &#123;</span><br><span class="line">  <span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 比较顶级函数</span></span><br><span class="line">  x = foo;</span><br><span class="line">  <span class="keyword">assert</span>(foo == x); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 比较静态方法</span></span><br><span class="line">  x = SomeClass.bar;</span><br><span class="line">  <span class="keyword">assert</span>(SomeClass.bar == x); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 比较实例方法</span></span><br><span class="line">  <span class="keyword">var</span> v = <span class="keyword">new</span> SomeClass(); <span class="comment">// SomeClass 的实例 1</span></span><br><span class="line">  <span class="keyword">var</span> w = <span class="keyword">new</span> SomeClass(); <span class="comment">// SomeClass 的实例 2</span></span><br><span class="line">  <span class="keyword">var</span> y = w;</span><br><span class="line">  x = w.baz;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这些闭包引用了相同的示例对象（A 的实例 2），所以它们是等价的</span></span><br><span class="line">  <span class="keyword">assert</span>(y.baz == x); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这些闭包引用的是不同实例，所以它们不等价</span></span><br><span class="line">  <span class="keyword">assert</span>(v.baz != w.baz); <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>所有函数都会返回一个值，如果没有指定返回值，函数将会在函数体末尾隐式地添加“return null”</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> baz() &#123;&#125;</span><br><span class="line">main () &#123;</span><br><span class="line">  <span class="built_in">print</span>(baz()); <span class="comment">// 输出 null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="操作符-Operators"><a href="#操作符-Operators" class="headerlink" title="操作符 Operators"></a>操作符 Operators</h2><p>Dart 定义了以下操作符，你可以 <a href="https://www.dartlang.org/guides/language/language-tour#overridable-operators" target="_blank" rel="noopener">重写这些操作符</a>。</p><table><thead><tr><th style="text-align:center">介绍</th><th style="text-align:left">符号</th></tr></thead><tbody><tr><td style="text-align:center">一元后缀符</td><td style="text-align:left">expr++ 、 expr– 、 () 、 [] 、 . 、 ?.</td></tr><tr><td style="text-align:center">一元前缀符</td><td style="text-align:left">-expr 、 !expr 、 ~expr 、 ++expr 、 —expr</td></tr><tr><td style="text-align:center">乘法类型</td><td style="text-align:left">* 、 / 、 % 、 ~/</td></tr><tr><td style="text-align:center">加法类型</td><td style="text-align:left">+ 、 -</td></tr><tr><td style="text-align:center">位操作符</td><td style="text-align:left">&lt;&lt; 、 &gt;&gt;</td></tr><tr><td style="text-align:center">按位与</td><td style="text-align:left">&amp;</td></tr><tr><td style="text-align:center">按位异或</td><td style="text-align:left">^</td></tr><tr><td style="text-align:center">按为或</td><td style="text-align:left">I</td></tr><tr><td style="text-align:center">比较和类型测试</td><td style="text-align:left">&gt;= 、 &gt; 、 &lt;= 、 &lt; 、 as 、 is 、 is!</td></tr><tr><td style="text-align:center">等价</td><td style="text-align:left">== 、 !=</td></tr><tr><td style="text-align:center">逻辑与</td><td style="text-align:left">&amp;&amp;</td></tr><tr><td style="text-align:center">逻辑或</td><td style="text-align:left">II</td></tr><tr><td style="text-align:center">null 分配符</td><td style="text-align:left">??</td></tr><tr><td style="text-align:center">条件运算符</td><td style="text-align:left">expr1 ? expr2 : expr3</td></tr><tr><td style="text-align:center">级联运算符</td><td style="text-align:left">..</td></tr><tr><td style="text-align:center">赋值</td><td style="text-align:left">= 、 *= 、 /= 、 ~/= 、 %= 、 += 、 -= 、 &lt;&lt;= 、 &gt;&gt;= 、 &amp;= 、 ^=</td></tr></tbody></table><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>／ 返回 double 型，～／ 返回整型的除数，% 返回除法的余数：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>(<span class="number">5</span> / <span class="number">2</span> == <span class="number">2.5</span>); <span class="comment">// 结果是 double 类型</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="number">5</span> ~/ <span class="number">2</span> == <span class="number">2</span>); <span class="comment">// 结果是一个整数</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="number">5</span> % <span class="number">2</span> == <span class="number">1</span>); <span class="comment">// 余数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'5/2 = <span class="subst">$&#123;<span class="number">5</span>~/<span class="number">2</span>&#125;</span> 余 <span class="subst">$&#123;<span class="number">5</span>%<span class="number">2</span>&#125;</span>'</span>); <span class="comment">// 5/2 = 2 余 1</span></span><br></pre></td></tr></table></figure><h3 id="自增自减"><a href="#自增自减" class="headerlink" title="自增自减"></a>自增自减</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b;</span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = ++a; <span class="comment">// 在 b 获得其值前先自增 a</span></span><br><span class="line"><span class="keyword">assert</span>(a == b); <span class="comment">// 1 == 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = a++; <span class="comment">// 在 b 获得其值后自增 a</span></span><br><span class="line"><span class="keyword">assert</span>(a != b); <span class="comment">// 1 != 0</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = --a; <span class="comment">// 在 b 获得其值前自减 a</span></span><br><span class="line"><span class="keyword">assert</span>(a == b); <span class="comment">// -1 == -1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = a--; <span class="comment">// 在 b 获得其值后自减 a</span></span><br><span class="line"><span class="keyword">assert</span>(a != b); <span class="comment">// -1 != 0</span></span><br></pre></td></tr></table></figure><h3 id="类型测试操作符"><a href="#类型测试操作符" class="headerlink" title="类型测试操作符"></a>类型测试操作符</h3><ul><li>as 类型转换</li><li>is 当对象是相应类型时返回 true</li><li>is！当对象不是相应类型时返回 true<br>如果 obj 实现了 T 所定义的借口，那么 obj is T 将返回 true。比如，obj is Object 必然返回 true。<br>使用 as 操作符可以把一个对象转换为特定类型。一般来说，如果在 is 测试之后还有一些关于对象的表达式，你可以把 as 当做是 is 测试的一种简写:</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (emp <span class="keyword">is</span> Person) &#123; <span class="comment">// 类型检查</span></span><br><span class="line">  emp.firstName = <span class="string">'Bob'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// as 化简代码</span></span><br><span class="line">(emp <span class="keyword">as</span> Person).firstName = <span class="string">'Bob'</span>;</span><br></pre></td></tr></table></figure><p>上面两段代码并不相等。如果 emp 的值为 null 或者不是 Person 的一个对象，第一段代码不会做任何事情，第二段代码将会报错 。</p><h3 id="分配符"><a href="#分配符" class="headerlink" title="分配符"></a>分配符</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = value;   <span class="comment">// 将 value 赋给 a</span></span><br><span class="line">b ??= value; <span class="comment">// 如果 b 为 null 将 value 赋给 b，否则 b 值不变</span></span><br></pre></td></tr></table></figure><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><ul><li>condition ? expr1 : expr2 条件为真返回表达式 1，否则返回表达式 2</li><li>expr1 ?? expr2 表达式 1 为 null 则返回表达式 2，否则返回表达式 1</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> toString() =&gt; msg ?? <span class="keyword">super</span>.toString();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="built_in">String</span> toString() =&gt; msg == <span class="keyword">null</span> ? <span class="keyword">super</span>.toString() : msg;</span><br></pre></td></tr></table></figure><h3 id="级联操作符"><a href="#级联操作符" class="headerlink" title="级联操作符"></a>级联操作符</h3><p>允许你在单个对象的成员上执行多个操作</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">querySelector</span>(<span class="string">'#button'</span>) <span class="comment">// Get an object.</span></span><br><span class="line">  ..text = <span class="string">'Confirm'</span>   <span class="comment">// Use its members.</span></span><br><span class="line">  ..classes.add(<span class="string">'important'</span>)</span><br><span class="line">  ..onClick.listen((e) =&gt; <span class="built_in">window</span>.alert(<span class="string">'Confirmed!'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> button = <span class="built_in">querySelector</span>(<span class="string">'#button'</span>);</span><br><span class="line">button.text = <span class="string">'Confirm'</span>;</span><br><span class="line">button.classes.add(<span class="string">'important'</span>);</span><br><span class="line">button.onClick.listen((e) =&gt; <span class="built_in">window</span>.alert(<span class="string">'Confirmed!'</span>));</span><br></pre></td></tr></table></figure><p>级联操作符可以嵌套</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> addressBook = (</span><br><span class="line">  <span class="keyword">new</span> AddressBookBuilder()</span><br><span class="line">  ..name = <span class="string">'jenny'</span></span><br><span class="line">  ..email = <span class="string">'jenny@example.com'</span></span><br><span class="line">  ..phone = (</span><br><span class="line">    <span class="keyword">new</span> PhoneNumberBuilder()</span><br><span class="line">    ..number = <span class="string">'415-555-0100'</span></span><br><span class="line">    ..label = <span class="string">'home'</span></span><br><span class="line">  ).build()</span><br><span class="line">).build();</span><br></pre></td></tr></table></figure><p>在返回对象的函数上使用级联要格外注意，下面的例子中 sb.write() 返回 void，不能在 void 上构建级联</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sb = <span class="keyword">new</span> <span class="built_in">StringBuffer</span>();</span><br><span class="line">sb.write(<span class="string">'foo'</span>)..write(<span class="string">'bar'</span>); <span class="comment">// 无效</span></span><br></pre></td></tr></table></figure><p>严格意义上讲，级联操作符 .. 不算一个操作符，它属于 Dart 语法的一部分，应该算作一个语法</p><h3 id="其他操作符"><a href="#其他操作符" class="headerlink" title="其他操作符"></a>其他操作符</h3><ul><li>一个点. 代表成员访问，比如 foo.bar 从 foo 中选择了 bar 属性</li><li>问号加上一个点 ?. 代表条件成员访问，?. 之前的操作数可以为空，比如 foo?.bar 从 foo 中选择属性 bar，当 foo 为空时则不访问 bar</li></ul><hr><h2 id="控制流语句-Control-flow-statements"><a href="#控制流语句-Control-flow-statements" class="headerlink" title="控制流语句 Control flow statements"></a>控制流语句 Control flow statements</h2><ul><li>if else</li><li>for 循环</li><li>while 和 do while 循环</li><li>break 和 continue</li><li>switch case</li><li>assert</li></ul><h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>Dart 的 for 循环闭包中可以获取 index 的值，就像下面的例子输出下标 0，1，2；而在 javaScript 中，下面的例子输出 3，3，3，如果想输出 0，1，2 需要把 var 改成 let</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in Dart</span></span><br><span class="line"><span class="keyword">var</span> callbacks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  callbacks.add(() =&gt; <span class="built_in">print</span>(i));</span><br><span class="line">&#125;</span><br><span class="line">callbacks.forEach((c) =&gt; c()); <span class="comment">// 输出 0，1，2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// in javaScript</span></span><br><span class="line"><span class="keyword">var</span> callbacks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123; <span class="comment">// 改成 let 输出 0，1，2</span></span><br><span class="line">  callbacks.push(() =&gt; console.log(i));</span><br><span class="line">&#125;</span><br><span class="line">callbacks.forEach((c) =&gt; c()); <span class="comment">// 输出 3，3，3</span></span><br></pre></td></tr></table></figure><p>可迭代的元素可以用 forEach() 方法遍历，也可以用 for-in</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> collection = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x <span class="keyword">in</span> collection) &#123;</span><br><span class="line">  <span class="built_in">print</span>(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h3><p>用 break 退出循环，循环结束</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shutDownRequested()) <span class="keyword">break</span>;</span><br><span class="line">  processIncomingRequests();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用 continue 跳出这一次循环，循环不结束</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; candidates.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> candidate = candidates[i];</span><br><span class="line">  <span class="keyword">if</span> (candidate.yearsExperience &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  candidate.interview();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过迭代可以简化上述代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">candidates.where((c) =&gt; c.yearsExperience &gt;= <span class="number">5</span>).forEach((c) =&gt; c.interview());</span><br></pre></td></tr></table></figure><h3 id="转换语句"><a href="#转换语句" class="headerlink" title="转换语句"></a>转换语句</h3><p>可以使用 continue 和标签来跳转</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> command = <span class="string">'CLOSED'</span>;</span><br><span class="line"><span class="keyword">switch</span> (command) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'CLOSED'</span>:</span><br><span class="line">    executeClosed();</span><br><span class="line">    <span class="keyword">continue</span> nowClosed;</span><br><span class="line">nowClosed:</span><br><span class="line">  <span class="keyword">case</span> <span class="string">'NOW_CLOSED'</span>:</span><br><span class="line">    <span class="comment">// Runs for both CLOSED and NOW_CLOSED.</span></span><br><span class="line">    executeNowClosed();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 case 分句可以含有局部变量，该局部变量仅仅只在此分句范围内可见</p><h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><p>如果一个布尔条件值为 false，使用 assert 语句来中断正常执行的代码。在 assert 语句后面的括号中，你可以加入任何表示布尔值或者函数的表达式。如果表达式的值或者函数返回值 true，则 assert 语句成功并继续执行代码。如果值为 false，则 assert 语句失败并抛出一个异常 (an AssertionError)</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 确保这个变量不为空值.</span></span><br><span class="line"><span class="keyword">assert</span>(text != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保这个变量小于 100.</span></span><br><span class="line"><span class="keyword">assert</span>(number &lt; <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保它是一个 https 协议类型的 URL.</span></span><br><span class="line"><span class="keyword">assert</span>(urlString.startsWith(‘https’));</span><br></pre></td></tr></table></figure><p>⚠️注意：assert 语句仅仅只能在调试模式下使用，在生产模式下没有任何作用。</p><p>要将消息附加到断言，添加一个字符串作为第二个参数，当第一个参数为 false 时第二个参数会随错误一起抛出</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span>(urlString.startsWith(<span class="string">'https'</span>), <span class="string">'URL ($urlString) should start with "https".'</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="异常-Exception"><a href="#异常-Exception" class="headerlink" title="异常 Exception"></a>异常 Exception</h2><h3 id="throw-语句"><a href="#throw-语句" class="headerlink" title="throw 语句"></a>throw 语句</h3><p>抛出了一个异常：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> FormatException(<span class="string">'Expected at least 1 section'</span>);</span><br></pre></td></tr></table></figure><p>也可以将任意对象作为异常抛出：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="string">'Out of llamas!'</span>;</span><br></pre></td></tr></table></figure><p>因为抛出异常的语句是个表达式，所以可以写在箭头函数里：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">distanceTo(Point other) =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> UnimplementedError();</span><br></pre></td></tr></table></figure><h3 id="on-catch-语句"><a href="#on-catch-语句" class="headerlink" title="on catch 语句"></a>on catch 语句</h3><p>捕获一个异常:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  breedMoreLlamas();</span><br><span class="line">&#125; on OutOfLlamasException &#123;</span><br><span class="line">  buyMoreLlamas();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了处理含有多种类型异常的代码，你可以选择多个 catch 子句。第一个匹配抛出对象类型的 catch 子句将会处理这个异常。如果 catch 子句未说明所捕获的异常类型，这个子句就可处理任何被抛出的对象:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  breedMoreLlamas();</span><br><span class="line">&#125; on OutOfLlamasException &#123;</span><br><span class="line">  <span class="comment">// 一个具体异常</span></span><br><span class="line">  buyMoreLlamas();</span><br><span class="line">&#125; on Exception <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="comment">// 任意一个异常</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Unknown exception: $e'</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e，s) &#123;</span><br><span class="line">  <span class="comment">// 非具体类型</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Exception details:\n $e'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Stack trace:\n $s'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>catch() 可以带两个参数，第二个参数代表堆栈跟踪 <a href="https://api.dartlang.org/stable/dart-core/StackTrace-class.html" target="_blank" rel="noopener">stack trace</a>。</p><p>要处理部分异常，同时允许它传播，可以使用 rethrow 关键字：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> foo = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> misbehave() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    foo = <span class="string">"You can't change a final variable's value."</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'misbehave() partially handled <span class="subst">$&#123;e.runtimeType&#125;</span>.'</span>);</span><br><span class="line">    <span class="keyword">rethrow</span>; <span class="comment">// Allow callers to see the exception.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    misbehave();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'main() finished handling <span class="subst">$&#123;e.runtimeType&#125;</span>.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子输出两条 print 语句，如果去掉 rethrow 则只输出第一个 print 语句</p><h3 id="finally-语句"><a href="#finally-语句" class="headerlink" title="finally 语句"></a>finally 语句</h3><p>如果没有 catch 匹配子句的异常， finally 子句运行以后异常将被传播：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  breedMoreLlamas();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 即使抛出一个异常时也会进行清理</span></span><br><span class="line">  cleanLlamaStalls();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  breedMoreLlamas();</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Error: $e'</span>);  <span class="comment">// 先处理异常</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  cleanLlamaStalls();  <span class="comment">// 然后清理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Dart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac 快速入门操作指南</title>
      <link href="/2017/10-MacSkills.html"/>
      <url>/2017/10-MacSkills.html</url>
      <content type="html"><![CDATA[<blockquote><p>OS X 测试版本 Mac Sierra 10.12.4，测试机型 Mac Air</p></blockquote><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>键盘符号说明<br><img alt="image" src="/images/mac/mac_keyboard.jpg" width="650px" height="900px"></p><p>系统设置 <code>system preferences &gt; keyboard &gt; shortcuts</code> 下有很多自定义快捷键设置，每个人都可以根据自己的喜好修改，熟悉以下的操作将会大大提高生产力，提升效率</p><h3 id="修改输入法切换的快捷方式"><a href="#修改输入法切换的快捷方式" class="headerlink" title="修改输入法切换的快捷方式"></a>修改输入法切换的快捷方式</h3><p>依次打开系统设置 <code>system preferences &gt; keyboard &gt; shortcuts &gt; input sources</code>，然后勾选其中的 select next source in input menu 选项，然后输入你想要的快捷键组合，这就是输入法切换快捷键了。我的是 <code>option + space</code> 切换输入法，cmd + space 用来打开 Alfred。</p><h3 id="关闭-spotlight"><a href="#关闭-spotlight" class="headerlink" title="关闭 spotlight"></a>关闭 spotlight</h3><p>推荐用 Alfred 代替自带的 spotlight 应用，所以可以把 spotlight 关掉然后把 cmd + space 快捷键设置成 Alfred<br>进入 <code>system preferences &gt; keyboard &gt; shortcuts &gt; spotlight</code> 取消 spotlight 选项</p><h3 id="删除字符的快捷方式"><a href="#删除字符的快捷方式" class="headerlink" title="删除字符的快捷方式"></a>删除字符的快捷方式</h3><p>这个和 windows 有点不同，windows 中是用 backspace 键来删除光标左侧字符，用 delete 键来删除光标右侧字符。而在 Mac 中，是用 delete 键来删除光标左侧字符。如果要删除光标右侧字符的话，则需要使用 fn + delete。在 Mac 中，可以使用 CMD + delete 来删除光标左侧的整行文字。</p><h3 id="光标和翻页的快捷方式"><a href="#光标和翻页的快捷方式" class="headerlink" title="光标和翻页的快捷方式"></a>光标和翻页的快捷方式</h3><p>以下快捷键加上 Shift 键可以选中文字：</p><ul><li>CMD + 下箭头，可以快速定位到一篇文章的末尾，在浏览器中可以快速拉到底部</li><li>CMD + 上箭头，可以快速定位到一篇文章的开头，在浏览器中可以快速回到顶部</li><li>CMD + 左箭头（也可以 Control + A 或者 Option + 上箭头），可以快速定位到一行的行首</li><li>CMD + 右箭头（也可以 Control + E 或者 Option + 下箭头），可以快速定位到一行的行末</li><li>Option + 左箭头，跳到当前单词的开头</li><li>Option + 右箭头，跳到当前单词的末尾</li><li>Control + N，跳至下一行</li><li>Control + P，跳至上一行</li></ul><p>文本编辑中的光标移动，也适用于命令行</p><ul><li>Control + F (Forward): 光标右移</li><li>Control + B (Backward): 光标左移</li><li>Control + P (Previous): 光标上移</li><li>Control + N (Next): 光标下移</li><li>Control + A : 光标移至段落头部（Move to the Beginning of the Paragraph）</li><li>Control + E (End): 光标移至段落尾部（Move to the End of the Paragraph）</li></ul><p>文本编辑</p><ul><li>Control + H : 移除光标左一字符</li><li>Control + D (Delete): 移除光标右一字符</li><li>Control + K : 移除光标右侧内容，至段落结束（Delete to the End of the Paragraph）</li><li>Control + O : 在光标处换行，相当于回车键（Split the Current Line）</li><li>Control + T (Transpose): 交换光标前后一字符位置（Transpose Letters）</li></ul><p>组合按键</p><ul><li>Control + AK: 移除光标所在行（Clear Current Line）</li><li>Control + EK: 与后一行合并（Join Lines）</li></ul><h3 id="程序相关的快捷键"><a href="#程序相关的快捷键" class="headerlink" title="程序相关的快捷键"></a>程序相关的快捷键</h3><ul><li>CMD + q，快速退出程序进程</li><li>CMD + w，关闭当前页面，相当于按窗口左上角的红色叉，但是该程序的进程并没有退出</li><li>CMD + tab，可以在当前打开进程的程序中进行切换</li><li>CMD + h，可以隐藏当前的应用程序</li><li>CMD + 逗号， 可以打开当前应用程序的偏好设置</li></ul><h3 id="强制退出的快捷键"><a href="#强制退出的快捷键" class="headerlink" title="强制退出的快捷键"></a>强制退出的快捷键</h3><p>如果 Mac 中的某个程序运行出现异常，需要强制退出，可以按下的快捷键 Option + CMD + ESC，这时系统会弹出一个 force quit application 的窗口，选中需要强制退出的程序，点击 force quit 键即可。也可以在 Dock 栏右键要关闭的程序，再长按 option 键会出现 <code>force quit</code> 和 <code>hide others</code> 选项</p><h3 id="窗口相关的快捷键"><a href="#窗口相关的快捷键" class="headerlink" title="窗口相关的快捷键"></a>窗口相关的快捷键</h3><ul><li>CMD + n，建立一个新窗口</li><li>CMD + `(反引号，数字 1 旁边)，在打开的程序窗口之间进行切换</li><li>CMD + m，可以最小化当前窗口</li><li>CMD + t，建立一个新签标</li><li>control + 左右方向键（←→）切换桌面</li><li>Option + cmd + 左右方向键（←→）在浏览器中切换标签</li><li>control + ↑：mission control</li><li>control + ↓：application control</li><li>F11：显示桌面，mac air 要 fn + F11</li></ul><h3 id="手动整理状态栏图标"><a href="#手动整理状态栏图标" class="headerlink" title="手动整理状态栏图标"></a>手动整理状态栏图标</h3><p>按住 ‘⌘’ 键左右拖动状态栏图标</p><h3 id="截图相关的快捷键"><a href="#截图相关的快捷键" class="headerlink" title="截图相关的快捷键"></a>截图相关的快捷键</h3><p>可以在 <code>system preferences &gt; keyboard &gt; shortcuts &gt; screen shots</code> 中修改</p><ul><li>CMD + Shift + 3，对整个屏幕进行截图，并且保存在桌面</li><li>CMD + Shift + 4，用鼠标划定一个范围，会对该范围进行截图并且保存在桌面</li><li>CMD + Shift + 4，鼠标不动，按空格键，会对当前操作的窗口进行截图并且保存在桌面</li><li>CMD + Shift + Control + 4，类似于以上 CMD + Shift + 4 的两类操作，只不过其截图是保存在剪切板上，不在桌面上，可以后续将其贴在 page 等文档中</li></ul><h3 id="声音相关的快捷键"><a href="#声音相关的快捷键" class="headerlink" title="声音相关的快捷键"></a>声音相关的快捷键</h3><ul><li>Mac 自带了多种的系统语音，可以分别识别各国的语言，发出各国的语音。</li></ul><p>在 <code>system preferences &gt; accessibility &gt; speech &gt; system voice</code> 中可以选择各国的语音了。</p><p>在弹出框到最下方，有一个 speak selected text when the key is pressed 的选项，这就表示当你选中某个文本的时候，以下的快捷键可以实现对该文本的发音。默认的快捷键是：Option + esc。</p><ul><li>按住「⌥ + ⇧」，再按功能键调节音量可以实现四分之一为单位调整</li></ul><h3 id="隐藏-Dock-栏的快捷键"><a href="#隐藏-Dock-栏的快捷键" class="headerlink" title="隐藏 Dock 栏的快捷键"></a>隐藏 Dock 栏的快捷键</h3><p>按下 <code>Option + CMD + d</code>，可以隐藏 dock 栏，此时如果把鼠标移动到 dock 栏原先所在位置，dock 栏会重新出现在下方，待鼠标移走后，dock 栏又重新隐藏。再次按下 Option + CMD + d，dock 栏重新恢复到正常的显示状态。</p><h3 id="Option-妙用"><a href="#Option-妙用" class="headerlink" title="Option 妙用"></a>Option 妙用</h3><p>Option 和其他一些按键同时作用时，常常发挥出很多神奇的作用</p><ul><li>Option + CMD + h，如果当前桌面上同时打开了好多个程序，这个快捷键可以隐藏当前应用程序外的其他应用程序。如果只是 Option + h 只隐藏当前程序</li><li>Option + CMD + v，可以实现对一个已复制文件的移动，类似于 windows 中对文件的剪切黏贴效果</li><li>Option + CMD + w，可以关闭 safari 下除当前 tab 外的所有其他 tab，或者关闭某 app 相关的所有窗口。比如当你选中一批文件，按下 CMD + i 后，会弹出所有选中文件的 info 窗口，这时候就可以按 Option + CMD + w 将全部 info 窗口关闭</li><li>Option + CMD + i，可以用于选中好几个文件的场合，来看所有文件整合的 info 消息及所有文件占据空间的大小总和</li><li>打开 launchpad，按下 Option 键，所有 app 都会颤抖，和 iphone 中的状况是一样的。这时候按颤抖 app 上的✖️，即可卸载该 app。仅适用于 app store 上下载的 app 的卸载</li><li>选择 dock 栏上打开的程序，按下右键弹出菜单后，再按下 Option 键，这时就发现菜单栏倒数两项分别从 hide，quit 变化为 hide others 和 force quit</li><li>在 safari 中，如果按下 CMD + Option + q 退出 safari，那么再次打开 Safari 的话，会发现之前打开的网址全部被保留了下来。但是如果是以 CMD + q 的方式退出 safari，就没有这个保留网址的效果了</li><li>Option + 点击 Dock 上的图标，可打开此程序或文件夹所在的目录。</li></ul><h3 id="屏幕取词"><a href="#屏幕取词" class="headerlink" title="屏幕取词"></a>屏幕取词</h3><p>可以用 Control + CMD + d 来实现屏幕取词的功能。作用与三指点击取词的手势操作一样。</p><h3 id="Finder-快捷键"><a href="#Finder-快捷键" class="headerlink" title="Finder 快捷键"></a>Finder 快捷键</h3><p><img src="/images/mac/finder.png" alt="image"></p><ul><li>CMD(⌘) + Delete 将选择的文件删除到垃圾箱</li><li>CMD + z 撤销操作，包括复制粘贴删除</li><li>选中文件再按空格键 打开快速查看窗口</li><li>选中文件再回车 重命名</li><li>CMD(⌘) + N 新打开一个 Finder 窗口</li><li>CMD(⌘) + Shift(⇧) + N 新建一个文件夹</li><li>CMD(⌘) + I 显示文件 / 文件夹简介</li><li>CMD(⌘) + A 全选</li><li>CMD(⌘) + Option(⌥) + A 取消全选</li><li>CMD + Shift + 句号 (.)<code>可以显示隐藏文件、文件夹</code>，再按一次，恢复隐藏</li><li>CMD + Shift + G，可以跳转指定路径</li><li>CMD + Shift + C，可以复制当前文件路径</li><li>CMD + Shift + P，可以打开预览窗口</li><li>CMD + Shift + T，可以打开导航栏，跟浏览器一样</li><li>CMD + /，可以打开底部状态栏</li><li>Option + CMD + P，可以打开底部路径栏</li><li>Option + CMD + S，可以隐藏左侧栏</li><li>CMD + 上下键跳转父子目录</li><li>按住 CMD+ Option+ 拖动文件，可快速“制作替身”</li><li>Option + 双击文件夹，强制本窗口打开文件夹</li><li>CMD + 双击文件夹，强制新窗口打开文件夹</li></ul><h3 id="快速切换目录"><a href="#快速切换目录" class="headerlink" title="快速切换目录"></a>快速切换目录</h3><p>在 OS X 下，可以在终端中以 cd ~ 的方式进入用户目录。</p><p>如果是在 Finder 里，可以按 CMD + Shift + h，快速切换到用户目录。<br>CMD + Shift + d，快速切换到桌面目录。<br>CMD + Shift + o，快速切换到 Documents 目录。</p><p>其他的快速切换在菜单栏 Go 中</p><h3 id="在-MAC-中输入特殊字符"><a href="#在-MAC-中输入特殊字符" class="headerlink" title="在 MAC 中输入特殊字符"></a>在 MAC 中输入特殊字符</h3><p>option + 各个键都有特定的一个字符，option + shift + 各个键也有特殊的字符</p><p>苹果标志 （Shift + Option + K）<br>Copyright © (Option + G)<br>美元 $ (Shift + 4)<br>美分 ￠ (Option + 4)<br>英镑 ￡ （Option + 3)<br>日元 ￥(Option + Y)<br>欧元 €（Shift + Option + 2)<br>破折号 –(Option + -)<br>约等于 ≈（Option + X)<br>度 °(Shift + Option + 8)<br>除号 ÷（Option + /)<br>循环 ∞（Option + 5）<br>小于等于≤（Option + ,)<br>大于等于≥（Option + .)<br>不等于≠（Option + =）<br>Pi π（Option + P）<br>正负号 ±(Shift + Option + =)<br>平方根√（Option + V)<br>求和 ∑（option + w）<br>产品标识 ™（Option + 2)<br>®(Option + r)</p><p>快捷键 <code>control + cmd + space</code> 打开系统自带的符号面板，可以选择特殊字符输入，比如 cmd⌘、option⌥、control⌃、shift⇧、caps lock⇪、delete⌫、arrow↑→↓←等</p><h3 id="Finder-设置"><a href="#Finder-设置" class="headerlink" title="Finder 设置"></a>Finder 设置</h3><ul><li>显示隐藏文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder</span><br></pre></td></tr></table></figure><p>将 true 改为 false 恢复隐藏</p><ul><li>在顶部显示绝对路径，右键绝对路径前的图标可以切换父目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES</span><br></pre></td></tr></table></figure><p>将 yes 换为 no 还原</p><ul><li>底部地址栏从用户开始，默认是显示“MacHD/Users/clown/Downloads”，修改后显示“clown/Downloads”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder PathBarRootAtHome -bool TRUE;killall Finder</span><br></pre></td></tr></table></figure><p>将 true 改为 false 还原</p><h3 id="Terminal-常用命令"><a href="#Terminal-常用命令" class="headerlink" title="Terminal 常用命令"></a>Terminal 常用命令</h3><ul><li><p><code>pwd</code> 显示当前路径</p></li><li><p><code>which 库名</code> 查看安装目录，比如 <code>which go</code> 输出 /usr/local/go/bin/go</p></li><li><p><code>cd 路径</code> 跳转，支持绝对路径和相对路径 ./ 和 ../</p></li><li><p><code>mkdir 文件名</code> 新建文件夹</p></li><li><p><code>rmdir 文件名</code> 删除目录</p></li><li><p><code>mvdir</code> 移动目录</p></li><li><p><code>cat + 文件</code> 预览文件</p></li><li><p><code>ls 参数 路径</code> 列出文件，<code>ls -l -A -h</code> 显示当前路径详细信息文件列表</p></li><li><p><code>cp 参数 源文件 目标文件</code> 拷贝文件，<code>cp -R ./Downloads/* ~/Desktop</code> 表示将 Downloads 下所有文件拷贝到桌面，-R 表示递归操作，源文件是文件夹时需要</p></li><li><p><code>rm 参数 文件</code> 删除文件，参数－rf 表示递归和强制，文件夹需要 -r 参数，-i 参数表示删除前要确认</p></li><li><p><code>mv 文件 路径</code> 移动文件</p></li><li><p><code>file 文件</code> 显示文件类型</p></li><li><p><code>open 文件</code> 用默认工具打开文件</p></li><li><p><code>touch 文件名</code> 更改文件的时间信息（可以用 <code>stat 文件</code> 查看），如果文件不存在会创建一个新的空文件，常用于创建新文件</p></li><li><p><code>vi 文件名</code> 编辑文件，如果文件不存在就新建一个并打开文件，在 vi 编辑器中输入“:wq”保存更改并退出，推荐用 vim 代替 vi</p></li><li><p><code>find</code> 查询文件，<code>find 目录 -type f|wc -l</code> 统计文件数，<code>find 目录 -type d|wc -l</code> 统计目录数，<code>find . -name &quot;*.js&quot; -print</code> 查询 js 格式的文件</p></li><li><p><code>date</code> 显示系统时间</p></li><li><p><code>cal</code> 显示日历</p></li><li><p><code>time 程序</code> 统计程序的执行时间，比如 time a.out</p></li><li><p><code>telnet</code> 远程登录</p></li><li><p><code>clear</code> 清除窗口内容</p></li><li><p><code>env</code> 显示当前所有设置过的环境变量</p></li><li><p><code>du</code> 查询磁盘使用情况，<code>du -sh 目录</code> 统计目录大小</p></li><li><p><code>df</code> 显示文件系统的总空间和可用空间, <code>df -h /</code> 显示硬盘使用情况</p></li><li><p><code>history</code> 列出最近执行过的 几条命令及编号</p></li><li><p><code>alias</code> 给某个命令定义别名，比如 <code>alias del=rm -i</code></p></li><li><p><code>top</code> 显示进程信息</p></li><li><p><code>kill 进程</code> 终止进程<br>……</p></li></ul><p>更多参看：[mac 终端命令大全介绍]<a href="https://www.douban.com/note/75797151/" target="_blank" rel="noopener">https://www.douban.com/note/75797151/</a></p><h3 id="介绍-Alfred"><a href="#介绍-Alfred" class="headerlink" title="介绍 Alfred"></a>介绍 Alfred</h3><p>前面提到了 Alfred，现在介绍一下如何使用它，使用教程网上都有，我就不赘述了，这里贴上一篇 <a href="http://wellsnake.com/jekyll/update/2014/06/15/001/" target="_blank" rel="noopener">丢掉鼠标－Mac 神软 Alfred 使用手册</a></p><p>我的设置如下</p><ul><li>热键：我设置的热键是 <code>cmd + space</code>，刚好代替系统自带的 spotlight</li><li>Default Results：勾上书签，支持搜索 Safari 的书签，但我用的是 Chrome，可以把书签导入到 Safari 中即可；Search Scope 设置 Alfred 查询时会遍历的文件夹，在这里可以自己添加经常访问的和删除不必要文件夹</li><li>Web Search：经常用到的功能，把自己常用的网站设置快捷键，像 google 搜索只要在 Alfred 中输入 <code>gg 搜索的内容</code> 即可，给自己的博客添加快捷键 blog 等等<br><img src="/images/artifact/websearch.png" alt="images"></li><li>关联 terminal，直接在 Alfred 中输入 <code>&gt; 命令</code> 执行</li><li>workflow：我用的有 Chrome Bookmarks、Dash 和有道词典翻译，功能分别是搜索 Chrome 书签、<code>Dash 搜索内容</code> 打开 Dash 中的 API 介绍，<code>yd 待翻译内容</code> 显示翻译，其他 workflow 可以到网站 <a href="http://www.packal.org" target="_blank" rel="noopener">http://www.packal.org</a> 和 <a href="https://www.alfredapp.com/workflows" target="_blank" rel="noopener">https://www.alfredapp.com/workflows</a> 上看看</li><li>remote：远程控制电脑<br><img src="/images/mac/bookmarks.png" alt="image"></li></ul><p>完成设置后，之后几乎所有事都可以快捷键 cmd + space 打开 Alfred 解决，打开应用、搜索文件、执行命令、跳转网页、翻译、计算等等</p><h2 id="手势操作"><a href="#手势操作" class="headerlink" title="手势操作"></a>手势操作</h2><p>如果只是快捷键的话，windows 也有，没什么很特别的，mac 的优势之一就是它的触控板了，所以接下来介绍如何用好手势操作</p><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p>打开系统设置 <code>system preferences &gt; Trackpad</code>，看介绍选择自己喜欢的操作，<br>我推荐把四指切换桌面选上，平时切换桌面会方便很多；<br>还有三指上划显示 Mission Control 选上，方便切换任务、整理桌面</p><h3 id="设置-Hot-Corner"><a href="#设置-Hot-Corner" class="headerlink" title="设置 Hot Corner"></a>设置 Hot Corner</h3><p>打开 <code>system preferences &gt; Mission Control</code>，点击底部 Hot Corner，设置鼠标移入四个角时的操作，比如我的<br><img src="/images/mac/hotcorner.png" alt="image"></p><p>鼠标移入右下角息屏，右上角显示桌面，很方便，是我使用很多的功能</p><h3 id="添加手势扩展"><a href="#添加手势扩展" class="headerlink" title="添加手势扩展"></a>添加手势扩展</h3><p>推荐两个软件：<a href="http://www.jitouch.com/" target="_blank" rel="noopener">Jitouch</a> 和 <a href="https://www.boastr.net/" target="_blank" rel="noopener">BetterTouchTool</a></p><p>bettertouch 比 jitouch 更强大，支持的东西更多，但收费而且设置也会更复杂一点，对我来说 jitouch 已经够用，如果你喜欢折腾就去试下 bettertouch</p><p>安装好后设置自己喜欢的手势，比如我的<br><img src="/images/artifact/jitouch1.png" alt="image"><br><img src="/images/artifact/jitouch2.png" alt="image"></p><p>使用手势时要注意两指的距离，设置里可以调，但不要太近，太近容易跟滚动冲突，我推荐用食指和无名指划字。</p><p>我也试了下 buttertouch，它支持自定义手势，可选择的 action 也比 jitouch 多很多，但要注意一点，设置手势后还要设置一个快捷键选择 record gesture，然后每次操作先按这个快捷键出现可划动区域再划手势，其实这点没有 jitouch 好用。</p><h2 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h2><p>这节主要跟 terminal 有关，terminal 这也是 mac 另一大优势</p><p>推荐安装 oh my zsh 和 iTerm2，提升 terminal 的使用效率和逼格指数</p><h3 id="Oh-My-ZSH"><a href="#Oh-My-ZSH" class="headerlink" title="Oh My ZSH"></a>Oh My ZSH</h3><p><a href="http://ohmyz.sh/" title=" 点击访问 " target="_blank" rel="noopener">oh my zsh</a> is an open source, community-driven framework for managing your ZSH configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout…</p><ul><li>安装 oh my zsh 后默认 bash 改为 zsh，配置文件变为 <code>~/.zshrc</code>，通过 oh my zsh 可以很方便地安装主题、安装插件等。</li><li>zsh 的命令补全功能非常强大，可以补齐路径，补齐命令，补齐参数等。按下 tab 键显示出所有待选项后，再按一次 tab 键，即进入选择模式，进入选择模式后，按 tab 切向下一个选项，按 shift+tab 键切向上一个选项，ctrl+f/b/n/p 可以向前后左右切换。</li><li>之前杀进程是 <code>ps aux | grep xxx</code> 查进程的 PID，然后 kill -9 PID。在 zsh 中直接 kill xxx 然后按下 tab 键即可。也可以直接 <code>kill 空格 tab 键</code> 列出所有进程</li><li>建议加个主题再换个字体，设置一下颜色，逼格立马提高<br><img src="/images/mac/terminal3.png" alt="image"><br><img src="/images/mac/terminal7.png" alt="image"></li><li>推荐插件 zsh-syntax-highlighting(指令高亮效果作用是当用户输入正确命令时指令会绿色高亮，错误时命令红色高亮)、z、git 等等，查看官方插件地址 <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins</a></li><li>zsh 的目录跳转更为智能，你无需输入 cd，直接输入路径即可。.. 表示后退一级目录，../../ 表示后退两级，依次类推。<br>输入 d，将列出当前 session 访问过的所有目录，再按提示的数字即可进入相应目录。</li><li>zsh 的历史记录跨 session，可以共享。历史记录支持受限查找。比如，输入 git，再按向上箭头，会搜索用过的所有 git 命令。</li><li>通配符搜索: <code>ls *.png</code> 查找当前目录下所有 png 文件，<code>ls **/*.png</code> 递归查找，作用与 <code>find . -name &quot;*.png&quot; -print</code> 一样</li><li>递归操作：<code>**/*</code> ，比如 <code>ls **/*</code></li></ul><h3 id="VIM-快捷鍵"><a href="#VIM-快捷鍵" class="headerlink" title="VIM 快捷鍵"></a>VIM 快捷鍵</h3><ol><li>按 ESC 进入普通模式:</li></ol><ul><li>k 将光标上移一行</li><li>j 将光标下移一行</li><li>h 将光标左移一个字母</li><li>l 将光标右移一个字母</li><li>w 将光标右移至下一个单词或符号的开头（字母和数字组成的词）</li><li>W 将光标右移至下一个单词或符号的开头（以空格分隔的词）</li><li>b 将光标左移至当前单词或符号的开头（字母和数字组成的词）</li><li>B 将光标左移至当前单词或符号的开头（以空格分隔的词）</li><li>e 将光标左移至当前单词或符号的结尾（字母和数字组成的词）</li><li>E 将光标左移至当前单词或符号的结尾（以空格分隔的词）</li></ul><blockquote><p>数字加 jkhlwb 可以移动多行或字母，比如 nk 上移 n 行</p></blockquote><ul><li>J 合并当前行和下一行 (也可以加数字操作多行)</li><li>H 将光标移至当前可视范围的第一行</li><li>L 将光标移至当前可视范围的最后一行</li><li>0 将光标移至该行行首</li><li>$ 将光标移至该行行尾</li><li>nG 将光标移至第 n 行</li><li>G 将光标移至文件的最后一行</li><li>gg 将光标移至文件的第一行</li><li>{ 将光标移至上一段</li><li>} 将光标移至下一段</li><li>[[ 将光标移至文件首行</li><li>]] 将光标移至文件尾行</li></ul><p><strong>删除:</strong></p><ul><li>dd 删除光标所在的整行内容 (可以加数字删除多行)</li><li>d$ 删除从光标所在位置直到行尾</li><li>d^ 删除从光标所在位置直到行首</li><li>d) 删除从光标所在位置直到句尾</li><li>d0 删除从光标所在位置直到行首</li><li>dw 删除从光标所在位置直到下一个词开始的所有内容</li><li>x 删除光标后一字符</li><li>X 删除光标前一字符</li><li>dgg 删至文件开头</li><li>dG 删至文件末尾</li></ul><p><strong>复制粘贴:</strong></p><ul><li>yy 复制当前行 (可以加数字复制多行)</li><li>p 在光标之后粘贴复制行</li><li>P 在光标之前粘贴复制行</li></ul><p><strong>替换:</strong></p><ul><li>r{text} 将光标处的字符替换成 {text}</li><li>R 进入覆写模式 (REPLACE)，输入的字符将替换原有的字符</li></ul><p><strong>撤销:</strong></p><ul><li>u 撤销一个操作 (可以加数字撤销多个操作)</li><li>Ctrl+r 恢复上一步被撤销的操作 (取消撤销)</li></ul><p><strong>搜索:</strong></p><ul><li>:/{search_text} 检索文档，搜索光标之后出现的 {search_text}</li><li>?{search_text} 检索文档，搜索光标之前出现的 {search_text}</li><li>n 向后移动检索结果</li><li>N 向前移动检索结果</li><li>:%s/original/replacement 检索第一个 “original” 字符串并将其替换成 “replacement”</li><li>:%s/original/replacement/g 检索并将所有的 “original” 替换为 “replacement”</li><li>:%s/original/replacement/gc 检索出所有的 “original” 字符串，但在替换成 “replacement” 前，先询问是否替换</li></ul><ol start="2"><li>从普通模式进入编辑模式 (INSERT):</li></ol><ul><li>i 在当前光标位置之前插入内容</li><li>I 在光标所在行的行首插入内容</li><li>a 在当前光标位置之后插入内容</li><li>A 在光标所在行的行尾插入内容</li><li>o 在当前光标所在行之后添加一行</li><li>O 在当前光标所在行之前添加一行</li></ul><ol start="3"><li>从普通模式进入视图模式 (VISUAL):</li></ol><ul><li>v 进入逐字可视模式</li><li>V 进入逐行可视模式</li></ul><p><strong>在视图模式中:</strong></p><ul><li>移动光标 (←↑↓→) 选中操作范围</li><li>~ 切换大小写</li><li>d 剪切选中字符</li><li>y 复制选中字符</li></ul><ol start="4"><li>窗口操作:</li></ol><ul><li>:split 水平方向分割出一个窗口</li><li>:split otherfile 新建窗口打开另一个文件</li><li>:sview filename 以只读的方式水平分割打开一个新窗口</li><li>:vsplit 垂直方向分割出一个窗口</li><li>:close 关闭窗口</li><li>ctrl + w + w 切换窗口</li></ul><ol start="5"><li>退出 vim</li></ol><ul><li>:q 退出 Vim，如果文件已被修改，将退出失败</li><li>:w 保存文件</li><li>:w new_name 用 new_name 作为文件名保存为新文件 (原文件仍在)</li><li>:wq 保存文件并退出 Vim</li><li>:q! 退出 Vim，不保存文件改动</li><li>ZZ 退出 Vim，如果文件被改动过，保存改动内容</li><li>ZQ 与 :q! 相同，退出 Vim，不保存文件改动</li></ul><p>在线演示 vim 操作: <a href="http://www.openvim.com/" target="_blank" rel="noopener">http://www.openvim.com/</a></p><h3 id="VIM-配置"><a href="#VIM-配置" class="headerlink" title="VIM 配置"></a>VIM 配置</h3><p>编辑 <code>~/.vimrc</code> 文件，添加相应项开启相应功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&quot; 显示行号</span><br><span class="line">set nu</span><br><span class="line"></span><br><span class="line">&quot; 语法高亮</span><br><span class="line">syntax on</span><br><span class="line"></span><br><span class="line">&quot; 在状态行上显示光标所在位置的行号和列号</span><br><span class="line">set ruler</span><br><span class="line">set rulerformat=%20(%2*%&lt;%f%=\ %m%r\ %3l\ %c\ %p%%%)</span><br><span class="line"></span><br><span class="line">&quot; 允许折叠</span><br><span class="line">set foldenable</span><br><span class="line"></span><br><span class="line">&quot; 手动折叠</span><br><span class="line">set foldmethod=manual</span><br><span class="line"></span><br><span class="line">&quot; 命令行（在状态行下）的高度，默认为 1，这里是 2</span><br><span class="line">set cmdheight=2</span><br><span class="line"></span><br><span class="line">&quot; 使回格键（backspace）正常处理 indent, eol, start 等</span><br><span class="line">set backspace=2</span><br><span class="line"></span><br><span class="line">&quot; 通过使用: commands 命令，告诉我们文件的哪一行被改变过</span><br><span class="line">set report=0</span><br><span class="line"></span><br><span class="line">&quot; 侦测文件类型</span><br><span class="line">filetype on</span><br><span class="line"></span><br><span class="line">&quot; 载入文件类型插件</span><br><span class="line">filetype plugin on</span><br><span class="line"></span><br><span class="line">&quot; 为特定文件类型载入相关缩进文件</span><br><span class="line">filetype indent on</span><br><span class="line"></span><br><span class="line">&quot; 不让 vim 发出讨厌的滴滴声</span><br><span class="line">set noerrorbells</span><br><span class="line"></span><br><span class="line">&quot; 高亮显示匹配的括号</span><br><span class="line">set showmatch</span><br><span class="line"></span><br><span class="line">&quot; 在搜索的时候忽略大小写</span><br><span class="line">set ignorecase</span><br><span class="line"></span><br><span class="line">&quot; 在搜索时，输入的词句的逐字符高亮（类似 firefox 的搜索）</span><br><span class="line">set incsearch</span><br><span class="line"></span><br><span class="line">&quot; 继承前一行的缩进方式，特别适用于多行注释</span><br><span class="line">set autoindent</span><br><span class="line"></span><br><span class="line">&quot; 制表符为 4</span><br><span class="line">set tabstop=4</span><br><span class="line"></span><br><span class="line">&quot; 统一缩进为 4</span><br><span class="line">set softtabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line"></span><br><span class="line">&quot; 不要换行</span><br><span class="line">set nowrap</span><br></pre></td></tr></table></figure><p>推荐一个很好的 vim 配置库: <a href="https://github.com/spf13/spf13-vim" target="_blank" rel="noopener">https://github.com/spf13/spf13-vim</a></p><h3 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h3><p><a href="http://www.iterm2.com/" title=" 点击访问 " target="_blank" rel="noopener">iTerm2</a> 是代替原本的 terminal 工具，支持更多操作，<a href="http://wulfric.me/2015/08/iterm2/" target="_blank" rel="noopener">设置教程</a></p><ul><li><p>主题配色可以去 <a href="http://iterm2colorschemes.com/" target="_blank" rel="noopener">iterm2colorschemes.com</a> 找，我用的是 <code>idleToes</code></p></li><li><p>快捷键：<br><code>⌘ + Click</code>：可以打开文件，文件夹和链接<br><code>⌘ + n</code>：新建窗口<br><code>⌘ + t</code>：新建标签页<br><code>⌘ + w</code>：关闭当前页<br><code>⌘ + 数字 &amp; ⌘ + 方向键</code>：切换标签页<br><code>⌥⌘ + 数字</code>：切换窗口<br><code>⌘ + enter</code>：切换全屏<br><code>⌘ + d</code>：左右分屏<br><code>⇧⌘ + d</code>：上下分屏<br><code>⌘ + ;</code>：自动补全历史记录<br><code>⇧⌘ + h</code>：自动补全剪贴板历史<br><code>⌥⌘ + e</code>：查找所有来定位某个标签页<br><code>⌘ + r &amp; ⌃ + l</code>：清屏 (等同于输入 <code>clear</code> 命令和 <code>⌘ + K</code>)<br><code>⌘ + /</code>：显示光标位置<br><code>⌥⌘ + b</code>：历史回放<br><code>⌘ + f</code>：查找，然后用 tab 和 ⇧ + tab 可以向右和向左补全，补全之后的内容会被自动复制，还可以用 ⌥ + enter 将查找结果输入终端选中即复制，鼠标中键粘贴</p></li><li><p>命令行快捷键<br><code>⌃ + u</code>：清空当前行<br><code>⌃ + a</code>：移动到行首<br><code>⌃ + e</code>：移动到行尾<br><code>⌃ + r</code>：搜索历史命令<br><code>⌃ + y</code>：召回最近用命令删除的文字<br><code>⌃ + h</code>：删除光标之前的字符<br><code>⌃ + d</code>：删除光标所指的字符<br><code>⌃ + w</code>：删除光标之前的单词<br><code>⌃ + k</code>：删除从光标到行尾的内容<br><code>⌃ + t</code>：交换光标和之前的字符</p></li><li><p>iTerm2 参考设置<br><img src="/images/mac/terminal4.png" alt="image"><br><img src="/images/mac/terminal5.png" alt="image"><br><img src="/images/mac/terminal6.png" alt="image"></p></li><li><p>关闭向上滚动到头时的提示音：<code>Preferences/Profiles/Terminal/Notifications</code> 选中 <code>Silence bell</code></p></li></ul><p><img src="/images/mac/terminal1.png" alt="image"><br><img src="/images/mac/terminal2.png" alt="image"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>命令行设置大全：<a href="https://github.com/herrbischoff/awesome-osx-command-line" target="_blank" rel="noopener">https://github.com/herrbischoff/awesome-osx-command-line</a></p></li><li><p>允许安装任何来源的软件。从网上下载的安装包安装的应用一般是打不开的，macOS Sierra 之后的版本把“安全性与隐私”中的允许“任何来源”的选项去除了。<br>若要安装第三方软件需要恢复该选项：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo spctl --master-disable</span><br></pre></td></tr></table></figure><ul><li>替换 vi 为 vim</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install vim --with-lua --with-override-system-vi</span><br></pre></td></tr></table></figure><p>更新 vim</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew upgrade vim</span><br></pre></td></tr></table></figure><p>查看 vim 版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew info vim</span><br></pre></td></tr></table></figure><p>使用还是 <code>vi</code> 加文件名</p><ul><li>txt 中文乱码</li></ul><p>打开系统文本编辑器 TextEditor 的设置界面，修改 <code>Plain Text File Encoding</code> 的 <code>Opening files</code> 选项，选择 <code>Chinese(GB 18030)</code><br><img src="/images/mac/texteditor.png" alt="image"></p><ul><li>在 Dock 中显示最近打开的应用（Recent Applications）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock persistent-others -array-add &apos;&#123;&quot;tile-data&quot; = &#123;&quot;list-type&quot; = 1;&#125;; &quot;tile-type&quot; = &quot;recents-tile&quot;; &#125;&apos;</span><br><span class="line"></span><br><span class="line">killall -KILL Dock</span><br></pre></td></tr></table></figure><ul><li>Launchpad 里放下更多图标</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock springboard-columns -int 8; defaults write com.apple.dock springboard-rows -int 7; defaults write com.apple.dock ResetLaunchPad -bool TRUE; killall Dock</span><br></pre></td></tr></table></figure><p>命令中有两个数字 8 和 7，它们分别代表的是布局中的列数和行数</p><ul><li>Launchpad 背景透明度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock springboard-blur-radius -int 100; killall Dock</span><br></pre></td></tr></table></figure><p>其中数字 100 代表的背景模糊的程度，你可以在 0 ~ 255 的范围内选择</p><ul><li>homebrew 用法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 支持搜索，提供多种结果，如果只是单个应用名，你可以用 `brew install 命令行应用 ` 直接安装 (一般是命令行工具)</span><br><span class="line">// 名字前带着 cask 的代表 app 应用也就是平时使用的有图形化界面的应用，它们需要换个命令来安装 `brew cask install GUI 应用 `</span><br><span class="line">$ brew search 应用名（一般需英文名）</span><br><span class="line"></span><br><span class="line">// 查看是否由更新</span><br><span class="line">$ brew outdated</span><br><span class="line"></span><br><span class="line">// 更新所有，可以使用 `brew upgrade 应用名 ` 更新单个应用</span><br><span class="line">$ brew upgrade</span><br><span class="line"></span><br><span class="line">// 更新完后删除旧版和缓存，`brew cleanup -n` 只查看有哪些条目但不删除，`brew cleanup 应用名 ` 清除单应用</span><br><span class="line">$ brew cleanup</span><br><span class="line"></span><br><span class="line">// 访问应用官网，`brew cask home sketch` 访问 app 应用类的官网</span><br><span class="line">$ brew home 应用名</span><br></pre></td></tr></table></figure><ul><li>增强文件预览</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlimagesize webpquicklook suspicious-package quicklookase qlvideo</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dart 语法入门 I</title>
      <link href="/2017/10-Dart%20I.html"/>
      <url>/2017/10-Dart%20I.html</url>
      <content type="html"><![CDATA[<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个方法</span></span><br><span class="line">printNumber(<span class="built_in">num</span> aNumber) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'The number is $aNumber.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> number = <span class="number">42</span>;</span><br><span class="line">  printNumber(number); <span class="comment">// The number is 42</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重要概念-Important-concepts"><a href="#重要概念-Important-concepts" class="headerlink" title="重要概念 Important concepts"></a>重要概念 Important concepts</h2><ul><li>所有变量都可以看作对象 (object)，每个对象都是一个类的实例。<br>包括 numbers、function 和 null 都是对象。所有对象都继承自 Object 类。</li><li>指定静态类型（比如代码示例中的 num）表明你想指定的变量用途。（未指定具体类型的变量在 debug 时会发现被指定为一个特殊的类型：dynamic）<br>为确保代码类型安全，查看 <a href="https://www.dartlang.org/guides/language/sound-dart" target="_blank" rel="noopener">稳定模式 Dart</a></li><li>Dart 在运行前会解析所有代码。你可以先准备几点，比如使用类型和编译常量来捕获 errors 或者使代码运行更快。</li><li>Dart 支持顶层方法，比如 main()。也可以绑定在一个类或者对象上（分别为静态和实例方法）。也可以在方法中定义方法。</li><li>同理，Dart 也支持顶层变量，并且可以绑定到类或对象（静态和实例变量）。实例变量也称作字段或者属性。</li><li>不同于 Java，Dart 没有关键字 public、protected 和 private。如果一个标识符以下划线 _ 开头，则它的库使私有的。详见 <a href="https://www.dartlang.org/guides/language/language-tour#libraries-and-visibility" target="_blank" rel="noopener">库和可见性</a></li><li>标识符以字母和下划线 _ 开头，接着字母和数字的任意组合</li><li>Dart 工具可以报告两种问题：警告 Warnings 和错误 errors。</li><li>Dart 有两种运行模式：生产 (production) 和检查 (checked)。一般在检查模式开发和调试，最终部署到生产模式</li><li>Production mode 是 Dart 程序一个速度优化的默认运行模式。Production mode 忽略断言语句（assert statements）和静态类型</li><li>Checked mode 是开发人员友好的方式，可以帮助你在运行时捕捉一些类型的错误。例如，如果分配一个非数字来声明为一个 num 变量，然后在检查模式会抛出异常</li></ul><hr><h2 id="变量-Variables"><a href="#变量-Variables" class="headerlink" title="变量 Variables"></a>变量 Variables</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Voyager I'</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1977</span>;</span><br><span class="line"><span class="keyword">var</span> antennaDiameter = <span class="number">3.7</span>;</span><br><span class="line"><span class="keyword">var</span> flybyObjects = [<span class="string">'Jupiter'</span>, <span class="string">'Saturn'</span>, <span class="string">'Uranus'</span>, <span class="string">'Neptune'</span>];</span><br><span class="line"><span class="keyword">var</span> image = &#123;</span><br><span class="line">  <span class="string">'tags'</span>: [<span class="string">'saturn'</span>],</span><br><span class="line">  <span class="string">'url'</span>: <span class="string">'//path/to/saturn.jpg'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>未初始化的变量值为 null，即使指定了数字类型也是 null，因为 numbers 也是对象。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> lineCount;</span><br><span class="line"><span class="keyword">assert</span>(lineCount == <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// Variables (even if they will be numbers) are initially null.</span></span><br><span class="line"><span class="comment">// assert(condition) 方法只在检查模式下有用，表达式的值或者函数返回 true，则 assert 语句成功并继续执行代码。如果值为 false，则 assert 语句失败并抛出一个异常 (AssertionError)</span></span><br></pre></td></tr></table></figure><h3 id="final-和-const"><a href="#final-和-const" class="headerlink" title="final 和 const"></a>final 和 const</h3><p>一个 final 变量只能设定一次且不能更改，一个 const 变量是编译时变量（const 变量是隐式 final 变量）。<br>一个 final 的顶层变量或者类变量，会在它第一次被调用时初始化。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> name = <span class="string">'Bob'</span>; <span class="comment">// Or: final String name = 'Bob';</span></span><br><span class="line">name = <span class="string">'Alice'</span>;  <span class="comment">// Uncommenting this causes an error</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [] 创建一个空数组，const [] 创建一个不可变空数组 (EIA)</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">const</span> [];   <span class="comment">// foo 当前是 EIA</span></span><br><span class="line"><span class="keyword">final</span> bar = <span class="keyword">const</span> []; <span class="comment">// bar 一直是 EIA</span></span><br><span class="line"><span class="keyword">const</span> baz = <span class="keyword">const</span> []; <span class="comment">// baz 是编译时的 EIA</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以改变非 final、const 定义的变量，即使它之前是赋的 const 值，比如 foo</span></span><br><span class="line">foo = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但 bar、baz 不能更改</span></span><br></pre></td></tr></table></figure><h3 id="可选的静态类型"><a href="#可选的静态类型" class="headerlink" title="可选的静态类型"></a>可选的静态类型</h3><p>变量类型包括：numbers、strings、booleans、lists（也就是数组）、maps、runs、symbols。<br>每个变量类型有自定义的构造函数，比如 new Map() 创建一个 map 变量。</p><p><code>数字类型 numbers</code> 分 int（-2e53～2e53）和 double 型（IEEE 754 标准）, 支持 abs()、ceil() 等 <a href="https://api.dartlang.org/stable/dart-math/dart-math-library.html" target="_blank" rel="noopener">math 函数</a>。<br>int 型支持位运算，如&lt;&lt;、&gt;&gt;、&amp; 和 |</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line"><span class="comment">// String -&gt; int</span></span><br><span class="line"><span class="keyword">var</span> one = <span class="built_in">int</span>.parse(<span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">assert</span>(one == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// String -&gt; double</span></span><br><span class="line"><span class="keyword">var</span> onePointOne = <span class="built_in">double</span>.parse(<span class="string">'1.1'</span>);</span><br><span class="line"><span class="keyword">assert</span>(onePointOne == <span class="number">1.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// int -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> oneAsString = <span class="number">1.</span>toString();</span><br><span class="line"><span class="keyword">assert</span>(oneAsString == <span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// double -&gt; String</span></span><br><span class="line"><span class="built_in">String</span> piAsString = <span class="number">3.14159</span>.toStringAsFixed(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">assert</span>(piAsString == <span class="string">'3.14'</span>);</span><br></pre></td></tr></table></figure><h3 id="字符串类型-Strings"><a href="#字符串类型-Strings" class="headerlink" title="字符串类型 Strings"></a>字符串类型 Strings</h3><p>Strings 是 UTF-16 代码单元的序列，可以使用单引号或双引号创建一个字符串。</p><p>可以通过使用 ${expression} 把一个表达式的值放进字符串。如果表达式是一个标识符，你可以跳过{}。为了获得相应对象的字符串，Dart 调用对象的 toString（）方法。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'string interpolation'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">'Dart has $s, which is very handy.'</span> ==</span><br><span class="line">       <span class="string">'Dart has string interpolation, '</span> +</span><br><span class="line">       <span class="string">'which is very handy.'</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">assert</span>(<span class="string">'That deserves all caps. '</span> +</span><br><span class="line">       <span class="string">'<span class="subst">$&#123;s.toUpperCase()&#125;</span> is very handy!'</span> ==</span><br><span class="line">       <span class="string">'That deserves all caps. '</span> +</span><br><span class="line">       <span class="string">'STRING INTERPOLATION is very handy!'</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以利用相邻字符串或 + 运算符连接字符串：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">'String '</span> <span class="string">'concatenation'</span></span><br><span class="line">         <span class="string">" works even over line breaks."</span>;</span><br><span class="line"><span class="keyword">assert</span>(s1 == <span class="string">'String concatenation works even over '</span></span><br><span class="line">             <span class="string">'line breaks.'</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">'The + operator '</span></span><br><span class="line">         + <span class="string">'works, as well.'</span>;</span><br><span class="line"><span class="keyword">assert</span>(s2 == <span class="string">'The + operator works, as well.'</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>使用三个单或双引号创建一个多行字符串</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">'''</span></span><br><span class="line"><span class="string">You can create</span></span><br><span class="line"><span class="string">multi-line strings like this one.</span></span><br><span class="line"><span class="string">'''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">"""This is also a multi-line string."""</span>;</span><br></pre></td></tr></table></figure><p>带有 r 的前缀来创建一个“raw”的字符串</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">r"In a raw string, even \n isn't special."</span>;</span><br></pre></td></tr></table></figure><p>支持 Unicode 转义</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">'Unicode escapes work: \u2665'</span>);</span><br></pre></td></tr></table></figure><h3 id="布尔类型-booleans"><a href="#布尔类型-booleans" class="headerlink" title="布尔类型 booleans"></a>布尔类型 booleans</h3><p>不同于 javaScript，1、“aString”、someObject 都视为假的</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Bob'</span>;</span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">  <span class="comment">// JavaScript 中会产生打印，而 Dart 中不会</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'in javaScript, You have a name!'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'but in Dart, print this line'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在 Dart 生产模式下，上述条件为假；而在检查模式下，程序会抛出一个异常，因为 name 类型不是 bool</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'JS prints this line.'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Dart in production mode prints this line.'</span>);</span><br><span class="line">  <span class="comment">// 但在 checked 模式下会抛出一个异常，因为 1 不是一个 boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dart 的判断条件应该指定为布尔类型，不能使用 if（nonbooleanValue），这个在检查模式下会抛出异常</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查一个空字符串.</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">assert</span>(fullName.isEmpty);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查为零.</span></span><br><span class="line"><span class="keyword">var</span> hitPoints = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(hitPoints &lt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否为空.</span></span><br><span class="line"><span class="keyword">var</span> unicorn;</span><br><span class="line"><span class="keyword">assert</span>(unicorn == <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查 NaN.</span></span><br><span class="line"><span class="keyword">var</span> iMeantToDoThis = <span class="number">0</span> / <span class="number">0</span>;</span><br><span class="line"><span class="keyword">assert</span>(iMeantToDoThis.isNaN);</span><br></pre></td></tr></table></figure><h3 id="列表类型-List"><a href="#列表类型-List" class="headerlink" title="列表类型 List"></a>列表类型 List</h3><p>在 Dart，数组是列表对象，所以我们通常只是将其称为 lists。<br>常见用法与 javaScript 类似：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'apples'</span>, <span class="string">'oranges'</span>]; <span class="comment">// 也可以用构造函数 new List('apples', 'oranges')</span></span><br><span class="line"><span class="comment">// 如果指定类型, new List&lt;String&gt;('apples') 或者&lt;String&gt;['apples'] 则只能存放字符类型, 否则在检查模式下加入非指定类型元素会抛出异常</span></span><br><span class="line"></span><br><span class="line">fruits.add(<span class="string">'kiwis'</span>); <span class="comment">// 添加元素</span></span><br><span class="line"></span><br><span class="line">fruits.addAll([<span class="string">'grapes'</span>, <span class="string">'bananas'</span>]); <span class="comment">// 添加多个元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(fruits.length == <span class="number">5</span>); <span class="comment">// 获取长度</span></span><br><span class="line"></span><br><span class="line">fruits.forEach((item) =&gt; <span class="built_in">print</span>(<span class="string">'I have some $item'</span>)) <span class="comment">// forEach((key, value) =&gt; &#123;&#125;) 可以传两个参数</span></span><br><span class="line"></span><br><span class="line">fruits.map((item) =&gt; <span class="built_in">print</span>(<span class="string">'I have some $item'</span>))</span><br><span class="line"></span><br><span class="line">fruits.where((item) =&gt; item === <span class="string">'oranges'</span>) <span class="comment">// where() 筛选符合条件的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一个元素</span></span><br><span class="line"><span class="keyword">var</span> appleIndex = fruits.indexOf(<span class="string">'apples'</span>);</span><br><span class="line">fruits.removeAt(appleIndex);</span><br><span class="line"><span class="keyword">assert</span>(fruits.length == <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空列表</span></span><br><span class="line">fruits.clear();</span><br><span class="line"><span class="keyword">assert</span>(fruits.length == <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>更多用法详见 <a href="https://www.dartlang.org/guides/language/language-tour#generics" target="_blank" rel="noopener">泛型 Generics</a> 和 <a href="https://www.dartlang.org/docs/dart-up-and-running/ch03.html#collections" target="_blank" rel="noopener">集合 Collections</a>。</p><h3 id="Maps-类型"><a href="#Maps-类型" class="headerlink" title="Maps 类型"></a>Maps 类型</h3><p>一般情况下，map 是一个键值对组成的对象，这两个键和值可以是任何类型的对象。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gifts = &#123;</span><br><span class="line">  <span class="string">'first'</span> : <span class="string">'partridge'</span>,</span><br><span class="line">  <span class="string">'second'</span>: <span class="string">'turtledoves'</span>,</span><br><span class="line">  <span class="string">'fifth'</span> : <span class="string">'golden rings'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nobleGases = &#123;</span><br><span class="line">  <span class="number">2</span> :   <span class="string">'helium'</span>,</span><br><span class="line">  <span class="number">10</span>:   <span class="string">'neon'</span>,</span><br><span class="line">  <span class="number">18</span>:   <span class="string">'argon'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ----- 也可以使用构函数 ----- */</span></span><br><span class="line"><span class="keyword">var</span> gifts = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">gifts[<span class="string">'first'</span>] = <span class="string">'partridge'</span>; <span class="comment">// 直接添加键值对</span></span><br><span class="line">gifts[<span class="string">'second'</span>] = <span class="string">'turtledoves'</span>;</span><br><span class="line">gifts[<span class="string">'fifth'</span>] = <span class="string">'golden rings'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nobleGases = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">nobleGases[<span class="number">2</span>] = <span class="string">'helium'</span>;</span><br><span class="line">nobleGases[<span class="number">10</span>] = <span class="string">'neon'</span>;</span><br><span class="line">nobleGases[<span class="number">18</span>] = <span class="string">'argon'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(nobleGases.length == <span class="number">3</span>) <span class="comment">// length 返回 map 中键值对的数目</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个编译时常量</span></span><br><span class="line"><span class="keyword">final</span> constantMap = <span class="keyword">const</span> &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="string">'helium'</span>,</span><br><span class="line">  <span class="number">10</span>: <span class="string">'neon'</span>,</span><br><span class="line">  <span class="number">18</span>: <span class="string">'argon'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">constantMap[<span class="number">2</span>] = <span class="string">'Helium'</span>; <span class="comment">// 会报错，因为不可更改</span></span><br></pre></td></tr></table></figure><h3 id="Runes-符号类型"><a href="#Runes-符号类型" class="headerlink" title="Runes 符号类型"></a>Runes 符号类型</h3><p>在 Dart 中，runes 是字符串的 UTF-32 点。Unicode 给每个字符定义了一个值。因为 Dart 中的字符串是 UTF-16 单元的序列，所以表达 32 位 Unicode 值需要特定的语法来实现。<br>通常一个 Unicode 码的形式是 /uXXXX，XXXX 是 4 位 16 进制的值，比如 \u2665 代表♥这个符号，当指定多于或少于 4 位的 16 进制时用{}包裹，比如 \u{1f600}代表😆这个符号。<br>字符串的属性方法中 codeUnitAt 和 codeUnit 返回 16 位代码单元，runes 属性方法用于获取 String 类型的 runes 值：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">main() &#123;</span><br><span class="line">  <span class="keyword">var</span> clapping = <span class="string">'\u&#123;1f44f&#125;'</span>;</span><br><span class="line">  <span class="built_in">print</span>(clapping);</span><br><span class="line">  <span class="built_in">print</span>(clapping.codeUnits);</span><br><span class="line">  <span class="built_in">print</span>(clapping.runes.toList());</span><br><span class="line"></span><br><span class="line">  Runes input = <span class="keyword">new</span> Runes(</span><br><span class="line">      <span class="string">'\u2665  \u&#123;1f605&#125;  \u&#123;1f60e&#125;  \u&#123;1f47b&#125;  \u&#123;1f596&#125;  \u&#123;1f44d&#125;'</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="keyword">new</span> <span class="built_in">String</span>.fromCharCodes(input));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">👏</span><br><span class="line">[<span class="number">55357</span>, <span class="number">56399</span>]</span><br><span class="line">[<span class="number">128079</span>]</span><br><span class="line">♥  😅  😎  👻  🖖  👍</span><br></pre></td></tr></table></figure><h3 id="符号类型-symbols"><a href="#符号类型-symbols" class="headerlink" title="符号类型 symbols"></a>符号类型 symbols</h3><p>一个符号对象表示在 Dart 程序中声明的操作符或标识。你可能不会需要使用这些符号，但他们对于由名字指向的 API 是很有用的，因为时常要改变的是标识符的名字，而不是标识符的符号。</p><p>为了得到符号的标识，使用符号的文本，只是＃后跟标识符：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#radix</span><br><span class="line">#bar</span><br></pre></td></tr></table></figure><p>更多详细信息见 <a href="https://www.dartlang.org/docs/dart-up-and-running/ch03.html#dartmirrors---reflection" target="_blank" rel="noopener">Dart: mirrors—reflection</a></p>]]></content>
      
      <categories>
          
          <category> Dart </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dart </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分享自用的一些软件、插件、网站和应用</title>
      <link href="/2017/09-ShareArtifact.html"/>
      <url>/2017/09-ShareArtifact.html</url>
      <content type="html"><![CDATA[<blockquote><p>这些只是收录我现在用到的东西，没有特意收集的意思，未必很全，但每个应该都很实用<br><a href="https://github.com/wangriyu/Collections" title=" 点击访问 " target="_blank" rel="noopener">Github 仓库</a></p></blockquote><h2 id="插件篇"><a href="#插件篇" class="headerlink" title="插件篇"></a>插件篇</h2><h3 id="Chrome-插件"><a href="#Chrome-插件" class="headerlink" title="Chrome 插件"></a>Chrome 插件</h3><ul><li><p>Adblock Plus: 屏蔽广告，必备，不用介绍</p></li><li><p><a href="https://chrome.google.com/webstore/detail/code-cola/lomkpheldlbkkfiifcbfifipaofnmnkn" title=" 点击访问 " target="_blank" rel="noopener">Code Cola</a>：一个可视化编辑在线页面 css 样式的 chrome 插件，相当于控制台修改的效果，但方便很多</p></li><li><p><a href="https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl" title=" 点击访问 " target="_blank" rel="noopener">Full Page Screen Capture</a>：可以滚动截取整个网页</p></li><li><p><a href="https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad" target="_blank" rel="noopener">划词翻译</a>：划词翻译，支持谷歌、百度、有道翻译</p></li><li><p>★★<a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简阅</a>：巨好用的插件，相当于添加了阅读模式，界面很漂亮，设置很全，功能也挺完整</p></li><li><p><a href="https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn" title=" 点击访问 " target="_blank" rel="noopener">Page Ruler</a>：网页标尺，可以方便测量各个元素的尺寸</p></li><li><p>★<a href="http://chrispederick.com/work/web-developer/" title=" 点击访问 " target="_blank" rel="noopener">Web Developer</a>：前端必备，功能强大，可以设置网页上几乎所有东西</p></li><li><p>★★<a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad?utm_source=chrome-ntp-icon" title=" 点击访问 " target="_blank" rel="noopener">WEB 前端助手 (FeHelper)</a>：也是前端必备，包括 json 美化、页面测试、编解码、代码美化压缩等等</p></li><li><p>★有道云笔记网页剪报：配合有道云笔记，方便收藏各种笔记、网页</p></li><li><p><a href="https://chrome.google.com/webstore/detail/wide-github/kaalofacklcidaampbokdplbklpeldpj" title=" 点击访问 " target="_blank" rel="noopener">Wide Github</a>：加宽 GitHub 的页面内容，让你的 GitHub 网页显示更舒服</p></li><li><p><a href="https://chrome.google.com/webstore/detail/sourcegraph-for-github/dgjhfomjieaadpoljlnidmbgkdffpack" title=" 点击访问 " target="_blank" rel="noopener">Sourcegraph for GitHub</a>：相当于一个 IDE，直接查看 GitHub 上的仓库</p></li><li><p><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US" title=" 点击访问 " target="_blank" rel="noopener">Octotree</a>：GitHub 插件，极力推荐，在仓库左上角显示目录，直接点击文件跳转，不用一级级打开网页上的 repo</p></li><li><p>★★<a href="https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh" title=" 点击访问 " target="_blank" rel="noopener">Insight.io for Github</a>：功能和 Octotree 类似，比 Octotree 略微高级点</p></li><li><p>★<a href="https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien" title=" 点击访问 " target="_blank" rel="noopener">Isometric Contributions</a>：装逼利器，让 GitHub profile 页的提交记录立体化，跟 gitee 的效果差不多</p></li><li><p>★★<a href="https://chrome.google.com/webstore/detail/github-plus/anlikcnbgdeidpacdbdljnabclhahhmd" title=" 点击访问 " target="_blank" rel="noopener">GitHub Plus</a>：极力推荐，显示仓库、文件大小，并提供单文件的下载</p></li><li><p><a href="http://listen1.github.io/listen1" title=" 点击访问 " target="_blank" rel="noopener">Lisen1</a>：很棒的一个音乐插件，还有客户端版本</p></li><li><p>★<a href="https://muz.li/" title=" 点击访问 " target="_blank" rel="noopener">Muzli</a>：集合了很多网站的最新更新，一站式阅读新闻和资讯，适合设计者和开发者</p></li><li><p><a href="https://chrome.google.com/webstore/detail/feedly/hipbfijinpcgfogaopmgehiegacbhmob?utm_source=chrome-ntp-icon" title=" 点击访问 " target="_blank" rel="noopener">feedly</a>：一个 webapp，可以收藏网址，主要用于 RSS 和博客订阅</p></li><li><p><a href="https://userstyles.org/" title=" 点击访问 " target="_blank" rel="noopener">stylish</a>：可以自定义浏览器主题样式，也可以安装别人的</p></li><li><p>★<a href="https://chrome.google.com/webstore/detail/addtoany-share-anywhere/ffpgijchhhkhnokafdeklpllijgnbche" title=" 点击访问 " target="_blank" rel="noopener">AddToAny: Share Anywhere</a>：一个分享插件</p></li><li><p><a href="https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener">Tampermonkey</a>：油猴脚本，各个浏览器都有，加上脚本就是神器了，脚本可以到 <a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">GreasyFork</a> 找</p></li><li><p><a href="http://www.chengyinliu.com/whatfont.html" target="_blank" rel="noopener">WhatFont</a>: 可以找出网站上每处使用的字体</p></li><li><p><a href="https://chrome.google.com/webstore/detail/pesticide-for-chrome/bblbgcheenepgnnajgfpiicnbbdmmooh" target="_blank" rel="noopener">Pesticide</a>: 标记所有元素的边框</p></li><li><p><a href="https://chrome.google.com/webstore/detail/css-peeper/mbnbehikldjhnfehhnaidhjhoofhpehk" target="_blank" rel="noopener">CSS Peeper</a>: 可以分析出网站使用的字体、颜色方案、图片</p></li></ul><h3 id="Terminal-插件"><a href="#Terminal-插件" class="headerlink" title="Terminal 插件"></a>Terminal 插件</h3><p>Terminal 插件和 vim 插件没怎么试过. 感兴趣的可以到这个网站看看：<a href="https://vimawesome.com/" target="_blank" rel="noopener">Vim Awesome</a></p><p>这里有几个我用过的:</p><ul><li><p>★★<a href="http://ohmyz.sh/" target="_blank" rel="noopener">Oh My ZSH</a>：方便个性化配置你的 zsh<br>加个 ys 主题，换个字体，再加个背景图片，逼格立马上升了:<br><img src="/images/mac/terminal1.png" alt="image"></p></li><li><p><a href="https://github.com/johngrib/vim-game-code-break" title=" 点击访问 " target="_blank" rel="noopener">VimGameCodeBreak</a>：打开一个文本，开始一盘打方块游戏吧，注意需要 vim8.0</p></li><li><p><a href="https://github.com/aksakalli/gtop" title=" 点击访问 " target="_blank" rel="noopener">gtop</a>：在终端显示电脑 cpu、内存、进程信息</p></li><li><p><a href="https://github.com/hishamhm/htop" target="_blank" rel="noopener">htop</a>：better top</p></li><li><p><a href="https://github.com/nicolargo/glances" target="_blank" rel="noopener">glances</a>: Glances an Eye on your system. A top/htop alternative. <a href="http://nicolargo.github.io/glances/" target="_blank" rel="noopener">http://nicolargo.github.io/glances/</a></p></li><li><p><a href="https://github.com/jakubroztocil/httpie" target="_blank" rel="noopener">httpie</a>: 测试 http</p></li><li><p><a href="https://github.com/dbcli/mycli" target="_blank" rel="noopener">mycli</a>: A Terminal Client for MySQL with AutoCompletion and Syntax Highlighting</p></li><li><p><a href="https://github.com/jeffkaufman/icdiff" target="_blank" rel="noopener">icdiff</a>: improved colored diff <a href="http://www.jefftk.com/icdiff" target="_blank" rel="noopener">http://www.jefftk.com/icdiff</a></p></li></ul><h3 id="VS-Code-插件"><a href="#VS-Code-插件" class="headerlink" title="VS Code 插件"></a>VS Code 插件</h3><p>更多 vsc 插件可以到官方市场搜索 <a href="https://marketplace.visualstudio.com/search?target=VSCode&amp;category=All%20categories&amp;sortBy=Downloads" target="_blank" rel="noopener">https://marketplace.visualstudio.com/search?target=VSCode&amp;category=All%20categories&amp;sortBy=Downloads</a></p><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=RoscoP.ActiveFileInStatusBar" target="_blank" rel="noopener">Active File In Status Bar</a>：在底部显示文档绝对路径</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag" target="_blank" rel="noopener">Auto Close Tag</a>：自动补全关闭的标签，比如</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag" target="_blank" rel="noopener">Auto Rename Tag</a>：当你修改标签头时，同时修改标签尾</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer" target="_blank" rel="noopener">Bracket Pair Colorizer</a>：给各个括号添加颜色</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome" target="_blank" rel="noopener">Debugger for Chrome</a>：在 Google Chrome 浏览器调试 JavaScript 代码</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="noopener">ESLint</a>：代码检查工具</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense" target="_blank" rel="noopener">npm Intellisense</a>：在 import 导入语句中自动完成 npm 模块</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=mkxml.vscode-filesize" target="_blank" rel="noopener">filesize</a>：显示文件大小</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" target="_blank" rel="noopener">Material Icon Theme</a>：提供 MD 风格的文档图标</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense" target="_blank" rel="noopener">Path Intellisense</a>：路径自动补全</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=searKing.preview-vscode" target="_blank" rel="noopener">Preview</a>：提供 Markdown, ReStructured Text, HTML, Jade, Pug, Mermaid files, Image’s URI or CSS properties 的预览，MAC 快捷键:cmd+shift+v</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=DoubleWoodH.word-count" target="_blank" rel="noopener">Word Count</a>：字数统计，同事写的</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=bibhasdn.git-easy" target="_blank" rel="noopener">Git Easy</a>：让 git 更方便</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets" target="_blank" rel="noopener">JavaScript (ES6) code snippets</a>：代码片段插件，支持 js 和 ts，比如输入 imp 生成 import fs from ‘fs’;</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=joelday.docthis" target="_blank" rel="noopener">Document This</a>：自动给 js 代码添加注释</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="noopener">Prettier</a>：格式化 js 代码，快捷键 <code>cmd + shift + p</code> 输入 Format Document 或 Format Selection(先选中要格式化的文本)</p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode" target="_blank" rel="noopener">Polacode</a>: 生成漂亮的代码图片</p></li></ul><p>Settings:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;workbench.iconTheme&quot;: &quot;material-icon-theme&quot;,</span><br><span class="line">    &quot;workbench.colorTheme&quot;: &quot;Quiet Light&quot;,</span><br><span class="line">    &quot;editor.fontSize&quot;: 16,</span><br><span class="line">    &quot;editor.tabSize&quot;: 2,</span><br><span class="line">    &quot;editor.renderWhitespace&quot;: &quot;boundary&quot;,</span><br><span class="line">    &quot;git.enabled&quot;: false,</span><br><span class="line">    &quot;files.autoSave&quot;: &quot;onFocusChange&quot;,</span><br><span class="line">    &quot;licenseheader.Author&quot;: &quot;Wang RiYu&quot;,</span><br><span class="line">    &quot;licenseheader.CopiedBy&quot;: &quot;Copyright (c) 2018 SmartestEE Co,Ltd..&quot;,</span><br><span class="line">    &quot;extensions.ignoreRecommendations&quot;: true,</span><br><span class="line">    &quot;material-icon-theme.showUpdateMessage&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IDE-插件"><a href="#IDE-插件" class="headerlink" title="IDE 插件"></a>IDE 插件</h3><p>分享两个 JetBrains 的插件，无意间看到的</p><ul><li><p><a href="https://plugins.jetbrains.com/plugin/8502-background-image-plus" target="_blank" rel="noopener">Background Image Plus</a>: 设置背景图片的，效果如下<br><img src="/images/artifact/background1.png" alt="image"><br><img src="/images/artifact/background2.png" alt="image"></p></li><li><p><a href="https://plugins.jetbrains.com/plugin/8330-activate-power-mode" target="_blank" rel="noopener">activate-power-mode</a>: 这原本是 Atom 的插件，移植过来的，效果还行吧，但是这东西华而不实，如果影响打字还是去掉得好。还有如果安装后发现没有效果，记得把 combo 那个选项去掉，因为默认要连击多少下才会出效果</p></li><li><p><a href="">carbon-now-sh</a>: 选中代码，右键 Open in carbon.now.sh，会打开 <a href="https://carbon.now.sh" target="_blank" rel="noopener">https://carbon.now.sh</a> ，可以生成一张图片</p></li></ul><hr><h2 id="软件篇"><a href="#软件篇" class="headerlink" title="软件篇"></a>软件篇</h2><ul><li><p>★<a href="https://pdfexpert.com/" title=" 点击访问 " target="_blank" rel="noopener">PDF Expert</a>：mac 上最好用最强大的 pdf 软件，如果资金有限不想购买的客官可以看下 <a href="http://xclient.info/s/pdf-expert-for-mac.html?_=f7d710b8833dbc76de5d7640956a0551" title=" 点击访问 " target="_blank" rel="noopener">Xclient.info</a></p></li><li><p>★★<a href="https://typora.io/" title=" 点击访问 " target="_blank" rel="noopener">Typora</a>：方便快速地编写 MarkDown，界面简单，实用高效</p></li><li><p>★<a href="https://itunes.apple.com/cn/app/networker-%E6%98%BE%E7%A4%BA%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF/id1163602886?mt=12" title=" 点击访问 " target="_blank" rel="noopener">NetWorker</a>：状态栏显示网速，简单美观</p></li><li><p>★<a href="https://itunes.apple.com/us/app/istatistica/id1025822138?mt=12" title=" 点击访问 " target="_blank" rel="noopener">iStatistica</a>：一款颜值颇高的系统监控软件，它包括通知中心小部件和状态栏菜单<br><img src="/images/artifact/iStatistica.png" alt="image"></p></li><li><p>★<a href="https://sipapp.io/" title=" 点击访问 " target="_blank" rel="noopener">Sip</a>：很好用的取色工具，需要购买，如果资金有限不想购买的客官可以看下 <a href="http://xclient.info/s/sip.html?_=f7d710b8833dbc76de5d7640956a0551" title=" 点击访问 " target="_blank" rel="noopener">Xclient.info</a></p></li><li><p>★★<a href="https://justgetflux.com/" target="_blank" rel="noopener">F.lux</a>：一款根据时间调整屏幕色温的软件，适合长期用眼的人，推荐程序员使用</p></li><li><p>★★<a href="http://faststone.org/FSCaptureDetail.htm" title=" 点击访问 " target="_blank" rel="noopener">FastStone Capture</a>：Windows 上一款非常强大的集取色截屏录屏于一身的软件，而且支持滚动截屏，可惜 mac 上没有</p></li><li><p>★★<a href="https://note.youdao.com/" title=" 点击访问 " target="_blank" rel="noopener">有道云笔记</a>：收藏编写笔记很方便，配合浏览器插件可以收藏网页，关注官方公众号还可以把微信文章也收藏进去，我的所有收藏和笔记都可以放进去，而且多端同步随时可以看，手机版还可以写 markdown</p></li><li><p><a href="http://snip.qq.com/" title=" 点击访问 " target="_blank" rel="noopener">Snip</a>：之前找 mac 上支持滚动截屏的软件，但没找到很好的能代替 Windows 平台利器 FastStone 的，这个 Snip 勉强符合滚动截屏的要求</p></li><li><p>★<a href="http://jietu.qq.com" title=" 点击访问 " target="_blank" rel="noopener">Jietu</a>：和 snip 一样同出于鹅厂，也有滚动截屏，功能多一点，可以代替 snip</p></li><li><p>★<a href="https://itunes.apple.com/app/id992076693?mt=12&amp;ign-mpt=uo%3D4" title=" 点击访问 " target="_blank" rel="noopener">MindNode</a>：很漂亮的一款思维导图，如果资金有限不想购买的客官可以看下 <a href="http://xclient.info/s/mind-node-pro.html?_=f7d710b8833dbc76de5d7640956a0551" title=" 点击访问 " target="_blank" rel="noopener">Xclient.info</a></p></li><li><p><a href="https://itunes.apple.com/cn/app/expressions/id913158085?l=en&amp;mt=12" title=" 点击访问 " target="_blank" rel="noopener">Expressions</a>：一款 macOS 平台的强大的正则表达式工具，测试正则表达式，多种主题，选中高亮等。如果资金有限不想购买的客官可以看下 <a href="http://xclient.info/s/expressions.html?_=f7d710b8833dbc76de5d7640956a0551" title=" 点击访问 " target="_blank" rel="noopener">Xclient.info</a></p></li><li><p><a href="https://cleanmymac.com/" title=" 点击访问 " target="_blank" rel="noopener">CleanMyMac3</a>：清理 mac 垃圾的软件，颜值比较高</p></li><li><p><a href="https://www.omnigroup.com/more" target="_blank" rel="noopener">OmniDiskSweeper</a>：能快速扫描磁盘并找出占用空间大的文档或文件</p></li><li><p><a href="https://freemacsoft.net/appcleaner/" target="_blank" rel="noopener">AppCleaner</a>：可以完全卸载软件</p></li><li><p><a href="https://webtorrent.io/desktop/" title=" 点击访问 " target="_blank" rel="noopener">WebTorrent</a>：直接看磁链里的内容，无需等待下载</p></li><li><p><a href="https://framer.com/features/" title=" 点击访问 " target="_blank" rel="noopener">Framer</a>：一个设计开发用的</p></li><li><p><a href="http://tumult.com/hype/pro/" title=" 点击访问 " target="_blank" rel="noopener">Tumult</a>：也是一个设计工具，还没用过</p></li><li><p>★<a href="http://xclient.info/s/new-file-menu.html?_=8f2ea7453a409bd6674c05d22079f675" title=" 点击访问 " target="_blank" rel="noopener">New File Menu</a>：finder 扩展，右键新建文件，还可以自定义文件模板</p></li><li><p>★★<a href="https://www.freedownloadmanager.org/" title=" 点击访问 " target="_blank" rel="noopener">FDM</a>：全称 free download manager，相当于免费的 idm，而且支持 mac 平台，支持下载 youtubu 视频，支持 url 或者 torrent，我还试了下 mac 平台另一款网上推荐的下载工具 folx，但 folx 速度好像比不上 fdm</p></li><li><p>★<a href="http://www.eigenlogik.com/entropy/" title=" 点击访问 " target="_blank" rel="noopener">Entropy</a>：很强大的解压缩软件，支持多种格式，操作便捷，但收费，如果资金有限不想购买的客官可以看下 <a href="http://xclient.info/s/entropy.html?_=38c50d7151e1cd2d16ca86daef7039c2" target="_blank" rel="noopener">xclient.info</a></p></li><li><p>★<a href="https://itunes.apple.com/cn/app/leaf-rss-news-reader/id576338668?l=en&amp;mt=12" target="_blank" rel="noopener">Leaf</a>：RSS News Reader, 订阅 RSS 源后，可以一站式阅读，之前不知道 rss 这东西，傻傻地一个个打开别人博客看文章<br>我收藏的 RSS 源: <a href="https://mega.nz/#!lW4BgLKQ!hDcw-jH3MDbjMHo8G_0phrRPaVXVSZP5ZbbtP61mR-w" target="_blank" rel="noopener">Leaf Subscriptions.xml - MEGA</a></p></li><li><p><a href="https://bootstrapstudio.io/" title=" 点击访问 " target="_blank" rel="noopener">Bootstrap Studio</a>：这个软件可牛逼了，建议看下官网的介绍视频，这个软件可以让你以直接拖动组件的方式完成一个网页，感觉跟 C#类似，用来做基础布局可以节约大量时间</p></li><li><p>★<a href="https://zhitu.isux.us/" title=" 点击访问 " target="_blank" rel="noopener">智图</a>：图片压缩，方便快捷</p></li><li><p><a href="https://github.com/yinghuocho/firefly-proxy" title=" 点击访问 " target="_blank" rel="noopener">萤火虫 Firefly</a>：一款翻墙软件，电脑手机都有</p></li><li><p><a href="https://github.com/getlantern/lantern" title=" 点击访问 " target="_blank" rel="noopener">蓝灯</a>：蓝灯 VPN，速度挺快的，如果下载发行版的话有流量限制，建议去 GitHub 上照步骤自己编译程序，这样是没有流量限制的</p></li><li><p><a href="https://www.tunnelbear.com/" title=" 点击访问 " target="_blank" rel="noopener">ThunnelBear</a>：ThunnelBear VPN，速度还行，分享推特后每月有 1GB 流量</p></li><li><p><a href="https://github.com/XX-net/XX-Net" title=" 点击访问 " target="_blank" rel="noopener">XX-Net</a>：很好用的翻墙工具，但配置会麻烦一点</p></li><li><p><a href="http://www.smartisan.com/apps/handshaker" title=" 点击访问 " target="_blank" rel="noopener">HandShaker</a>：锤子科技出的一款软件，可以无线连接手机和电脑，方便在电脑上管理移动设备的文件，如果要互传可以使用茄子快传</p></li><li><p>★★<a href="https://kapeli.com/dash" title=" 点击访问 " target="_blank" rel="noopener">Dash</a>：开发者必备，各种 API 文档，配合 Alfred 查询非常方便，如果资金有限不想购买的客官可以看下 <a href="http://xclient.info/s/dash.html?_=f7d710b8833dbc76de5d7640956a0551" title=" 点击访问 " target="_blank" rel="noopener">Xclient.info</a></p></li><li><p><a href="http://xscopeapp.com" title=" 点击访问 " target="_blank" rel="noopener">xScope</a>：设计开发辅助工具，有 10 个实用优秀的小工具，如屏幕镜像、屏幕标尺、放大镜、十字定位等等</p></li><li><p>★★<a href="https://itunes.apple.com/cn/app/ohmystar2-best-way-to-organize-your-github-stars/id1218642292?l=en&amp;mt=12" title=" 点击访问 " target="_blank" rel="noopener">ohMyStar2</a>：强烈推荐的一个软件，可以管理 GitHub 账号的 star，分类管理添加标签，还可以看热门项目，对于 star 几百个的人太有用了</p></li><li><p>★<a href="https://github.com/Nightonke/Gitee" title=" 点击访问 " target="_blank" rel="noopener">gitee</a>：显示 GitHub 账号信息，方便查看 trending、项目信息等</p></li><li><p>★<a href="https://slack.com/" title=" 点击访问 " target="_blank" rel="noopener">Slack</a>：开发人员的聊天 app，主要是国外用户，加入不同的 channel，了解不同的地域风格，与国外友人交流</p></li><li><p><a href="http://gitter.im" title=" 点击访问 " target="_blank" rel="noopener">Gitter</a>：也是一款开发人员地聊天 app，集合各种语言和框架，与其相关的还有一个 GitLab</p></li><li><p>★★★<a href="http://www.jitouch.com/" title=" 点击访问 " target="_blank" rel="noopener">Jitouch</a>：手势拓展，定义手势操作让触控板更强大，加上 alfred，还要什么鼠标。这是我的设置，注意手势要求两指有一定距离，最好用食指和无名指来划。</p></li></ul><p><img src="/images/artifact/jitouch1.png" alt="image"></p><p><img src="/images/artifact/jitouch2.png" alt="image"></p><ul><li><p>★★<a href="https://www.boastr.net/" title=" 点击访问 " target="_blank" rel="noopener">BetterTouchTool</a>：功能比 jitouch 还要强大，但现在要收费，虽然功能更多而且支持自定义手势但设置也会复杂一点，这里有篇 <a href="http://www.jianshu.com/p/4447344fc531" target="_blank" rel="noopener">教程</a>，对我来说 jitouch 已经够用了</p></li><li><p>★★★<a href="https://www.alfredapp.com/" title=" 点击访问 " target="_blank" rel="noopener">Alfred</a>：如果上面的都是神器，那这个就是超神器，强烈推荐。附上 <a href="http://wellsnake.com/jekyll/update/2014/06/15/001/" title=" 点击访问 " target="_blank" rel="noopener">使用教程</a>。<br>建议关掉 mac 自带的 Spotlight, 将 Alfred 快捷键设置成 cmd + space(原 Spotlight 快捷键)；<br>把常用的网站，特别是搜索类的放到 websearch 里：<br><img alt="image" src="/images/artifact/websearch.png" width="600px" height="400px"><br>把浏览器书签导入 Safari，可以用 Alfred 搜索打开；快捷键打开终端；查询文档；搜索打开文件；记录 Clipboard 历史等等…<br>当然最强大的功能还是 workflow，我用到的 workflow 有 Dash 和有道翻译</p></li><li><p>Alfred 的其他平台替代品：windows 有 <a href="http://www.getwox.com/" target="_blank" rel="noopener">wox</a>、linux 有 <a href="https://albertlauncher.github.io/" target="_blank" rel="noopener">Albert</a> 和 Synapse</p></li><li><p><a href="https://itunes.apple.com/us/app/blackmagic-disk-speed-test/id425264550?mt=12" target="_blank" rel="noopener">Blackmagic Disk Speed Test</a>: 简单实用的硬盘测速软件</p></li></ul><hr><h2 id="应用篇"><a href="#应用篇" class="headerlink" title="应用篇"></a>应用篇</h2><h3 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h3><ul><li><p>[Google Play]：第一推荐当然是谷歌商店啦，上面也有很多精品应用</p></li><li><p>[蓝灯 VPN]：要访问谷歌肯定要翻墙，蓝灯还是能用的，之前用的是 green，但后来又被封了</p></li><li><p>[萤火虫 VPN]：萤火虫也是可以用的</p></li><li><p>★★[知乎、简书、轻氧、掘金、开发者头条]：学习的好地方</p></li><li><p><a href="https://play.google.com/store/apps/details?id=com.fastaccess.github" target="_blank" rel="noopener">FastHub</a>：FastHub for GitHub，集合了 GitHub 基本所需的所有功能</p></li><li><p><a href="http://zuimeia.com/apps/?platform=2" title=" 点击访问 " target="_blank" rel="noopener">最美应用</a>：这是一个应用的名字，是最美团队出品的，收集了很多精品应用</p></li><li><p><a href="https://play.google.com/store/apps/details?id=flipboard.app&amp;hl=zh_CN" title=" 点击访问 " target="_blank" rel="noopener">Flipboard</a>：需要翻墙，一些时事资讯。热门文章等</p></li><li><p><a href="https://play.google.com/store/apps/details?id=com.zuiapps.suite.days&amp;hl=zh_CN" title=" 点击访问 " target="_blank" rel="noopener">ZUI Days</a>：一款很漂亮的记录时间和重要纪念日的应用</p></li><li><p>★<a href="https://play.google.com/store/apps/details?id=com.ruguoapp.jike&amp;hl=zh_CN" title=" 点击访问 " target="_blank" rel="noopener">即刻</a>：专门为你定制的内容推送，推荐使用</p></li><li><p><a href="https://play.google.com/store/apps/details?id=com.google.android.spotlightstories&amp;hl=zh_CN" title=" 点击访问 " target="_blank" rel="noopener">Google Spotlight Stories</a>：用手机看真•3D 视频，效果很棒，值得一试</p></li><li><p>★<a href="https://play.google.com/store/apps/details?id=com.memorado.brain.games&amp;hl=zh_CN" title=" 点击访问 " target="_blank" rel="noopener">Memorado</a>：很棒的一款脑力游戏，画面精美，无聊的时候练练脑力</p></li><li><p><a href="https://play.google.com/store/apps/details?id=com.picsart.studio&amp;hl=zh_CN" title=" 点击访问 " target="_blank" rel="noopener">PicsArt</a>：很强大的修图应用，但让我印象深刻的是里面的魔法：可以将一张图转换成其他图片的风格，比如梵高的星夜</p></li><li><p><a href="https://play.google.com/store/apps/details?id=com.scheffsblend.designertools&amp;hl=zh_CN" title=" 点击访问 " target="_blank" rel="noopener">Designer Tools</a>：设计师工具，提供了网格覆盖图、样机覆盖图、取色器、截图细节等</p></li><li><p><a href="https://play.google.com/store/apps/details?id=com.curiosity.dailycuriosity&amp;hl=zh_CN" title=" 点击访问 " target="_blank" rel="noopener">Curiosity</a>：各种视频，了解世界，增长见识</p></li><li><p>★★<a href="https://play.google.com/store/apps/details?id=mark.via.gp&amp;hl=zh_CN" title=" 点击访问 " target="_blank" rel="noopener">Via 浏览器</a>：非常小巧的浏览器，但功能一应俱全，而且响应速度很快，类似的还有一个夸克浏览器</p></li><li><p>★<a href="https://play.google.com/store/apps/details?id=com.dv.adm" title=" 点击访问 " target="_blank" rel="noopener">ADM</a>: 安卓上的 IDM，配合 ES 文件浏览器还可以下载百度网盘的东西，具体教程可以在网上搜到; 还可以配合 via 浏览器作下载工具使用</p></li><li><p>★★<a href="https://www.taptap.com/" target="_blank" rel="noopener">TapTap</a>：很棒的游戏社区</p></li></ul><h3 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h3><ul><li><p><a href="http://www.nosleep.net/" target="_blank" rel="noopener">Ideament</a>：很棒的思维导图工具</p></li><li><p><a href="http://weavesilk.com/" target="_blank" rel="noopener">Silk 2</a>: 动动手指便可创作出独一无二的艺术壁纸</p></li></ul><hr><h2 id="网站篇"><a href="#网站篇" class="headerlink" title="网站篇"></a>网站篇</h2><ul><li><p>★<a href="http://xclient.info" title=" 点击访问 " target="_blank" rel="noopener">Xclient</a>：精品 mac 应用分享</p></li><li><p>★<a href="http://devdocs.io/" title=" 点击访问 " target="_blank" rel="noopener">Devdocs</a>：API 文档，功能和 Dash 差不多</p></li><li><p><a href="https://www.docschina.org/" title=" 点击访问 " target="_blank" rel="noopener">印记中文</a>：一些权威中文文档</p></li><li><p>★★<a href="https://htmlpreview.github.io/" title=" 点击访问 " target="_blank" rel="noopener">HtmlPreview</a>：HTML 链接预览，可以用于预览 github 上的 html 文件</p></li><li><p>★★<a href="https://clipchamp.com/zh-Hans/dashboard" title=" 点击访问 " target="_blank" rel="noopener">在线压缩视频 ClipChamp</a>：方便好用</p></li><li><p><a href="https://converticon.com/" target="_blank" rel="noopener">converticon</a>：图片转 icon</p></li><li><p><a href="https://ezgif.com/video-to-gif" title=" 点击访问 " target="_blank" rel="noopener">视频转换器</a>：视频转 GIF，压缩、裁剪等等</p></li><li><p>★<a href="http://naotu.baidu.com/home" title=" 点击访问 " target="_blank" rel="noopener">百度脑图</a>：在线创建思维导图，功能强大</p></li><li><p>★<a href="http://caibaojian.com/page/3" title=" 点击访问 " target="_blank" rel="noopener">前端开发博客</a>：前端优质内容</p></li><li><p>★<a href="http://gank.io/" title=" 点击访问 " target="_blank" rel="noopener">干货集中营</a>：确实有干货，还有妹纸</p></li><li><p>★<a href="https://tutorialzine.com/articles" title=" 点击访问 " target="_blank" rel="noopener">tutorialzine</a>：前端文章推送</p></li><li><p><a href="http://collectui.com/" title=" 点击访问 " target="_blank" rel="noopener">Collect UI </a>：UI 设计灵感</p></li><li><p><a href="http://www.uisdc.com/75-web-animation-tools-1#" title=" 点击访问 " target="_blank" rel="noopener">优设</a>：关于设计和开发</p></li><li><p>★<a href="https://codepen.io/picks/2/" title=" 点击访问 " target="_blank" rel="noopener">CodePen</a>：各种有趣的 js demo 和项目</p></li><li><p><a href="https://www.codeseek.co/" target="_blank" rel="noopener">CodeSeek</a>：与 CodePen 类似的网站</p></li><li><p>★<a href="https://tympanus.net/codrops/category/playground/" title=" 点击访问 " target="_blank" rel="noopener">Codrops</a>：各种优质文章和设计</p></li><li><p>★★<a href="https://www.ctolib.com/" title=" 点击访问 " target="_blank" rel="noopener">CTOLib 码库</a>：各种代码库</p></li><li><p><a href="http://nec.netease.com/library" title=" 点击访问 " target="_blank" rel="noopener">网易代码库</a></p></li><li><p>★<a href="https://dribbble.com/" title=" 点击访问 " target="_blank" rel="noopener">Dribbble</a>：优秀设计模板</p></li><li><p>★<a href="https://www.behance.net/" title=" 点击访问 " target="_blank" rel="noopener">Behance</a>：优秀设计创意作品</p></li><li><p>★<a href="https://tinypng.com/" title=" 点击访问 " target="_blank" rel="noopener">压缩图片 https://tinypng.com</a></p></li><li><p><a href="http://asciiflow.com/" title=" 点击访问 " target="_blank" rel="noopener">在线画图 Asciiflow</a></p></li><li><p><a href="http://thecodeplayer.com/" title=" 点击访问 " target="_blank" rel="noopener">TheCodePlayer</a>：很棒的 HTML5、CSS3、JS 学习网站，代码一行一行视频演示</p></li><li><p><a href="https://www.freshdesignweb.com/" title=" 点击访问 " target="_blank" rel="noopener">Freshdesignweb</a>：网站设计</p></li><li><p><a href="https://css-tricks.com/" title=" 点击访问 " target="_blank" rel="noopener">CSS-Tricks</a>：学习 CSS 不可错过此网站</p></li><li><p><a href="http://en.jsrun.net/" title=" 点击访问 " target="_blank" rel="noopener">JSRUN</a>：类似 codepen，提供在线编写代码，也有很多有趣 demo</p></li><li><p><a href="http://cssdeck.com/" title=" 点击访问 " target="_blank" rel="noopener">CssDeck</a>：一些展示 CSS 效果的 demo</p></li><li><p>★<a href="http://tool.oschina.net/" title=" 点击访问 " target="_blank" rel="noopener">在线工具汇总</a></p></li><li><p><a href="http://www.jiawin.com/10-design-artifact" title=" 点击访问 " target="_blank" rel="noopener">觉唯设计</a></p></li><li><p>★<a href="https://www.smashingmagazine.com/tag/javascript/" title=" 点击访问 " target="_blank" rel="noopener">SmashingMagazine</a>：前端杂志</p></li><li><p><a href="http://navnav.co/" title=" 点击访问 " target="_blank" rel="noopener">NavNav</a>：各种响应式菜单的设计</p></li><li><p><a href="https://codyhouse.co/library/" title=" 点击访问 " target="_blank" rel="noopener">CODYHOUSE</a>：视觉设计</p></li><li><p><a href="https://csswizardry.com/archive/" title=" 点击访问 " target="_blank" rel="noopener">CSS Wizardry Posts Archive</a>：优质博客文章，很多关于 css 和设计的</p></li><li><p><a href="http://textify.it/" title=" 点击访问 " target="_blank" rel="noopener">textify.it</a>：一个有趣的网站，可以把图片字符化</p></li><li><p><a href="http://www.developerdrive.com/categories/" title=" 点击访问 " target="_blank" rel="noopener">DeveloperDrive</a>：提供大量优质文章</p></li><li><p>★<a href="https://hackernoon.com/" title=" 点击访问 " target="_blank" rel="noopener">HACKNOON</a>：极客的下午茶时间，推送很多优质文章</p></li><li><p><a href="http://fakeupdate.net/" title=" 点击访问 " target="_blank" rel="noopener">假装 Windows 升级界面</a></p></li><li><p><a href="https://www.seeseed.com/" title=" 点击访问 " target="_blank" rel="noopener">SeeSeed</a>：设计与灵感，适合设计师用</p></li><li><p><a href="http://tushuo.baidu.com/wave/index#/gallery" title=" 点击访问 " target="_blank" rel="noopener">百度•图说</a>：在线创建图表</p></li><li><p><a href="http://www.csswinner.com/blog/" title=" 点击访问 " target="_blank" rel="noopener">CSSWinner</a>：CSS Award Gallery for Website Design Inspiration</p></li><li><p><a href="http://www.zcfy.cc/translate/discovery" title=" 点击访问 " target="_blank" rel="noopener">众成翻译</a>：有很多翻译的和未翻译的文章，值得翻一翻看一看</p></li><li><p><a href="http://www.guokr.com/scientific/" title=" 点击访问 " target="_blank" rel="noopener">果壳 - 科学人</a>：挺多有趣的科学文章</p></li><li><p><a href="https://zh.airbnb.com/" title=" 点击访问 " target="_blank" rel="noopener">Airbnb</a></p></li><li><p>★<a href="https://medium.com/" title=" 点击访问 " target="_blank" rel="noopener">Medium</a>：各种文章，谷歌商店上还能找到 app</p></li><li><p><a href="https://developers.google.com/speed/pagespeed/?hl=zh-CN&amp;utm_source=PSI&amp;utm_medium=incoming-link&amp;utm_campaign=PSI" title=" 点击访问 " target="_blank" rel="noopener">Google PageSpeed Tools</a>：谷歌站点分析，网站速度性能评分</p></li><li><p><a href="http://www.arkie.cn/" title=" 点击访问 " target="_blank" rel="noopener">ARKie</a>：自动帮你设计海报，很好用</p></li><li><p>★<a href="http://iconfont.cn/" title=" 点击访问 " target="_blank" rel="noopener">IconFont</a>：阿里巴巴矢量图标库</p></li><li><p><a href="http://ppt.baidu.com/" title=" 点击访问 " target="_blank" rel="noopener">PPT 遥控器</a>：用手机当 ppt 遥控器</p></li><li><p>★<a href="https://wordart.com/" title=" 点击访问 " target="_blank" rel="noopener">Wordart</a>：在线生成文字云</p></li><li><p><a href="https://goo.gl/#" title=" 点击访问 " target="_blank" rel="noopener">在线生成短链</a>：谷歌在线生成短链工具</p></li><li><p>★<a href="https://gfycat.com/" title=" 点击访问 " target="_blank" rel="noopener">Gfycat</a>：各种动图</p></li><li><p><a href="https://mockupsjar.com/" title=" 点击访问 " target="_blank" rel="noopener">Mockups</a>：三步生成逼真的网站、手机的设计稿</p></li><li><p>★<a href="https://frontend.directory/p" title=" 点击访问 " target="_blank" rel="noopener">frontend.directory</a>：罗列了各种前端的资源</p></li><li><p><a href="http://hawx1993.github.io/Front-end-Interview-Questions/#/?id=interview-quesetions" title=" 点击访问 " target="_blank" rel="noopener">前端面试题</a>：长期更新的，内容挺全</p></li><li><p><a href="http://html5ify.com/fks/" title=" 点击访问 " target="_blank" rel="noopener">FKS</a>：Frontend Knowledge Structure，前端知识体系汇总</p></li><li><p><a href="http://css3pie.com/" title=" 点击访问 " target="_blank" rel="noopener">CSS3PIE</a>：PIE 使 IE6~9 可以支持大部分 CSS3 的样式</p></li><li><p><a href="https://javier.xyz/img2css/" title=" 点击访问 " target="_blank" rel="noopener">img2css</a>：将图片转成 css，适合一些小图标，大图就不要尝试了</p></li><li><p><a href="https://trello.com/#" title=" 点击访问 " target="_blank" rel="noopener">Trello</a>：看板，GitHub 上有一个类似的项目叫 <a href="https://wekan.indie.host/" title=" 点击访问 " target="_blank" rel="noopener">wekan</a></p></li><li><p><a href="http://www.bootcdn.cn/" title=" 点击访问 " target="_blank" rel="noopener">BootCDN</a>：找一些库的 cdn 很方便</p></li><li><p><a href="http://wetest.qq.com/product/cloudphone" title=" 点击访问 " target="_blank" rel="noopener">云真机</a>：腾讯推出的服务，可以线上测试各种手机</p></li><li><p>★<a href="http://hao.caibaojian.com/" title=" 点击访问 " target="_blank" rel="noopener">码农头条</a></p></li><li><p>★<a href="http://weekly.manong.io/issues/" title=" 点击访问 " target="_blank" rel="noopener">码农周刊</a></p></li><li><p><a href="http://cssanimate.com/" title=" 点击访问 " target="_blank" rel="noopener">CSS Animate</a>：在线生成 css 动画</p></li><li><p><a href="http://www.wailian.work/" title=" 点击访问 " target="_blank" rel="noopener">外链工厂</a>：无限外链，批量上传，而且可以生成各种嵌入代码</p></li><li><p><a href="http://algo-visualizer.jasonpark.me/#path=backtracking/knight&#39;s_tour/basic" title=" 点击访问 " target="_blank" rel="noopener">AlgorithmVisualizer</a>：演示算法的网页，做的很棒</p></li><li><p>★<a href="https://www.codewars.com" title=" 点击访问 " target="_blank" rel="noopener">CodeWar</a>：很适合练习编程，包含各种语言，而且可以查看别人对同一问题的不同解法</p></li><li><p><a href="http://onlywei.github.io/explain-git-with-d3/" title=" 点击访问 " target="_blank" rel="noopener">Visualizing Git Concepts with D3</a>：用图形化的教程教你使用一些基础的 git 命令</p></li><li><p><a href="http://www.jobbole.com/" title=" 点击访问 " target="_blank" rel="noopener">伯乐在线</a></p></li><li><p><a href="https://www.creative-tim.com/" title=" 点击访问 " target="_blank" rel="noopener">CreativeTim</a>：很多网站和管理后台的模板</p></li><li><p>★<a href="https://carbon.now.sh/" title=" 点击访问 " target="_blank" rel="noopener">Carbon</a>：生成一张代码高亮图片，很漂亮，适合插入到网站和博客中</p></li><li><p><a href="http://resume.github.io/" title=" 点击访问 " target="_blank" rel="noopener">GitHub Resume</a>：输入 github 名，自动生成一个简单的简历页</p></li><li><p><a href="https://js.coach/" title=" 点击访问 " target="_blank" rel="noopener">js coach</a>：js 开源库目录</p></li><li><p><a href="http://www.feweekly.com/issues" title=" 点击访问 " target="_blank" rel="noopener">前端周刊</a></p></li><li><p>★<a href="https://www.easy-mock.com/login" title=" 点击访问 " target="_blank" rel="noopener">EasyMock</a>：更方便地模拟数据</p></li><li><p><a href="https://material.io/icons/" title=" 点击访问 " target="_blank" rel="noopener">MaterialIcon</a>：Material Design Icon</p></li><li><p><a href="https://tutorialzine.com/articles" title=" 点击访问 " target="_blank" rel="noopener">tutorialzine</a>：前端文章</p></li><li><p>★<a href="http://www.w3cplus.com/" title=" 点击访问 " target="_blank" rel="noopener">W3CPlus</a>：w3cplus_ 引领 web 前沿，打造前端精品教程</p></li><li><p><a href="https://www.helloweba.com/" title=" 点击访问 " target="_blank" rel="noopener">HelloWeba</a>：又是前端文章</p></li><li><p><a href="http://youarelistening.to/" target="_blank" rel="noopener">http://youarelistening.to</a>: 好像是在线听美国的广播电台，在知乎上看到的</p></li><li><p><a href="http://geektyper.com/" target="_blank" rel="noopener">http://geektyper.com</a>：随便乱敲，屏幕会显示一段一段代码或窗口，看起来跟黑客一样，纯属装逼</p></li><li><p><a href="http://www.tuling123.com/" target="_blank" rel="noopener">http://www.tuling123.com</a>：聊天机器人，可以接入公众号、qq、网页等</p></li><li><p><a href="https://sentry.io/welcome/" target="_blank" rel="noopener">sentry.io</a>：收集错误报告，帮助开发人员实时监控和修复崩溃</p></li><li><p>★<a href="https://smallpdf.com/cn" target="_blank" rel="noopener">smallpdf</a>：一站式处理 pdf</p></li><li><p><a href="http://overapi.com/" target="_blank" rel="noopener">overapi</a>：各大语言和各种框架的 API 介绍</p></li><li><p><a href="http://www.it-ebooks.info/" target="_blank" rel="noopener">it-ebooks</a>：可以下载很多 it 相关的书籍</p></li><li><p><a href="https://ui8.net/category/all" target="_blank" rel="noopener">UI8</a>：很多设计模板</p></li><li><p>★<a href="http://repository-hunter.herokuapp.com" target="_blank" rel="noopener">github hunter</a>：统计 github 上的一些信息，可以查指定名字的信息，还有一些趣事集锦，还可以生成你的贡献图</p></li><li><p><a href="http://www.hongkiat.com/blog/" target="_blank" rel="noopener">HONGKIAT</a>：汇集各种设计和灵感</p></li><li><p>★★<a href="https://gigabook.com/tools" target="_blank" rel="noopener">Free Web Developer Tools by GigaBook</a>：各种网页开发工具，很全很强大</p></li><li><p><a href="https://www.lanhuapp.com/" target="_blank" rel="noopener">蓝湖 - 产品设计的协作平台</a>：适合团队设计</p></li><li><p><a href="http://www.biaonimeia.com/" target="_blank" rel="noopener">标你妹啊</a>：标你妹啊是新一代全自动化的标注工具，通过分析 psd 文件，自动创建图层、字体等元素的数据信息。</p></li><li><p><a href="https://visualgo.net" target="_blank" rel="noopener">visualgo</a>：演示算法</p></li><li><p><a href="https://www.interviewcake.com/" target="_blank" rel="noopener">interviewcake</a>：I will teach you to be good at programming interviews</p></li><li><p>★<a href="http://www.css88.com" target="_blank" rel="noopener">http://www.css88.com</a> ：WEB 前端开发 - 专注前端开发，关注用户体验 - 专注前端开发，关注用户体验</p></li><li><p><a href="http://www.jsnice.org" target="_blank" rel="noopener">http://www.jsnice.org</a> ：反编译压缩的 js 代码，更容易阅读理解</p></li><li><p><a href="https://www.cloudboost.io" target="_blank" rel="noopener">https://www.cloudboost.io</a> : 快速构建 app</p></li><li><p><a href="https://css3gen.com/" target="_blank" rel="noopener">css3gen</a>：CSS3Gen 可让您轻松生成有用的 CSS3 片段，并将其直接复制到您的项目中</p></li><li><p><a href="http://learningthreejs.com" target="_blank" rel="noopener">http://learningthreejs.com</a> ：学习 three.js</p></li><li><p><a href="http://javascript-puzzlers.herokuapp.com" target="_blank" rel="noopener">http://javascript-puzzlers.herokuapp.com</a> ：测试一下你是否真的懂了 js，共 44 道题</p></li><li><p>★javascript 周刊 <a href="http://javascriptweekly.com/issues" target="_blank" rel="noopener">http://javascriptweekly.com/issues</a> ：英文网站</p></li><li><p><a href="http://bennettfeely.com/cssynth" target="_blank" rel="noopener">http://bennettfeely.com/cssynth</a> ：生成卡片加载动画</p></li><li><p>★<a href="https://gtmetrix.com/" target="_blank" rel="noopener">GTmetrix 网站测试</a>：对网站进行评估，并给出优化的建议</p></li><li><p>★<a href="https://developers.google.com/speed/pagespeed/insights/?hl=zh-CN" target="_blank" rel="noopener">PageSpeed Tools 谷歌站点分析工具</a>：也是对网站进行评估，并给出优化的建议</p></li><li><p><a href="https://codeburst.io/" target="_blank" rel="noopener">CodeBurst</a>：前端博客</p></li><li><p><a href="http://hitokoto.cn/" target="_blank" rel="noopener">Hitokoto - 一言</a>：一言指的就是一句话，可以是动漫中的台词，也可以是网络上的各种小段子。或是感动，或是开心，有或是单纯的回忆。</p></li><li><p><a href="https://www.invisionapp.com/feature/inspect?ref=muzli" target="_blank" rel="noopener">InvisionApp</a>：A magical new design to development workflow with Inspect</p></li><li><p><a href="https://webflow.com/" target="_blank" rel="noopener">Webflow</a>：Webflow gives designers and developers the power to design, build, and launch responsive websites visually, while writing clean, semantic code for you.</p></li><li><p><a href="https://www.sekai.co/trust/" target="_blank" rel="noopener">信任的进化</a>：有趣的游戏，通过博弈论来讲解 “ 不信任 “ 的原因</p></li><li><p><a href="https://ipfs.io/" target="_blank" rel="noopener">IPFS 网络</a>：IPFS 是一个点对点的超媒体协议，使网页更快，更安全，更开放。</p></li><li><p><a href="http://www.debugrun.com/" target="_blank" rel="noopener">DebugRun.com</a>：编程语言帮助文档</p></li><li><p><a href="http://www.aazzp.com/index.php?s=/home/index/index.html" target="_blank" rel="noopener">小众前端</a>：一个自由的前端开发者！</p></li><li><p>★<a href="https://xituqu.com/" target="_blank" rel="noopener">稀土区</a>：优秀开发设计资源分享</p></li><li><p><a href="https://www.servethehome.com/" target="_blank" rel="noopener">ServeTheHome</a>：Server, Storage, Networking and Open Source Software News and Reviews</p></li><li><p><a href="http://flarum.org.cn/" target="_blank" rel="noopener">Flarum</a>：Flarum 是一款优雅简洁论坛软件。让在线交流变得更加轻松愉快。</p></li><li><p><a href="http://online.xiaomo.info" target="_blank" rel="noopener">http://online.xiaomo.info</a> ：小莫的资源管理器</p></li><li><p><a href="http://www.yiibai.com/" target="_blank" rel="noopener">易百教程</a>：各种语言教程</p></li><li><p><a href="http://www.bigpixel.cn/#latestworks" target="_blank" rel="noopener">景坤科技</a>：各种超大分辨率的全景图片</p></li><li><p><a href="http://www.koalastothemax.com" target="_blank" rel="noopener">http://www.koalastothemax.com</a> ：不断滑动，最后会出现考拉</p></li><li><p><a href="https://dev.to/" target="_blank" rel="noopener">The DEV Community</a></p></li><li><p><a href="https://www.taptap.com/" target="_blank" rel="noopener">TapTap</a>：很棒的移动游戏社区，可以在上面找到很多心仪的游戏</p></li><li><p><a href="https://webkul.github.io/coolhue" target="_blank" rel="noopener">https://webkul.github.io/coolhue</a> ：不知道怎么搭配色彩，没关系，这里列了很多很棒的搭配方案</p></li><li><p>★<a href="https://www.minimamente.com/example/gradient-generator/" target="_blank" rel="noopener">css 生成渐变色代码</a></p></li><li><p><a href="https://mycolor.space/gradient" title=" 点击访问 " target="_blank" rel="noopener">ColorSpace</a>：生成渐进色背景</p></li><li><p><a href="https://laod.cn/" target="_blank" rel="noopener">老 D 博客</a>: 关注谷歌服务，分享互联网精神！</p></li><li><p><a href="https://giphy.com/" target="_blank" rel="noopener">https://giphy.com/</a> : Search All the GIFs &amp; Make Your Own Animated GIF</p></li><li><p><a href="http://www.gifntext.com/" target="_blank" rel="noopener">http://www.gifntext.com/</a> : 可以编辑动图，比如添加文字等</p></li><li><p><a href="http://magickeyboard.io/" target="_blank" rel="noopener">http://magickeyboard.io/</a> ：趣味网站，键入会有特效</p></li><li><p><a href="https://www.miaomiaomiao.org/interesting" target="_blank" rel="noopener">https://www.miaomiaomiao.org/interesting</a> ： 有趣实用的网站分享</p></li><li><p><a href="http://weavesilk.com/" target="_blank" rel="noopener">http://weavesilk.com/</a> ：可以画出独一无二的艺术壁纸</p></li><li><p><a href="http://helloweb.wang/" target="_blank" rel="noopener">http://helloweb.wang/</a> ：HelloWeb 前端网</p></li><li><p><a href="https://www.templatemonster.com/" target="_blank" rel="noopener">https://www.templatemonster.com/</a> ：模板巨人，各种网页模板</p></li></ul><hr><h2 id="收藏库"><a href="#收藏库" class="headerlink" title="收藏库"></a>收藏库</h2><ul><li><p><a href="https://apoorv.pro/lozad.js/" target="_blank" rel="noopener">Lozad.js</a>：懒加载库</p></li><li><p><a href="https://tabrisjs.com" target="_blank" rel="noopener">https://tabrisjs.com</a> ：Tabris.js 是一个移动框架，可让您从完全用 JavaScript 编写的单一代码库中开发原生 iOS 和 Android 应用程序</p></li><li><p><a href="https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.zh-CN.md" target="_blank" rel="noopener">You-Dont-Need-jQuery</a>：本项目总结了大部分 jQuery API 替代的方法</p></li><li><p>★<a href="http://lodashjs.com/" target="_blank" rel="noopener">lodash</a>：这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库</p></li><li><p>★<a href="http://www.css88.com/doc/underscore" target="_blank" rel="noopener">underscore.js</a>：Underscore 一个 JavaScript 实用库，提供了一整套函数式编程的实用功能，但是没有扩展任何 JavaScript 内置对象</p></li><li><p><a href="https://github.com/alvarcarto/url-to-pdf-api" target="_blank" rel="noopener">url-to-pdf-api</a>：网页生成 pdf 的 API</p></li><li><p><a href="http://github.hubspot.com/odometer/" target="_blank" rel="noopener">Odometer</a>：Odometer 是一个用于平滑过渡数字的 Javascript 和 CSS 库</p></li><li><p><a href="http://daniel-lundin.github.io/snabbt.js/" target="_blank" rel="noopener">snabbt.js</a>：snabbt.js 是一个简约的 JavaScript 动画库。它专注于移动事物。它会翻译，旋转，缩放，扭曲和调整元素的大小。</p></li><li><p><a href="https://github.com/lukehaas/css-loaders" target="_blank" rel="noopener">css-loaders</a>：这是一个使用 CSS 动画的 loading spinners 集合</p></li><li><p><a href="http://force-js.com/" target="_blank" rel="noopener">Force.js</a>：The easy way to scroll and animate your page</p></li><li><p><a href="https://ionicframework.com/" target="_blank" rel="noopener">Ionic</a>：Build amazing native and progressive web apps with open web technologies</p></li><li><p><a href="https://hyperapp.js.org/" target="_blank" rel="noopener">hyperapp</a>：1 KB JavaScript library for building frontend applications</p></li><li><p><a href="http://shopify.github.io/js-buy-sdk/" target="_blank" rel="noopener">js-buy-sdk</a>：JS Buy SDK 是一个轻量级库，可以让您在任何网站上构建电子商务</p></li><li><p><a href="https://shopify.github.io/draggable/" target="_blank" rel="noopener">draggable.js</a>：a lightweight, responsive, modern drag &amp; drop library</p></li><li><p>★<a href="http://momentjs.cn/" target="_blank" rel="noopener">moment.js</a>：JavaScript 日期处理类库</p></li><li><p><a href="http://fian.my.id/Waves/" target="_blank" rel="noopener">Waves</a>：Click effect inspired by Google’s Material Design</p></li><li><p><a href="http://learningthreejs.com/blog/2011/08/14/dat-gui-simple-ui-for-demos/" target="_blank" rel="noopener">dat-gui-demos</a>：<a href="https://github.com/dataarts/dat.gui" target="_blank" rel="noopener">Dat.gui</a> is a GUI widget for your demos. It provide way for the user to set parameters of the demo to play with it. It is simple to code, yet cool and minimalist on the screen.</p></li><li><p><a href="http://todomvc.com" target="_blank" rel="noopener">http://todomvc.com</a> ：Helping you select an MV* framework</p></li><li><p><a href="https://hnpwa.com" target="_blank" rel="noopener">https://hnpwa.com</a> ：Hacker News readers as Progressive Web Apps</p></li><li><p><a href="https://alvarotrigo.com/fullPage/" target="_blank" rel="noopener">fullPage.js</a>：Create Beautiful Fullscreen Scrolling Websites</p></li><li><p><a href="https://alvarotrigo.com/multiScroll" target="_blank" rel="noopener">multiScroll.js</a>：Create divided multi-scrolling pages</p></li><li><p><a href="http://createjs.com/" target="_blank" rel="noopener">Create js</a>：A suite of modular libraries and tools which work together or independently to enable rich interactive content on open web technologies via HTML5</p></li><li><p><a href="http://c3js.org" target="_blank" rel="noopener">http://c3js.org</a> ：D3-based reusable chart library</p></li><li><p>★★<a href="https://d3js.org" target="_blank" rel="noopener">D3</a> ：D3.js is a JavaScript library for manipulating documents based on data，巨强的图表库</p></li><li><p>★<a href="http://echarts.baidu.com/index.html" target="_blank" rel="noopener">Echarts</a>：百度出品的图表库，配置很简单，文档很全</p></li><li><p>★<a href="https://antv.alipay.com/index.html" target="_blank" rel="noopener">G2 + G6</a>：阿里出品的图表库</p></li><li><p>★<a href="http://www.chartjs.org" target="_blank" rel="noopener">Chart js</a> ：Simple yet flexible JavaScript charting for designers &amp; developers</p></li><li><p><a href="https://www.highcharts.com/" target="_blank" rel="noopener">Highcharts</a>：Highcharts makes it easy for developers to set up interactive charts in their web pages</p></li><li><p><a href="https://naver.github.io/billboard.js/" target="_blank" rel="noopener">billboard.js</a>：Re-usable, easy interface JavaScript chart library, based on D3 v4+</p></li><li><p><a href="http://recharts.org/#/zh-CN" target="_blank" rel="noopener">Recharts</a>：基于 React 的组合式图表，适合做简单轻量的图表</p></li><li><p><a href="https://display.js.org" target="_blank" rel="noopener">https://display.js.org</a> ：A simple JavaScript framework for building ambitious UIs</p></li><li><p><a href="http://www.pixijs.com" target="_blank" rel="noopener">Pixi JS</a> ：Create beautiful digital content with the fastest, most flexible 2D WebGL renderer</p></li><li><p><a href="https://gka.js.org/#/?id=gka" target="_blank" rel="noopener">GKA</a>：简单的、高效的帧动画生成工具</p></li><li><p><a href="https://alloyteam.github.io/curvejs/" target="_blank" rel="noopener">curvejs</a>：Made curve a dancer in HTML5 canvas - 魔幻线条，AllolyTeam 出品 <a href="https://alloyteam.github.io/" target="_blank" rel="noopener">https://alloyteam.github.io/</a></p></li><li><p>★<a href="http://thednp.github.io/kute.js/" target="_blank" rel="noopener">kute.js</a>：非常漂亮的动画库</p></li><li><p>★<a href="http://animejs.com/" target="_blank" rel="noopener">animejs</a>：js 动画库</p></li><li><p><a href="http://dynamicsjs.com/" target="_blank" rel="noopener">dynamicsjs</a>：js 基于物理的动画库</p></li><li><p><a href="http://bonsaijs.org/" target="_blank" rel="noopener">bonsaijs</a>：A lightweight graphics library with an intuitive graphics API and an SVG renderer</p></li><li><p><a href="http://lazylinepainter.info/" target="_blank" rel="noopener">lazylinepainter</a>：A JQUERY PLUGIN FOR SVG PATH ANIMATION</p></li><li><p><a href="http://anijs.github.io/" target="_blank" rel="noopener">AniJS</a>：A Library to Raise your Web Design without Coding</p></li><li><p><a href="http://bouncejs.com/" target="_blank" rel="noopener">bouncejs</a>：Bounce.js is a tool and JS library that lets you create beautiful CSS3 powered animations</p></li><li><p><a href="https://www.minimamente.com/example/magic_animations/" target="_blank" rel="noopener">Magic Animations CSS3</a>：漂亮的 css 动画</p></li><li><p><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">Animate.css</a></p></li><li><p>★<a href="https://threejs.org/" target="_blank" rel="noopener">three.js</a>：js 3D 库</p></li><li><p><a href="https://varin6.github.io/Hover-Buttons/" target="_blank" rel="noopener">Hover-Buttons</a>：button hover 特效</p></li><li><p>★<a href="http://brm.io/matter-js/" target="_blank" rel="noopener">matter-js</a>：Matter.js is a 2D physics engine for the web，js 平面物理引擎库</p></li><li><p>★★<a href="http://iscrolljs.com/" target="_blank" rel="noopener">iScroll.js</a>：iScroll is a high performance, small footprint, dependency free, multi-platform javascript scroller.</p></li><li><p><a href="https://draftjs.org/" target="_blank" rel="noopener">Draft.js</a>：一个用于构建富文本编辑的框架</p></li><li><p><a href="https://maxwellito.github.io/vivus/" target="_blank" rel="noopener">Vivus</a>：vivus 用于描绘 SVG 动画</p></li><li><p><a href="http://hammerjs.github.io/" target="_blank" rel="noopener">HammerJS</a>：是页面支持手势操作</p></li><li><p><a href="https://markojs.com/" target="_blank" rel="noopener">Marko</a>：A friendly (and fast!) UI library from eBay that makes building web apps</p></li><li><p><a href="http://www.voxelcss.com/" target="_blank" rel="noopener">VoxelCSS</a>：A lightweight 3D CSS voxel library</p></li><li><p><a href="https://bulma.io/" target="_blank" rel="noopener">Bulma</a>：Bulma is a free and open source CSS framework based on Flexbox</p></li><li><p><a href="https://www.blazecss.com/" target="_blank" rel="noopener">BlazeCSS</a>：Blaze is an open source modular toolkit. It provides great structure for building websites quickly with a scalable and maintainable foundation</p></li><li><p><a href="https://purecss.io/" target="_blank" rel="noopener">PureCSS</a>：A set of small, responsive CSS modules that you can use in every web project</p></li><li><p><a href="https://scrollrevealjs.org/" target="_blank" rel="noopener">ScrollRevealJS</a>：Easy scroll animations for web and mobile browsers</p><blockquote><p>如果你在这找到好用的东西，恭喜！如果你有好用的东西分享，欢迎在评论中告诉我！</p></blockquote></li></ul>]]></content>
      
      <categories>
          
          <category> Share </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 应用 </tag>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用 Hexo 主题 Yelee</title>
      <link href="/2017/08-Hexo.html"/>
      <url>/2017/08-Hexo.html</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前使用的是 next 主题，虽然 next 很强大，但是 next 的样式并不是我很喜欢的类型。<br>后来无意间在别人博客上看到这种双栏主题，而且还有各种动画效果，作为颜控立马被吸引了，然后发现类似的双栏博客有好几个，像 yilia、spfk、yelee 等。<br>后者好像都是在 yilia 的基础上修改的，而我选择了 yelee，因为我更喜欢其色调，并且作者很贴心地写了 <a href="http://moxfive.coding.me/yelee" title="Yelee 主题使用说明 " target="_blank" rel="noopener">gitbook 操作指南</a>，这对刚接触博客的小白我来说真是福音。<br>感谢作者提供了这么好的主题，后来使用上碰到的一些问题和修改，我都一一列举在下面，以后如果还有修改我还会更新。</p><hr><p>按照 gitbook 的教程我完成博客的基础配置，效果基本上已经很满足了，但是测试上发现有些小小小问题，作为强迫症，修改之。</p><h2 id="代码块前后留白问题："><a href="#代码块前后留白问题：" class="headerlink" title="代码块前后留白问题："></a>代码块前后留白问题：</h2><p>代码块中的代码空行消失，都被挤到前后了，issue 上有人解决了：<br><img src="/images/hexo/CodeSpace.png" alt="代码显示错位"></p><hr><p>然后是页面跳转问题，我希望的是本站内的链接和标签都在本窗口打开，外站的都在新标签页打开，<br>但是像搜索结果和迷你文章列表等点击会在新标签页打开，得做如下修改：</p><h2 id="取消搜索结果跳转新标签页："><a href="#取消搜索结果跳转新标签页：" class="headerlink" title="取消搜索结果跳转新标签页："></a>取消搜索结果跳转新标签页：</h2><p><strong>目标文件：themes/yelee/source/js/search.js</strong></p><p>找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// show search results</span></span><br><span class="line"><span class="keyword">if</span> (isMatch) &#123;</span><br><span class="line">str += <span class="string">"&lt;li&gt;&lt;a href='"</span>+ data_url +<span class="string">"' class='search-result-title' target='_blank'&gt;"</span>+ <span class="string">"&gt; "</span> + data_title +<span class="string">"&lt;/a&gt;"</span>;</span><br></pre></td></tr></table></figure><p>删除 <code>target=&#39;_blank&#39;</code> 字段</p><hr><h2 id="取消迷你文章在新窗口打开"><a href="#取消迷你文章在新窗口打开" class="headerlink" title="取消迷你文章在新窗口打开"></a>取消迷你文章在新窗口打开</h2><p><img src="/images/hexo/miniArchives.png" alt="迷你文章列表"></p><p><strong>目标文件：themes/yelee/layout/_partial/open-in-new-tab.ejs</strong></p><p>找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.open_in_new.mini_archives) &#123; %&gt; miniArchives: <span class="string">"a.post-list-link"</span>, &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>将 <code>theme.open_in_new.mini_archives</code> 直接改为 false</p><p>我在 _config.yml 里设置 mini_archives 好像不起作用</p><hr><p><strong>下面的是我自己的一些修改，如有需要可供参考</strong></p><blockquote><p>我的所有修改记录都放在仓库里了：<a href="https://github.com/wangriyu/hexo-theme-yelee" title=" 点击访问 " target="_blank" rel="noopener">github</a></p></blockquote><h2 id="添加文章字数统计"><a href="#添加文章字数统计" class="headerlink" title="添加文章字数统计"></a>添加文章字数统计</h2><p>用到的插件是 <a href="https://github.com/willin/hexo-wordcount" title=" 点击访问 " target="_blank" rel="noopener">hexo-wordcount</a></p><p>安装很简单，一条命令 <code>npm i --save hexo-wordcount</code> 即可解决，<br>下面的配置是信息显示位置和样式，仅供参考，也可以自行修改</p><p><strong>目标文件：themes/yelee/layout/_partial/post/tag.ejs</strong><br>修改如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (post.tags &amp;&amp; post.tags.length)&#123; %&gt;</span><br><span class="line">-    &lt;div class="article-tag tagcloud"&gt;</span><br><span class="line">+    &lt;div class="article-tag tagcloud" style="display: flex; flex-wrap: wrap"&gt;</span><br><span class="line">        &lt;%-</span><br><span class="line">          list_tags(post.tags, &#123;</span><br><span class="line">            show_count: false,</span><br><span class="line">            class: 'article-tag'</span><br><span class="line">          &#125;)</span><br><span class="line">        %&gt;</span><br><span class="line">+       &lt;span class="post-count"&gt;总字数&lt;%= wordcount(post.content) %&gt;&lt;/span&gt;</span><br><span class="line">+       &lt;span class="post-count"&gt;预计阅读&lt;%= min2read(post.content) %&gt;分钟&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>添加样式：<br><strong>目标文件：themes/yelee/source/css/_partial/tagcloud.styl</strong></p><p>找到</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.article-tag</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.article-category</span><span class="selector-pseudo">::before</span></span><br><span class="line">    <span class="selector-tag">float</span> <span class="selector-tag">left</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-id">#999</span></span><br><span class="line">    <span class="selector-tag">font</span> <span class="selector-tag">base-font-size</span> <span class="selector-tag">FontAwesome</span></span><br><span class="line">    <span class="selector-tag">margin-right</span> 5<span class="selector-tag">px</span></span><br><span class="line">    margin-top (1/3)rem</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-tag</span><span class="selector-pseudo">::before</span></span><br><span class="line">    <span class="selector-tag">content</span> "\<span class="selector-tag">f02b</span>"</span><br><span class="line">    <span class="selector-tag">margin-left</span> 1<span class="selector-tag">em</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.article-category</span><span class="selector-pseudo">::before</span></span><br><span class="line">    <span class="selector-tag">content</span> "\<span class="selector-tag">f02d</span>"</span><br></pre></td></tr></table></figure><p>在 <code>.article-category::before</code> 前插入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.article-tag</span></span><br><span class="line">    <span class="selector-class">.article-tag-list</span></span><br><span class="line">        <span class="selector-tag">display</span> <span class="selector-tag">flex</span></span><br><span class="line">        <span class="selector-tag">flex-wrap</span> <span class="selector-tag">wrap</span></span><br><span class="line">    <span class="selector-tag">span</span></span><br><span class="line">        <span class="selector-tag">cursor</span> <span class="selector-tag">pointer</span></span><br><span class="line">        <span class="selector-tag">line-height</span> 29<span class="selector-tag">px</span></span><br><span class="line">        <span class="selector-tag">font-size</span> 13<span class="selector-tag">px</span></span><br><span class="line">        <span class="selector-tag">color</span> <span class="selector-id">#aaa</span></span><br><span class="line">        &amp;<span class="selector-pseudo">:before</span></span><br><span class="line">            <span class="selector-tag">content</span> "\27<span class="selector-tag">A4</span>"</span><br><span class="line">            <span class="selector-tag">margin-left</span> 1<span class="selector-tag">em</span></span><br></pre></td></tr></table></figure><p>content: “\27A4” 是 unicode 图标编码，可以换成其他的</p><p><a href="https://unicode-table.com/cn" title=" 点击访问 " target="_blank" rel="noopener">unicode 图标</a></p><p><a href="http://fontawesome.io/icons" title=" 点击访问 " target="_blank" rel="noopener">Font Awesome Icon</a></p><hr><h2 id="添加音乐播放器"><a href="#添加音乐播放器" class="headerlink" title="添加音乐播放器"></a>添加音乐播放器</h2><p>我知道的有三种形式、两种样式的播放器添加方式</p><ul><li>网易云 <code>iframe</code> 标签<br>到网易云网页上找喜欢的歌，点击生产外链播放器，获取 <code>iframe</code> 标签代码，粘贴到想放的地方即可，也可以直接贴在 markdown 文本中，<br>我就是这样在每篇文章中插入一首歌;</li></ul><p>如果不能正常打开生成外链的页面，只需要把歌曲或者歌单的 id（页面地址就有）记下来就好，标签格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe</span><br><span class="line">  frameborder=&quot;no&quot;</span><br><span class="line">  border=&quot;0&quot;</span><br><span class="line">  marginwidth=&quot;0&quot;</span><br><span class="line">  marginheight=&quot;0&quot;</span><br><span class="line">  width=330</span><br><span class="line">  height=450</span><br><span class="line">  src=&quot;//music.163.com/outchain/player?type=0&amp;id=883067320&amp;auto=1&amp;height=430&quot;&gt; // 歌曲 type=2，歌单 type=0，id 填对应 id</span><br><span class="line">&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><ul><li>使用 aplayer 插件 <a href="https://github.com/MoePlayer/hexo-tag-aplayer" title=" 点击访问 " target="_blank" rel="noopener">hexo-tag-aplayer</a></li></ul><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 aplayer 库</li></ul><p>在主题的 _config.yml 文件底部添加两个库：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CDN</span><br><span class="line">  ...</span><br><span class="line"><span class="addition">+  aplayer: //cdn.bootcss.com/aplayer/1.6.0/APlayer.min.js</span></span><br><span class="line"><span class="addition">+  meting: //unpkg.com/meting@1.0.1/dist/Meting.min.js</span></span><br></pre></td></tr></table></figure><p><strong>目标文件：themes/yelee/layout/_partial/head.ejs</strong><br>在 jquery 后面导入库</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src="&lt;%- theme.CDN.jquery %&gt;"&gt;&lt;/script&gt;</span><br><span class="line"><span class="addition">+ &lt;script src="&lt;%- theme.CDN.aplayer %&gt;"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+ &lt;script src="&lt;%- theme.CDN.meting %&gt;"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>使用：粘贴以下代码生成播放器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  <span class="class"><span class="keyword">class</span></span>=<span class="string">"aplayer"</span></span><br><span class="line">  data-id=<span class="string">"883067320"</span>    <span class="comment">// 歌曲 / 专辑 / 歌单 ID</span></span><br><span class="line">  data-server=<span class="string">"netease"</span>  <span class="comment">// 音乐平台：netease、tencent、xiami、kugou、baidu</span></span><br><span class="line">  data-type=<span class="string">"playlist"</span>   <span class="comment">// 类型：song、album、playlist、search</span></span><br><span class="line">  data-mode=<span class="string">"random"</span>     <span class="comment">// 播放模式：random、single、circulation、order</span></span><br><span class="line">  data-autoplay=<span class="string">"true"</span>&gt;  <span class="comment">// 自动播放</span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h2 id="简化添加音乐的方法"><a href="#简化添加音乐的方法" class="headerlink" title="简化添加音乐的方法"></a>简化添加音乐的方法</h2><p>我喜欢在每篇文章放不同的歌曲，如果按上面的方法添加，每次都得在文章前粘贴一段代码，而且主页加载时也会加载两个 CDN 库，影响加载速度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div</span><br><span class="line">  <span class="class"><span class="keyword">class</span></span>=<span class="string">"aplayer"</span></span><br><span class="line">  data-id=<span class="string">"883067320"</span> <span class="comment">// 歌曲 ID</span></span><br><span class="line">  data-server=<span class="string">"netease"</span></span><br><span class="line">  data-type=<span class="string">"playlist"</span></span><br><span class="line">  data-mode=<span class="string">"random"</span></span><br><span class="line">  data-autoplay=<span class="string">"true"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>下面简化一下步骤</p><ol><li>修改 <code>/themes/yelee/layout/_partial/article.ejs</code> 如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</span><br><span class="line">  &lt;% if (index &amp;&amp; (post.description || post.excerpt))&#123; %&gt;</span><br><span class="line">      &lt;% if (post.description)&#123; %&gt;</span><br><span class="line">          &lt;%- post.description %&gt;</span><br><span class="line">      &lt;% &#125; else &#123; %&gt;</span><br><span class="line">          &lt;%- post.excerpt %&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">  &lt;% &#125; else &#123; %&gt;</span><br><span class="line">      &lt;% if (is_page())&#123; %&gt;</span><br><span class="line">          &lt;%- partial(&apos;_partial/page&apos;) %&gt;</span><br><span class="line">      &lt;% &#125; %&gt;</span><br><span class="line">+   &lt;% if (post.music)&#123; %&gt;</span><br><span class="line">+       &lt;%- partial(&apos;post/player&apos;) %&gt;</span><br><span class="line">+   &lt;% &#125; %&gt;</span><br><span class="line">    &lt;%- post.content %&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>/themes/yelee/layout/post/</code> 下创建 <code>player.ejs</code> 文件</li></ol><p>player:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;&lt;%- theme.CDN.aplayer %&gt;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;&lt;%- theme.CDN.player %&gt;&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;aplayer&quot; data-id=&quot;&lt;%= post.music %&gt;&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-autoplay=&quot;true&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div style=&quot;height: 16px&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 去除移动端的播放器, 减少流量消耗</span><br><span class="line">  if ($(&quot;.left-col&quot;).css(&quot;display&quot;) === &quot;none&quot;) &#123;</span><br><span class="line">    $(&quot;.aplayer&quot;).remove();</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里引入了 cdn 库，如果上文在 head 也引入这两个文件，那可以把 head 里的删了</p><ol start="3"><li>每篇文章要加音乐时只需在顶部引入 <code>music: 歌曲 ID</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">title: 使用 Hexo 主题 Yelee</span><br><span class="line">date: 2017-08-24</span><br><span class="line">description: &quot; 更换博客主题 Yelee 的前前后后 &quot;</span><br><span class="line">top: true</span><br><span class="line">music: 729638</span><br><span class="line">categories: Web</span><br><span class="line">tags: Yelee</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="修改头像动画"><a href="#修改头像动画" class="headerlink" title="修改头像动画"></a>修改头像动画</h2><p><strong>目标文件：themes/yelee/source/css/_partial/main.styl</strong></p><p>修改头像为旋转效果：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line">    // animation: profilepic .15s linear infinite alternate;</span><br><span class="line">    // -webkit-animation: profilepic .15s linear infinite alternate;</span><br><span class="line">    <span class="selector-tag">animation</span>: <span class="selector-tag">profilepic</span> 5<span class="selector-tag">s</span> <span class="selector-tag">linear</span> <span class="selector-tag">infinite</span>;</span><br><span class="line">    -webkit-animation: profilepic 5s linear infinite; // profilepic 动画，周期 5 秒，速度不变，无限循环</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> profilepic &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        // right: 4px;</span><br><span class="line">        // top: 1x;</span><br><span class="line">        <span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(360<span class="selector-tag">deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        // right: 0px;</span><br><span class="line">        // top: -1px;</span><br><span class="line">        <span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(0<span class="selector-tag">deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>animation: name duration timing-function delay iteration-count direction;</code><br>animation 是 CSS 动画属性：第一个参数是用 @keyframes 定义的动画，第二个参数是单次动画持续时间，<br>第三个是动画的速度曲线，第四个参数是动画开始之前的延迟，第五个是动画应该播放的次数，最后一个规定是否应该轮流反向播放动画</p><h2 id="添加多合一打赏"><a href="#添加多合一打赏" class="headerlink" title="添加多合一打赏"></a>添加多合一打赏</h2><p>实现原理和源码见博文: <a href="https://mkblog.cn/922/" target="_blank" rel="noopener">https://mkblog.cn/922/</a></p><p>给 yelee 的配置文件 <code>_config.yml</code> 加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 打赏</span><br><span class="line"># 将 on 改为 false 去掉打赏</span><br><span class="line">donate:</span><br><span class="line">  on: true</span><br><span class="line">  multipay: /img/multipay.png</span><br></pre></td></tr></table></figure><p>multipay.png 上的二维码指向链接 <a href="https://blog.wangriyu.wang/pages/donate" target="_blank" rel="noopener">https://blog.wangriyu.wang/pages/donate</a> , 然后根据用户的 userAgent 转向不同服务</p><p><strong>目标文件：themes/yelee/layout/_partial/left-col.ejs</strong><br>找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav <span class="class"><span class="keyword">class</span></span>=<span class="string">"header-nav"</span>&gt;</span><br><span class="line">    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"social"</span>&gt;</span><br><span class="line">        &lt;% <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> theme.subnav)&#123; %&gt;</span><br><span class="line">            &lt;a <span class="class"><span class="keyword">class</span></span>=<span class="string">"fa &lt;%= i %&gt;"</span> href=<span class="string">"&lt;%- url_for(theme.subnav[i]) %&gt;"</span> title=<span class="string">"&lt;%= i %&gt;"</span>&gt;&lt;/a&gt;</span><br><span class="line">        &lt;%&#125;%&gt;</span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>nav&gt;</span><br></pre></td></tr></table></figure><p>在 <code>&lt;/ul&gt;</code> 下添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.donate.on) &#123; %&gt;</span><br><span class="line">    &lt;ul <span class="class"><span class="keyword">class</span></span>=<span class="string">"social"</span>&gt;</span><br><span class="line">        &lt;div style=<span class="string">"position: absolute; top: 95%; left: 50%; margin-left: -30px;"</span>&gt;</span><br><span class="line">            &lt;p style=<span class="string">"display: block"</span>&gt;</span><br><span class="line">                &lt;a</span><br><span class="line">                    <span class="class"><span class="keyword">class</span></span>=<span class="string">"donateIcon"</span></span><br><span class="line">                    href=<span class="string">"javascript:void(0)"</span></span><br><span class="line">                    onmouseout=<span class="string">"</span></span><br><span class="line"><span class="string">                        var qr = document.getElementById('donate');</span></span><br><span class="line"><span class="string">                        qr.style.display='none';</span></span><br><span class="line"><span class="string">                    "</span></span><br><span class="line">                    onmouseenter=<span class="string">"</span></span><br><span class="line"><span class="string">                        var qr = document.getElementById('donate');</span></span><br><span class="line"><span class="string">                        qr.style.display='block';</span></span><br><span class="line"><span class="string">                    "</span>&gt;</span><br><span class="line">                    赏</span><br><span class="line">                &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>p&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>在 <code>left-col.ejs</code> 文件末尾 <code>&lt;/div&gt;</code> 之前添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.donate.multipay) &#123; %&gt;</span><br><span class="line">    &lt;div id=<span class="string">"donate"</span>&gt;</span><br><span class="line">        &lt;img id=<span class="string">"multipay"</span> src=<span class="string">"&lt;%=theme.donate.multipay%&gt;"</span> width=<span class="string">"250px"</span> alt=<span class="string">"&lt;%=theme.author%&gt; Multipay"</span>/&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"triangle"</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p><strong>目标文件：themes/yelee/source/css/_partial/customise/social-icon.styl</strong><br>在顶部找到找到</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span> <span class="selector-class">.header-nav</span> <span class="selector-class">.social</span></span><br><span class="line">    <span class="selector-tag">margin-top</span> 10<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">text-align</span> <span class="selector-tag">center</span></span><br><span class="line">    <span class="selector-tag">font-family</span> <span class="selector-tag">Arial</span></span><br><span class="line">    <span class="selector-tag">a</span></span><br><span class="line">        <span class="selector-tag">width</span> <span class="selector-tag">base-font-size</span> + 21</span><br><span class="line">        <span class="selector-tag">height</span> @<span class="keyword">width</span></span><br><span class="line">        border-radius <span class="number">50%</span></span><br><span class="line">        margin <span class="number">0</span> <span class="number">2px</span> <span class="number">6px</span></span><br><span class="line">        vertical-align middle</span><br><span class="line">        font-size .<span class="number">66</span>*@width</span><br><span class="line">        line-height @width</span><br><span class="line">        text-align center</span><br><span class="line">        color white</span><br><span class="line">        background #<span class="number">6</span>f7170</span><br><span class="line">        opacity i-opacity</span><br><span class="line">        box-shadow <span class="number">1px</span> <span class="number">2px</span> <span class="number">2px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, .<span class="number">1</span>), <span class="number">1px</span> <span class="number">1px</span> <span class="number">3px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, .<span class="number">3</span>)</span><br><span class="line">        &amp;:hover</span><br><span class="line">            opacity <span class="number">1</span></span><br><span class="line">            transform scale(<span class="number">1.1</span>)</span><br></pre></td></tr></table></figure><p>在 <code>a</code> 标签的样式后面加上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.donateIcon</span></span><br><span class="line">    <span class="selector-tag">display</span> <span class="selector-tag">block</span></span><br><span class="line">    <span class="selector-tag">width</span> 56<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">margin</span> <span class="selector-tag">auto</span></span><br><span class="line">    <span class="selector-tag">height</span> 56<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">line-height</span> 56<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">font-size</span> 20<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">color</span> <span class="selector-id">#fff</span></span><br><span class="line">    <span class="selector-tag">border</span> <span class="selector-tag">none</span></span><br><span class="line">    <span class="selector-tag">background</span> <span class="selector-id">#4094c7</span></span><br><span class="line">    <span class="selector-tag">border-radius</span> 50%</span><br><span class="line">    <span class="selector-tag">text-align</span> <span class="selector-tag">center</span></span><br><span class="line">    <span class="selector-tag">-webkit-box-shadow</span> 0 2<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.16</span>), 0 2<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.12</span>)</span><br><span class="line">    <span class="selector-tag">box-shadow</span> 0 2<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.16</span>), 0 2<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.12</span>)</span><br><span class="line">    <span class="selector-tag">-webkit-transition</span> 0<span class="selector-class">.4s</span> <span class="selector-tag">ease-in-out</span></span><br><span class="line">    <span class="selector-tag">-moz-transition</span> 0<span class="selector-class">.4s</span> <span class="selector-tag">ease-in-out</span></span><br><span class="line">    <span class="selector-tag">-ms-transition</span> 0<span class="selector-class">.4s</span> <span class="selector-tag">ease-in-out</span></span><br><span class="line">    <span class="selector-tag">transition</span> 0<span class="selector-class">.4s</span> <span class="selector-tag">ease-in-out</span></span><br></pre></td></tr></table></figure><p><strong>目标文件：themes/yelee/source/css/_partial/main.styl</strong><br>找到 <code>intrude-less</code> 并加上 donate 标签的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.intrude-less</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">76%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">112px</span> auto <span class="number">0</span>;</span><br><span class="line">+   #donate &#123;</span><br><span class="line">+       <span class="selector-tag">display</span>: <span class="selector-tag">none</span>;</span><br><span class="line">+       <span class="selector-tag">position</span>: <span class="selector-tag">fixed</span>;</span><br><span class="line">+       <span class="selector-tag">top</span>: 280<span class="selector-tag">px</span>;</span><br><span class="line">+       <span class="selector-tag">left</span>: 25<span class="selector-tag">px</span>;</span><br><span class="line">+       <span class="selector-tag">img</span> &#123;</span><br><span class="line">+           border-radius: 5px;</span><br><span class="line">+       &#125;</span><br><span class="line">+       <span class="selector-class">.triangle</span> &#123;</span><br><span class="line">+           height: 0;</span><br><span class="line">+           <span class="selector-tag">width</span>: 0;</span><br><span class="line">+           <span class="selector-tag">margin</span>: <span class="selector-tag">-5px</span> 0 0 85<span class="selector-tag">px</span>;</span><br><span class="line">+           <span class="selector-tag">border-right</span>: 45<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">transparent</span>;</span><br><span class="line">+           <span class="selector-tag">border-left</span>: 45<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">transparent</span>;</span><br><span class="line">+           <span class="selector-tag">border-top</span>: 30<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#5b91ee</span>;</span><br><span class="line">+       &#125;</span><br><span class="line">+   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改移动端背景"><a href="#修改移动端背景" class="headerlink" title="修改移动端背景"></a>修改移动端背景</h2><p><strong>目标文件：themes/yelee/layout/_partial/background.ejs</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.background_image)&#123; %&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> iPad = <span class="built_in">window</span>.navigator.userAgent.indexOf(<span class="string">'iPad'</span>);</span><br><span class="line">      <span class="keyword">if</span> (iPad &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> bgColorList = [<span class="string">"#9db3f4"</span>, <span class="string">"#414141"</span>, <span class="string">"#e5a859"</span>, <span class="string">"#f5dfc6"</span>, <span class="string">"#c084a0"</span>, <span class="string">"#847e72"</span>, <span class="string">"#cd8390"</span>, <span class="string">"#996731"</span>];</span><br><span class="line">        <span class="keyword">let</span> bgColor = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random() * (bgColorList.length - <span class="number">1</span>));</span><br><span class="line">        $(<span class="string">"body"</span>).css(&#123;<span class="string">"background-color"</span>: bgColorList[bgColor], <span class="string">"background-size"</span>: <span class="string">"cover"</span>&#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($(<span class="string">".left-col"</span>).css(<span class="string">"display"</span>) === <span class="string">"none"</span>) &#123;</span><br><span class="line">        $(<span class="string">"body"</span>).css(&#123;</span><br><span class="line">          <span class="string">"background-image"</span>: <span class="string">"url(&lt;%- theme.root_url %&gt;/background/mobile.jpg)"</span>,</span><br><span class="line">          <span class="string">"background-repeat"</span>: <span class="string">"no-repeat"</span>,</span><br><span class="line">          <span class="string">"background-attachment"</span>: <span class="string">"fixed"</span>,</span><br><span class="line">          <span class="string">"background-size"</span>: <span class="string">"cover"</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> backgroundnum = &lt;%= theme.background_image %&gt;;</span><br><span class="line">        var backgroundimg = "url(&lt;%- theme.root_url %&gt;/background/bg-x.jpg)".replace(/x/gi, Math.ceil(Math.random() * backgroundnum));</span><br><span class="line">        $("body").css(&#123;</span><br><span class="line">          "background": backgroundimg,</span><br><span class="line">          "background-position": "0% 80%",</span><br><span class="line">          "background-attachment": "fixed",</span><br><span class="line">          "background-size": "cover"</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h2 id="修改列表显示的-bug"><a href="#修改列表显示的-bug" class="headerlink" title="修改列表显示的 bug"></a>修改列表显示的 bug</h2><p>bug 如下：Expressions 和 xScope 的前缀消失<br><img src="/images/hexo/list.png" alt="image"></p><p>markdown 中编写无序列表时，比如 “- [列表名]”, 如果列表名前两个字符含 ‘x’, 则列表前缀消失</p><p>排查之后发现是 main.js 里对无序列表进行了判断，若出现 “- [ ]” 或者 “- [x]”，则解析成复选框的样式，需要修改判断条件</p><p><strong>目标文件：themes/yelee/source/js/main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Task lists in markdown</span></span><br><span class="line">$(<span class="string">'ul &gt; li'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> taskList = &#123;</span><br><span class="line">-       field: <span class="keyword">this</span>.textContent.substring(<span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">+       field: <span class="keyword">this</span>.textContent.substring(<span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">        check: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">-           <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(str);</span><br><span class="line">-           <span class="keyword">return</span> <span class="keyword">this</span>.field.match(re);</span><br><span class="line">+           <span class="keyword">return</span> <span class="keyword">this</span>.field === str;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加-404-文字特效"><a href="#添加-404-文字特效" class="headerlink" title="添加 404 文字特效"></a>添加 404 文字特效</h2><p>之前在 CodePen 上看到这个文字特效: <a href="https://codepen.io/Chokcoco/pen/RVxbWW?editors=1100" target="_blank" rel="noopener">https://codepen.io/Chokcoco/pen/RVxbWW?editors=1100</a><br>感觉很适合用来做 404 特效，便加到 404 页面，但原代码不能直接用，改了半天总算适配到自己的博客上，<a href="/pages/shake.html">点击查看效果</a></p><p>如果没有 404 页面，先用 Hexo 命令新建一个名为 404 的页面: <code>hexo new page 404</code></p><p>将 <code>/source/404/index.md</code> 文件的内容修改如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"></span><br><span class="line">toc: false</span><br><span class="line">comments: false</span><br><span class="line">permalink: /404</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: flex"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"whiteSide"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"errBefore"</span>&gt;</span>404 Not Found<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hgroup</span> <span class="attr">class</span>=<span class="string">"text-magic"</span>&gt;</span></span><br><span class="line">      404 Not Found</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"white"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"errAfter"</span>&gt;</span>404 Not Found<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改样式: <code>themes/yelee/source/css/_partial/article.styl</code><br>在 <code>.article-entry</code> 子级中加上如下样式:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.whiteSide</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text-magic</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%) <span class="built_in">skewX</span>(0deg);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">6vw</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Raleway, Verdana, Arial, sans-serif;</span><br><span class="line">  <span class="attribute">animation</span>: skewX <span class="number">5s</span> ease-in infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.white</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">4vw</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">5</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">animation</span>: whiteMove <span class="number">3s</span> ease-out infinite;</span><br><span class="line">  <span class="attribute">mix-blend-mode</span>: luminosity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.errBefore</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">6vw</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Raleway, Verdana, Arial, sans-serif;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 3vw);</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">6vw</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 0, 0, .9);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">animation</span>: redShadow <span class="number">1.5s</span> ease-in infinite;</span><br><span class="line">  <span class="attribute">-webkit-filter</span>: <span class="built_in">contrast</span>(200%);</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">0.1px</span> <span class="number">0</span> <span class="number">0</span> red;</span><br><span class="line">  <span class="attribute">mix-blend-mode</span>: color-burn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.errAfter</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">6vw</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Raleway, Verdana, Arial, sans-serif;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 3vw);</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">6vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2vw</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(0, 0, 0, .8);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 255, .9);</span><br><span class="line">  <span class="attribute">animation</span>: redHeight <span class="number">3s</span> ease-out infinite;</span><br><span class="line">  <span class="attribute">-webkit-filter</span>: <span class="built_in">contrast</span>(200%);</span><br><span class="line">  <span class="attribute">mix-blend-mode</span>: hard-light;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.errAfter</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">1px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.white</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">6vw</span>;</span><br><span class="line">    <span class="attribute">animation</span>: whiteMove <span class="number">3s</span> ease-out infinite;</span><br><span class="line">  &#125;</span><br><span class="line">  @<span class="keyword">keyframes</span> whiteMove &#123;</span><br><span class="line">    8%  &#123; <span class="attribute">top</span>: <span class="number">5vw</span>;   &#125;</span><br><span class="line">    20% &#123; <span class="attribute">top</span>: <span class="number">6.6vw</span>; &#125;</span><br><span class="line">    45% &#123; <span class="attribute">top</span>: <span class="number">5.5vw</span>; &#125;</span><br><span class="line">    60% &#123; <span class="attribute">top</span>: <span class="number">4vw</span>;   &#125;</span><br><span class="line">    88% &#123; <span class="attribute">top</span>: <span class="number">5.5vw</span>; &#125;</span><br><span class="line">    90% &#123; <span class="attribute">top</span>: <span class="number">3.5vw</span>; &#125;</span><br><span class="line">    92% &#123; <span class="attribute">top</span>: <span class="number">4vw</span>;   &#125;</span><br><span class="line">    94% &#123; <span class="attribute">top</span>: <span class="number">5.6vw</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">425px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.whiteSide</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.white</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">12vw</span>;</span><br><span class="line">    <span class="attribute">animation</span>: whiteMove <span class="number">3s</span> ease-out infinite;</span><br><span class="line">  &#125;</span><br><span class="line">  @<span class="keyword">keyframes</span> whiteMove &#123;</span><br><span class="line">    8%  &#123; <span class="attribute">top</span>: <span class="number">6vw</span>;   &#125;</span><br><span class="line">    20% &#123; <span class="attribute">top</span>: <span class="number">7.2vw</span>; &#125;</span><br><span class="line">    45% &#123; <span class="attribute">top</span>: <span class="number">9vw</span>;   &#125;</span><br><span class="line">    60% &#123; <span class="attribute">top</span>: <span class="number">6vw</span>;   &#125;</span><br><span class="line">    88% &#123; <span class="attribute">top</span>: <span class="number">3vw</span>;   &#125;</span><br><span class="line">    90% &#123; <span class="attribute">top</span>: <span class="number">7vw</span>;   &#125;</span><br><span class="line">    92% &#123; <span class="attribute">top</span>: <span class="number">4vw</span>;   &#125;</span><br><span class="line">    94% &#123; <span class="attribute">top</span>: <span class="number">7.2vw</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> redShadow &#123;</span><br><span class="line">  20% &#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3vw</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  60% &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0.1vw</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">4vw</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> redHeight &#123;</span><br><span class="line">  20% &#123; <span class="attribute">height</span>: <span class="number">3.5vw</span>; &#125;</span><br><span class="line">  35% &#123; <span class="attribute">height</span>: <span class="number">1vw</span>;   &#125;</span><br><span class="line">  50% &#123; <span class="attribute">height</span>: <span class="number">3.5vw</span>; &#125;</span><br><span class="line">  60% &#123; <span class="attribute">height</span>: <span class="number">2vw</span>;   &#125;</span><br><span class="line">  70% &#123; <span class="attribute">height</span>: <span class="number">3vw</span>;   &#125;</span><br><span class="line">  80% &#123; <span class="attribute">height</span>: <span class="number">2vw</span>;   &#125;</span><br><span class="line">  99% &#123; <span class="attribute">height</span>: <span class="number">0vw</span>;   &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> whiteMove &#123;</span><br><span class="line">  8%  &#123; <span class="attribute">top</span>: <span class="number">3vw</span>;   &#125;</span><br><span class="line">  20% &#123; <span class="attribute">top</span>: <span class="number">3.6vw</span>; &#125;</span><br><span class="line">  45% &#123; <span class="attribute">top</span>: <span class="number">4.5vw</span>; &#125;</span><br><span class="line">  60% &#123; <span class="attribute">top</span>: <span class="number">3vw</span>;   &#125;</span><br><span class="line">  88% &#123; <span class="attribute">top</span>: <span class="number">1.5vw</span>; &#125;</span><br><span class="line">  90% &#123; <span class="attribute">top</span>: <span class="number">3.5vw</span>; &#125;</span><br><span class="line">  92% &#123; <span class="attribute">top</span>: <span class="number">2vw</span>;   &#125;</span><br><span class="line">  94% &#123; <span class="attribute">top</span>: <span class="number">3.6vw</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> skewX &#123;</span><br><span class="line">  78% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%) <span class="built_in">skewX</span>(0);</span><br><span class="line">  &#125;</span><br><span class="line">  79% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%) <span class="built_in">skewX</span>(10deg);</span><br><span class="line">  &#125;</span><br><span class="line">  80% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%) <span class="built_in">skewX</span>(-10deg);</span><br><span class="line">  &#125;</span><br><span class="line">  81% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%) <span class="built_in">skewX</span>(0);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不想主题文件修改你添加的单页面内容，需要在站点配置文件中配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//  单个文件夹下全部文件：skip_render: test/*</span><br><span class="line">//  单个文件夹下指定类型文件：skip_render: test/*.html</span><br><span class="line">//  单个文件夹下全部文件以及子目录:skip_render: test/**</span><br><span class="line">//  多个文件夹以及各种复杂情况：</span><br><span class="line">//  skip_render:</span><br><span class="line">//      - `test1/*.html`</span><br><span class="line">//      - `test2/**`</span><br><span class="line"></span><br><span class="line">比如 skip_render: pages/** 代表 source/pages/ 目录下所有东西都不会被修改</span><br></pre></td></tr></table></figure><p>后来我又把 404 特效换成这个效果：<a href="/pages/yun.html">点击查看</a></p><p>将 <code>/source/404/index.md</code> 文件的内容修改如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line">-------</span><br><span class="line"></span><br><span class="line">toc: false</span><br><span class="line">comments: false</span><br><span class="line">permalink: /404</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/pixi.js/4.5.5/pixi.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"yun"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    /**</span></span><br><span class="line"><span class="undefined">     *  404 页面</span></span><br><span class="line"><span class="undefined">     */</span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">var</span> vendors = [<span class="string">'ms'</span>, <span class="string">'moz'</span>, <span class="string">'webkit'</span>, <span class="string">'o'</span>];</span></span><br><span class="line"><span class="javascript">         <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++x) &#123;</span></span><br><span class="line"><span class="javascript">           <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vendors[x] + <span class="string">'RequestAnimationFrame'</span>];</span></span><br><span class="line"><span class="javascript">           <span class="built_in">window</span>.cancelAnimationFrame = <span class="built_in">window</span>[vendors[x] + <span class="string">'CancelAnimationFrame'</span>] || <span class="built_in">window</span>[vendors[x] + <span class="string">'CancelRequestAnimationFrame'</span>];</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">         <span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame)</span></span><br><span class="line"><span class="javascript">           <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback, element</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">var</span> currTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript">             <span class="keyword">var</span> timeToCall = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">16</span> - (currTime - lastTime));</span></span><br><span class="line"><span class="javascript">             <span class="keyword">var</span> id = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                 callback(currTime + timeToCall);</span></span><br><span class="line"><span class="undefined">               &#125;,</span></span><br><span class="line"><span class="undefined">               timeToCall);</span></span><br><span class="line"><span class="undefined">             lastTime = currTime + timeToCall;</span></span><br><span class="line"><span class="javascript">             <span class="keyword">return</span> id;</span></span><br><span class="line"><span class="undefined">           &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">         <span class="keyword">if</span> (!<span class="built_in">window</span>.cancelAnimationFrame)</span></span><br><span class="line"><span class="javascript">           <span class="built_in">window</span>.cancelAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">             clearTimeout(id);</span></span><br><span class="line"><span class="undefined">           &#125;;</span></span><br><span class="line"><span class="undefined">       &#125;());</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//math2 utils</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Math2=&#123;&#125;;</span></span><br><span class="line"><span class="javascript">    Math2.random = <span class="function"><span class="keyword">function</span> (<span class="params">t, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (n - t) + t</span></span><br><span class="line"><span class="javascript">    &#125;, Math2.map = <span class="function"><span class="keyword">function</span> (<span class="params">t, n, r, a, o</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> (o - a) * ((t - n) / (r - n)) + a</span></span><br><span class="line"><span class="javascript">    &#125;, Math2.randomPlusMinus = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> t = t ? t : <span class="number">.5</span>, <span class="built_in">Math</span>.random() &gt; t ? <span class="number">-1</span> : <span class="number">1</span></span></span><br><span class="line"><span class="javascript">    &#125;, Math2.randomInt = <span class="function"><span class="keyword">function</span> (<span class="params">t, n</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> n += <span class="number">1</span>, <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (n - t) + t)</span></span><br><span class="line"><span class="javascript">    &#125;, Math2.randomBool = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> t = t ? t : <span class="number">.5</span>, <span class="built_in">Math</span>.random() &lt; t ? !<span class="number">0</span> : !<span class="number">1</span></span></span><br><span class="line"><span class="javascript">    &#125;, Math2.degToRad = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> rad = t * <span class="built_in">Math</span>.PI / <span class="number">180</span>, rad</span></span><br><span class="line"><span class="javascript">    &#125;, Math2.radToDeg = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> deg = <span class="number">180</span> / (<span class="built_in">Math</span>.PI * t), deg</span></span><br><span class="line"><span class="javascript">    &#125;, Math2.rgbToHex = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">t</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> (<span class="string">"0"</span> + <span class="built_in">parseInt</span>(t).toString(<span class="number">16</span>)).slice(<span class="number">-2</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      t = t.match(<span class="regexp">/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> r = n(t[<span class="number">1</span>]) + n(t[<span class="number">2</span>]) + n(t[<span class="number">3</span>]);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> r.toUpperCase()</span></span><br><span class="line"><span class="javascript">    &#125;, Math2.distance = <span class="function"><span class="keyword">function</span> (<span class="params">t, n, r, a</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt((r - t) * (r - t) + (a - n) * (a - n))</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//mouse</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mousePos=&#123;</span></span><br><span class="line"><span class="undefined">      x:0,</span></span><br><span class="line"><span class="undefined">      y:0</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      e = e || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> pageX = e.pageX - <span class="number">300</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> pageY = e.pageY + <span class="number">350</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (pageX === <span class="literal">undefined</span>) &#123;</span></span><br><span class="line"><span class="javascript">        pageX = e.clientX + <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft - <span class="number">300</span>;</span></span><br><span class="line"><span class="javascript">        pageY = e.clientY + <span class="built_in">document</span>.body.scrollTop + <span class="built_in">document</span>.documentElement.scrollTop + <span class="number">350</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      mousePos = &#123;</span></span><br><span class="line"><span class="undefined">        x: pageX,</span></span><br><span class="line"><span class="undefined">        y: pageY,</span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> options = &#123;</span></span><br><span class="line"><span class="undefined">      width: 1000,</span></span><br><span class="line"><span class="undefined">      height: 1000,</span></span><br><span class="line"><span class="javascript">      keyword: <span class="string">"404"</span>,</span></span><br><span class="line"><span class="undefined">      density: 8,</span></span><br><span class="line"><span class="undefined">      densityText: 2,</span></span><br><span class="line"><span class="undefined">      minDist: 20,</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// initialize canvas</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span></span><br><span class="line"><span class="undefined">    canvas.width = options.width;</span></span><br><span class="line"><span class="undefined">    canvas.height = options.height;</span></span><br><span class="line"><span class="undefined">    canvas.style.width = options.width/2;</span></span><br><span class="line"><span class="undefined">    canvas.style.height = options.height/2;</span></span><br><span class="line"><span class="javascript">    canvas.getContext(<span class="string">'2d'</span>).scale(<span class="number">2</span>,<span class="number">2</span>)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> renderer = <span class="keyword">new</span> PIXI.autoDetectRenderer(options.width, options.height, &#123;</span></span><br><span class="line"><span class="javascript">      transparent: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> stage = <span class="keyword">new</span> PIXI.Container(<span class="string">"0X000000"</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">"yun"</span>).appendChild(renderer.view);</span></span><br><span class="line"><span class="javascript">    renderer.view.id = <span class="string">"notFound"</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> imageData = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> particles =[];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      positionParticles();</span></span><br><span class="line"><span class="undefined">      positionText();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">positionParticles</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span></span><br><span class="line"><span class="undefined">      canvas.width = 500;</span></span><br><span class="line"><span class="undefined">      canvas.height = 350;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">      context.fillStyle = <span class="string">"#000000"</span>;</span></span><br><span class="line"><span class="javascript">      context.font = <span class="string">"300px 'Arial', sans-serif"</span>;</span></span><br><span class="line"><span class="undefined">      context.fillText(options.keyword, 0, 250);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">350</span>, <span class="number">500</span>);</span></span><br><span class="line"><span class="undefined">      data = imageData.data;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// Iterate each row and column</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imageData.height; i += options.density) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; imageData.width; j += options.density) &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// Get the color of the pixel</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> color = data[((j * (imageData.width * <span class="number">4</span>)) + (i * <span class="number">4</span>)) - <span class="number">1</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// If the color is black, draw pixels</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (color == <span class="number">255</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> newPar = particle();</span></span><br><span class="line"><span class="undefined">            newPar.setPosition(i, j);</span></span><br><span class="line"><span class="undefined">            particles.push(newPar);</span></span><br><span class="line"><span class="undefined">            stage.addChild(newPar);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">positionText</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span></span><br><span class="line"><span class="undefined">      canvas.width = 400;</span></span><br><span class="line"><span class="undefined">      canvas.height = 120;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">      context.fillStyle = <span class="string">"#000000"</span>;</span></span><br><span class="line"><span class="javascript">      context.font = <span class="string">"80px 'Arial', sans-serif"</span>;</span></span><br><span class="line"><span class="javascript">      context.fillText(<span class="string">"Not Found"</span>, <span class="number">0</span>, <span class="number">80</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>);</span></span><br><span class="line"><span class="undefined">      data = imageData.data;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">// Iterate each row and column</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imageData.height; i += options.densityText) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; imageData.width; j += options.densityText) &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// Get the color of the pixel</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> color = data[((j * (imageData.width * <span class="number">4</span>)) + (i * <span class="number">4</span>)) - <span class="number">1</span>];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">          <span class="comment">// If the color is black, draw pixels</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (color == <span class="number">255</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> newPar = particle(<span class="literal">true</span>);</span></span><br><span class="line"><span class="undefined">            newPar.setPosition(i, j);</span></span><br><span class="line"><span class="undefined">            particles.push(newPar);</span></span><br><span class="line"><span class="undefined">            stage.addChild(newPar);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">particle</span>(<span class="params">text</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span> = <span class="keyword">new</span> PIXI.Graphics();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (text == <span class="literal">true</span>) &#123;</span></span><br><span class="line"><span class="javascript">        $<span class="keyword">this</span>.text = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.beginFill(<span class="number">0X5CC9F5</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> radius;</span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.radius = radius = $<span class="keyword">this</span>.text ? <span class="built_in">Math</span>.random() * <span class="number">3.5</span> : <span class="built_in">Math</span>.random() * <span class="number">10.5</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.drawCircle(<span class="number">0</span>, <span class="number">0</span>, radius);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.size = <span class="keyword">this</span>.radius;</span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.x = -<span class="keyword">this</span>.width;</span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.y = -<span class="keyword">this</span>.height;</span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.free = <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.timer = Math2.randomInt(<span class="number">0</span>, <span class="number">100</span>);</span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.v = Math2.randomPlusMinus() * Math2.random(<span class="number">.5</span>, <span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.hovered = <span class="literal">false</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.alpha = Math2.randomInt(<span class="number">10</span>, <span class="number">100</span>) / <span class="number">100</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.vy = <span class="number">-5</span> + <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">10</span>) / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.vx = <span class="number">-4</span> + <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">8</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      $<span class="keyword">this</span>.setPosition = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> ($<span class="keyword">this</span>.text) &#123;</span></span><br><span class="line"><span class="javascript">          $<span class="keyword">this</span>.x = x + (options.width / <span class="number">2</span> - <span class="number">180</span>);</span></span><br><span class="line"><span class="javascript">          $<span class="keyword">this</span>.y = y + (options.height / <span class="number">2</span> + <span class="number">100</span>);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          $<span class="keyword">this</span>.x = x + (options.width / <span class="number">2</span> - <span class="number">250</span>);</span></span><br><span class="line"><span class="javascript">          $<span class="keyword">this</span>.y = y + (options.height / <span class="number">2</span> - <span class="number">175</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> $<span class="keyword">this</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      renderer.render(stage);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; particles.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> p = particles[i];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (mousePos.x &gt; p.x &amp;&amp; mousePos.x &lt; p.x + p.size &amp;&amp; mousePos.y &gt; p.y &amp;&amp; mousePos.y &lt; p.y + p.size) &#123;</span></span><br><span class="line"><span class="javascript">          p.hovered = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        p.scale.x = p.scale.y = scale = <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.min(<span class="number">2.5</span> - (Math2.distance(p.x, p.y, mousePos.x, mousePos.y) / <span class="number">160</span>), <span class="number">160</span>), <span class="number">1</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        p.x = p.x + <span class="number">.2</span> * <span class="built_in">Math</span>.sin(p.timer * <span class="number">.15</span>)</span></span><br><span class="line"><span class="javascript">        p.y = p.y + <span class="number">.2</span> * <span class="built_in">Math</span>.cos(p.timer * <span class="number">.15</span>)</span></span><br><span class="line"><span class="undefined">        p.timer = p.timer + p.v;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.requestAnimationFrame(update);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    init();</span></span><br><span class="line"><span class="undefined">    update();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样在 <code>.article-entry</code> 子级中加上如下样式:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#notFound</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%) <span class="built_in">translateX</span>(-50%);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#yun</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">320px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#yun</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#notFound</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">425px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#yun</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#notFound</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120%</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终效果: <a href="/404.html">点击查看</a></p><h2 id="压缩优化静态文件"><a href="#压缩优化静态文件" class="headerlink" title="压缩优化静态文件"></a>压缩优化静态文件</h2><p>使用 <a href="https://github.com/chenzhutian/hexo-all-minifier" target="_blank" rel="noopener">hexo-all-minifier</a> 插件压缩 js、html、css 和图片</p><p>在博客目录安装插件 <code>npm install hexo-all-minifier --save</code></p><p>对于 Mac 用户，可能还需要安装以下依赖:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install libtool automake autoconf nasm</span><br></pre></td></tr></table></figure><p>在站点配置文件 <code>_config.yml</code> 中添加插件配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">### hexo_all_minifier: https://github.com/chenzhutian/hexo-all-minifier</span><br><span class="line">all_minifier: <span class="literal">true</span></span><br><span class="line">html_minifier:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  ignore_error: <span class="literal">false</span></span><br><span class="line">  silent: <span class="literal">false</span> <span class="comment">// 设为 true 代表不输出压缩的信息日志，默认为 false</span></span><br><span class="line">css_minifier:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  silent: <span class="literal">false</span></span><br><span class="line">  exclude: <span class="comment">// 排除此类型文件</span></span><br><span class="line">    - <span class="string">'*.min.css'</span></span><br><span class="line">js_minifier:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  mangle: <span class="literal">true</span></span><br><span class="line">  silent: <span class="literal">false</span></span><br><span class="line">  exclude:</span><br><span class="line">    - <span class="string">'*.min.js'</span></span><br><span class="line">image_minifier:</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  interlaced: <span class="literal">true</span> <span class="comment">// 交错 gif 图实现渐进式渲染，默认为 false</span></span><br><span class="line">  multipass: <span class="literal">true</span> <span class="comment">// 压缩 svg 格式，默认 false</span></span><br><span class="line">  optimizationLevel: <span class="number">3</span> <span class="comment">// 压缩级别 0~7，默认为 2</span></span><br><span class="line">  pngquant: <span class="literal">true</span> <span class="comment">// 使用 imagemin-pngquant 插件压缩 png，默认为 false</span></span><br><span class="line">  progressive: <span class="literal">true</span> <span class="comment">// 无损转换为渐进式</span></span><br><span class="line">  silent: <span class="literal">false</span></span><br><span class="line">  exclude: <span class="comment">// 排除指定类型的图片文件，比如 gif,jpg, png, 或 svg，默认为 null</span></span><br></pre></td></tr></table></figure><p>使用 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --watch --debug</code> 命令查看加载信息</p><h2 id="添加谷歌站长并提交站点地图"><a href="#添加谷歌站长并提交站点地图" class="headerlink" title="添加谷歌站长并提交站点地图"></a>添加谷歌站长并提交站点地图</h2><p>验证网址：<a href="https://www.google.com/webmasters/tools/" target="_blank" rel="noopener">Search Console</a></p><p>然后安装 sitemap 生成器 <code>npm install hexo-generator-sitemap --save</code>，</p><p>在站点配置文件 <code>_config.yml</code> 中加上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">### sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">  template: ./sitemap_template.xml</span><br></pre></td></tr></table></figure><p>部署一遍博客目录下会多出一个 <code>sitemap.xml</code> 文件, 到谷歌站长里添加站点地图即可</p><p>这里提一点，搜索引擎会抓取路径在三级以内的地址，如果路径太多可能抓取不到，但 hexo 文章的路径默认会加上日期，比如 <code>http://wangriyu.wang/2017/08/24/Hexo/</code>，<br>在站点配置文件中修改一下 permalink(默认是:year/:month/:day/:title/)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: http://wangriyu.wang</span><br><span class="line">root: /</span><br><span class="line">permalink: :title.html</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><p>现在就不会加上日期了</p><h2 id="使用七牛云图床"><a href="#使用七牛云图床" class="headerlink" title="使用七牛云图床"></a>使用七牛云图床</h2><p><a href="https://portal.qiniu.com" target="_blank" rel="noopener">https://portal.qiniu.com</a><br>注册七牛云账号，进入对象存储，点击内容管理，上传图片或其他一些资源，上传完成便可以使用产生的外链来代替站内的图片资源，<br>七牛云还提供了图片处理的服务，添加水印、裁剪缩放等</p><h2 id="使用-Sentry-io-的错误收集服务"><a href="#使用-Sentry-io-的错误收集服务" class="headerlink" title="使用 Sentry.io 的错误收集服务"></a>使用 <a href="https://sentry.io" title=" 点击访问 " target="_blank" rel="noopener">Sentry.io</a> 的错误收集服务</h2><p>添加 CDN 库：<code>sentry: //cdn.ravenjs.com/3.18.1/raven.min.js</code></p><p>在 head.ejs 中加入以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;%- theme.CDN.sentry %&gt;"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">Raven.config(<span class="string">' 服务地址 '</span>).install()</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>服务地址改为注册得到的地址，例如 <a href="https://XXXXXXXXXXXX@sentry.io/XXXXXX" target="_blank" rel="noopener">https://XXXXXXXXXXXX@sentry.io/XXXXXX</a></p><p>之后打开 sentry 的网站查看，如果出现错误会一一记录下来<br><img src="/images/hexo/error.png" alt="image"></p><p>该网站支持很多语言，可以嵌入到很多东西中，方便收集错误，但是不建议长期放在网站上，感觉会影响性能</p><h2 id="添加二次元人物"><a href="#添加二次元人物" class="headerlink" title="添加二次元人物"></a>添加二次元人物</h2><p>安装插件 <code>npm install -save hexo-helper-live2d</code></p><p>在站点配置文件 <code>_config.yml</code> 中添加:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">## live2d: https://github.com/EYHN/hexo-helper-live2d</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  model:</span><br><span class="line">    use: live2d_models/live2d-widget-model-izumi // 加载本地 model 文件</span><br><span class="line">    scale: 1</span><br><span class="line">    hHeadPos: 0.5</span><br><span class="line">    vHeadPos: 0.618</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 100</span><br><span class="line">    height: 200</span><br><span class="line">    hOffset: -50</span><br><span class="line">    vOffset: -85</span><br><span class="line">  mobile:</span><br><span class="line">    show: false</span><br><span class="line">  react:</span><br><span class="line">    opacityDefault: 0.9</span><br><span class="line">    opacityOnHover: 0.3</span><br></pre></td></tr></table></figure><h2 id="更换图片背景为动态背景"><a href="#更换图片背景为动态背景" class="headerlink" title="更换图片背景为动态背景"></a>更换图片背景为动态背景</h2><p>在 <code>layout.ejs</code> 文件中的 left-col 和 mid-col 之间插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/bubbly-bg@0.2.3/dist/bubbly-bg.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  var userAgent = window.navigator.userAgent;</span><br><span class="line">  bubbly(&#123;</span><br><span class="line">    animate: true,</span><br><span class="line">    blur: 1,</span><br><span class="line">    bubbleFunc: () =&gt; `hsla($&#123;Math.random() * 360&#125;, 100%, 50%, $&#123;Math.random() * 0.25&#125;)`,</span><br><span class="line">    bubbles: !!userAgent.match(/AppleWebKit.*Mobile.*/) ? 20 : 88,</span><br><span class="line">    canvas: document.querySelector(&quot;#background&quot;),</span><br><span class="line">    colorStart: &quot;#F8E9DF&quot;,</span><br><span class="line">    colorStop: &quot;#1a001a&quot;,</span><br><span class="line">    compose: &quot;lighter&quot;,</span><br><span class="line">    shadowColor: &quot;#0ff&quot;,</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后把 <code>after-footer</code> 文件中的 <code>&lt;%- partial(&#39;_partial/background&#39;) %&gt;</code> 删掉</p><h2 id="推荐几个工具网站"><a href="#推荐几个工具网站" class="headerlink" title="推荐几个工具网站"></a>推荐几个工具网站</h2><p><a href="https://zhitu.isux.us/" title=" 点击访问 " target="_blank" rel="noopener">智图</a>：压缩图片很方便</p><p><a href="https://clipchamp.com/zh-Hans/dashboard" title=" 点击访问 " target="_blank" rel="noopener">ClipChamp.com</a>: 在线压缩转换视频</p><p><a href="https://gifs.com/" title=" 点击访问 " target="_blank" rel="noopener">Gifs.com</a>：视频转 gif，压缩截取等</p>]]></content>
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Yelee </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器本地存储</title>
      <link href="/2017/08-Storage.html"/>
      <url>/2017/08-Storage.html</url>
      <content type="html"><![CDATA[<h2 id="intro">前言</h2><blockquote><p>浏览器存储数据的几种方式</p></blockquote><ul><li>Cookies</li><li>Local Storage &amp; Session Storage</li><li>WebSQL &amp; IndexedDB</li></ul><a id="more"></a><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP Cookie（也叫 Web cookie 或者浏览器 Cookie）是服务器发送到用户浏览器并保存在浏览器上的一块数据，它会在浏览器下一次发起请求时被携带并发送到服务器上。比较经典的，可以它用来确定两次请求是否来自于同一个浏览器，从而能够确认和保持用户的登录状态（类似 token）。对于购物网站而言，cookie 是非常重要的，为了实现购物车功能，把已选物品加入 cookie，可以实现不同页面之间数据的同步，同时在提交订单的时候又会把这些 cookie 传到后台。</p><p>Cookie 主要用在以下三个方面:</p><ul><li>会话状态管理（如用户登录状态、购物车）</li><li>个性化设置（如用户自定义设置）</li><li>浏览器行为跟踪（如跟踪分析用户行为）</li></ul><h3 id="1-创建-cookie"><a href="#1-创建-cookie" class="headerlink" title="1. 创建 cookie"></a>1. 创建 cookie</h3><p>当服务器收到 HTTP 请求（request）时，可以在响应头（headers）里面增加一个 Set-Cookie 头部。浏览器收到响应（response）之后会取出 Cookie 信息并保存，之后对该服务器每一次请求中都通过 Cookie 请求头部将 Cookie 信息发送给服务器。另外，Cookie 的过期时间、域、路径、有效期、站点都可以根据需要来指定<br>格式：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: &lt;cookie 名称&gt; = &lt;cookie 值 &gt;</span><br></pre></td></tr></table></figure><p></p><p>服务器告诉客户端要保存 Cookie 信息， 响应的数据里面应该包含 Set-Cookie 头，浏览器收到之后会将 Cookie 保存，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-type: text/html</span><br><span class="line">Set-Cookie: yummy_cookie = choco</span><br><span class="line">Set-Cookie: tasty_cookie = strawberry</span><br></pre></td></tr></table></figure><p></p><p>对该服务器发起的每一次新的请求，浏览器都会将之前保存的 Cookie 信息通过 Cookie 请求头发送给服务器<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /sample_page.html HTTP/1.1</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: yummy_cookie = choco; tasty_cookie = strawberry</span><br></pre></td></tr></table></figure><p></p><h3 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h3><ul><li>会话期 Cookie （session cookie）<br>会话期 Cookie 是最简单的 Cookie：浏览器关闭之后它会被自动删除</li><li><p>持久 Cookie<br>持久 Cookie 可以指定一个特定的过期时间（Expires）或者有效期（Max-Age）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: name = SmartestEE; expires = Sat, 02 May 2017 23:38:25 GMT // max-age = 3600 * 72</span><br></pre></td></tr></table></figure></li><li><p>安全类型 Cookie<br>安全类型可以设置 secure 选项，该选项只是一个标记而没有值。只有在使用 SLL 和 HTTPS 协议向服务器发起请求时，才能确保 Cookie 被安全地发送到服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: name = Nicholas; secure</span><br></pre></td></tr></table></figure></li><li><p>HttpOnly 类型 Cookie<br>HttpOnly 类型可以设置 HttpOnly 选项，HTTP-only 类型的 Cookie 不能使用 Javascript 通过 Document.cookie 属性来访问，从而能够在一定程度上阻止跨域脚本攻击（XSS）。HttpOnly 标志并没有给你提供额外的加密或者安全性上的能力，当整个机器暴露在不安全的环境时，切记绝不能通过 HTTP Cookie 存储、传输机密或者敏感信息。JavaScript 可以通过跨站脚本攻击（XSS）的方式来窃取 Cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Cookie: name = Nicholas; HttpOnly</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-Cookie-的作用域"><a href="#3-Cookie-的作用域" class="headerlink" title="3. Cookie 的作用域"></a>3. Cookie 的作用域</h3><p>Domain 和 Path 指令定义了 Cookie 的作用域，即需要发送 Cookie 的 URL 集合。</p><ul><li><p>Domain 指令规定了需要发送 Cookie 的主机名。如果没有指定，默认为当前的文档地址上的主机名（但是不包含子域名）。如果指定了 Domain，则一般包含子域名。</p><p>如果设置了 Domain=mozilla.org，则 Cookie 包含在子域名中（如 developer.mozilla.org）。</p></li><li><p>Path 指令表明需要发送 Cookie 的 URL 路径。字符 %x2F (即 “/“) 用做文件夹分隔符，子文件夹也会被匹配到。</p><p>如设置 Path=/docs，则下面这些地址都将匹配到：”/docs”，”/docs/Web/“，”/docs/Web/HTTP”</p></li></ul><h3 id="4-JavaScript-通过-Document-cookies-访问设置-Cookie"><a href="#4-JavaScript-通过-Document-cookies-访问设置-Cookie" class="headerlink" title="4.  JavaScript 通过 Document.cookies 访问设置 Cookie"></a>4. JavaScript 通过 Document.cookies 访问设置 Cookie</h3><p>通过 Document.cookie 属性可以来创建新的 Cookie，也能够通过该属性来访问未被指定 HttpOnly 标志的 Cookie。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"yummy_cookie=choco"</span>;</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"tasty_cookie=strawberry"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.cookie);</span><br><span class="line"><span class="comment">// logs "yummy_cookie=choco; tasty_cookie=strawberry"</span></span><br></pre></td></tr></table></figure><p></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie" target="_blank" rel="noopener">一个完整支持 unicode 的 cookie 读取 / 写入器</a><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> docCookies = &#123;</span><br><span class="line">  <span class="comment">// docCookies.getItem(name), 读取一个 cookie。如果 cookie 不存在返回 null</span></span><br><span class="line">  <span class="comment">// encodeURIComponent 转义除了字母、数字、(、)、. 、! 、~ 、* 、' 、- 和 _ 之外的所有字符</span></span><br><span class="line">  getItem: <span class="function"><span class="keyword">function</span> (<span class="params">sKey</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:(?:^|.*;)\\s*"</span> + <span class="built_in">encodeURIComponent</span>(sKey).replace(<span class="regexp">/[\-\.\+\*]/g</span>, <span class="string">"\\$&amp;"</span>) + <span class="string">"\\s*\\=\\s*([^;]*).*$)|^.*$"</span>), <span class="string">"$1"</span>)) || <span class="literal">null</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// docCookies.setItem(name, value, [end], [path], [domain], [secure]), 创建或覆盖一个 cookie</span></span><br><span class="line">  <span class="comment">// end (可选) 最大时间的秒数 (一年为 31536e3， 永不过期的 cookie 为 Infinity) ，或者过期时间的 GMTString 格式或 Date 对象; 如果没有定义则会在会话结束时过期 (number – 有限的或 Infinity – string, Date object or null)。</span></span><br><span class="line">  setItem: <span class="function"><span class="keyword">function</span> (<span class="params">sKey, sValue, vEnd, sPath, sDomain, bSecure</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sKey || <span class="regexp">/^(?:expires|max\-age|path|domain|secure)$/i</span>.test(sKey)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> sExpires = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (vEnd) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (vEnd.constructor) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">Number</span>:</span><br><span class="line">          sExpires = vEnd === <span class="literal">Infinity</span> ? <span class="string">"; expires=Fri, 31 Dec 9999 23:59:59 GMT"</span> : <span class="string">"; max-age="</span> + vEnd;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">String</span>:</span><br><span class="line">          sExpires = <span class="string">"; expires="</span> + vEnd;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">Date</span>:</span><br><span class="line">          sExpires = <span class="string">"; expires="</span> + vEnd.toUTCString();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(sKey) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(sValue) + sExpires + (sDomain ? <span class="string">"; domain="</span> + sDomain : <span class="string">""</span>) + (sPath ?<span class="string">"; path="</span>+ sPath :<span class="string">""</span>) + (bSecure ? <span class="string">"; secure"</span> : <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// docCookies.removeItem(name, [path], domain), 删除一个 cookie</span></span><br><span class="line">  removeItem: <span class="function"><span class="keyword">function</span> (<span class="params">sKey, sPath, sDomain</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!sKey || !<span class="keyword">this</span>.hasItem(sKey)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(sKey) + <span class="string">"=; expires=Thu, 01 Jan 1970 00:00:00 GMT"</span> + ( sDomain ? <span class="string">"; domain="</span> + sDomain : <span class="string">""</span>) + ( sPath ?<span class="string">"; path="</span>+ sPath :<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// docCookies.hasItem(name), 检查一个 cookie 是否存在</span></span><br><span class="line">  hasItem: <span class="function"><span class="keyword">function</span> (<span class="params">sKey</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:^|;\\s*)"</span> + <span class="built_in">encodeURIComponent</span>(sKey).replace(<span class="regexp">/[\-\.\+\*]/g</span>, <span class="string">"\\$&amp;"</span>) + <span class="string">"\\s*\\="</span>)).test(<span class="built_in">document</span>.cookie);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// docCookies.keys(), 返回一个这个路径所有可读的 cookie 的数组</span></span><br><span class="line">  keys: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aKeys = <span class="built_in">document</span>.cookie.replace(<span class="regexp">/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g</span>, <span class="string">""</span>).split(<span class="regexp">/\s*(?:\=[^;]*)?;\s*/</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> nIdx = <span class="number">0</span>; nIdx &lt; aKeys.length; nIdx++) &#123;</span><br><span class="line">      aKeys[nIdx] = <span class="built_in">decodeURIComponent</span>(aKeys[nIdx]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> aKeys;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><p>用法示例：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docCookies.setItem(<span class="string">"test0"</span>, <span class="string">"Hello world!"</span>);</span><br><span class="line">docCookies.setItem(<span class="string">"test3"</span>, <span class="string">"Hello world!"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2027</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="string">"/blog"</span>);</span><br><span class="line">docCookies.setItem(<span class="string">"test5"</span>, <span class="string">"Hello world!"</span>, <span class="string">"Tue, 06 Dec 2022 13:11:07 GMT"</span>, <span class="string">"/home"</span>);</span><br><span class="line">docCookies.setItem(<span class="string">"test6"</span>, <span class="string">"Hello world!"</span>, <span class="number">150</span>);</span><br><span class="line">docCookies.setItem(<span class="string">"test7"</span>, <span class="string">"Hello world!"</span>, <span class="number">245</span>, <span class="string">"/content"</span>);</span><br><span class="line">docCookies.setItem(<span class="string">"test8"</span>, <span class="string">"Hello world!"</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"example.com"</span>);</span><br><span class="line">docCookies.setItem(<span class="string">"test9"</span>, <span class="string">"Hello world!"</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">docCookies.setItem(<span class="string">"test1;="</span>, <span class="string">"Safe character test;="</span>, <span class="literal">Infinity</span>);</span><br></pre></td></tr></table></figure><p></p><h3 id="5-cookie-缺陷"><a href="#5-cookie-缺陷" class="headerlink" title="5. cookie 缺陷"></a>5. cookie 缺陷</h3><ul><li>cookie 会随着每次 HTTP 请求头信息一起发送，无形中增加了网络流量</li><li>cookie 能存储的数据容量有限，根据浏览器类型不同而不同，通常只有 4KB。所有超出该限制的 cookie 都会被截掉并且不会发送至服务器</li><li>每个域名下的 cookie 数量也有限制，根据浏览器类型不同而不同</li></ul><h2 id="HTML5-的-DOM-存储分成两种：SessionStorage-和-LocalStorage"><a href="#HTML5-的-DOM-存储分成两种：SessionStorage-和-LocalStorage" class="headerlink" title="HTML5 的 DOM 存储分成两种：SessionStorage 和 LocalStorage"></a>HTML5 的 DOM 存储分成两种：SessionStorage 和 LocalStorage</h2><p>DOM 存储的机制是通过存储字符串类型的键 / 值对。</p><ul><li>SessionStorage 是一种会话级别的缓存，关闭浏览器会数据会被清除。它的作用域是窗口级别的，也就是说不同窗口间的 sessionStorage 数据不能共享的。</li><li>LocalStorage 是持久化存储，不会自动删除</li></ul><table><thead><tr><th style="text-align:left">属性方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">.length</td><td style="text-align:left">返回 storage 中的键值对个数</td></tr><tr><td style="text-align:left">.key(n)</td><td style="text-align:left">返回 storage 中第 n 个元素对的键值（第一个元素是 0）</td></tr><tr><td style="text-align:left">.getItem(key)</td><td style="text-align:left">返回键值 key 对应的值</td></tr><tr><td style="text-align:left">.key</td><td style="text-align:left">返回键值 key 对应的值</td></tr><tr><td style="text-align:left">.setItem(key, value)</td><td style="text-align:left">添加数据，键值为 key，值为 value</td></tr><tr><td style="text-align:left">.removeItem(key)</td><td style="text-align:left">移除键值为 key 的数据</td></tr><tr><td style="text-align:left">.clear()</td><td style="text-align:left">清除所有数据</td></tr></tbody></table><p>特点：</p><ul><li>Storage 提供几 MB 的空间，根据浏览器类型不同而不同，chrome 为 5MB。</li><li>键值对为文本类型，存储对象时要配合 JSON.stringify() 和 JSON.parse() 使用。</li><li>不同于 cookie，Storage 的访问限制更高一些，只有当前设定 Storage 的域名下才能访问。<br>SessionStorage 是以 tab 为级别的 session，刷新页面可以访问到之前的 sessionStorage，关闭再打开页面，无法访问到之前的 sessionStorage。<br>LocalStorage 两种情况下都可以访问，而且下次再打开浏览器仍可以访问</li><li>低版本浏览器不支持。</li></ul><h2 id="WebSQL-amp-IndexedDB"><a href="#WebSQL-amp-IndexedDB" class="headerlink" title="WebSQL &amp; IndexedDB"></a>WebSQL &amp; IndexedDB</h2><p>websql 的标准，官方已经不打算维护了，转而维护了新的 indexeddb，但是 websql 兼容性好，而且是移动端几乎完全可用。indexeddb 的兼容性没那么好，android4.4 之前以及 ios7 以前都无法直接使用，但可以用 polyfill 脚本做移动端兼容。</p><p><a href="http://caniuse.com/#feat=indexeddb" target="_blank" rel="noopener">各浏览器兼容性</a></p><p>websql 更像是关系型数据库，并且使用 sql 语句进行操作。</p><p>indexeddb 更像是 nosql（非关系型数据库），直接使用 js 的方法操作数据即可。</p><ul><li>也是永久存储</li><li>访问限制性：indexeddb 和 websql 均是在创建数据库的域名下才能访问。而且不能指定访问域名。</li><li>两种存储的方式是没有大小限制的</li></ul><h3 id="WebSQL-三个核心方法："><a href="#WebSQL-三个核心方法：" class="headerlink" title="WebSQL 三个核心方法："></a>WebSQL 三个核心方法：</h3><ul><li>openDatabase：这个方法使用现有的数据库或者新建的数据库创建一个数据库对象</li><li>transaction：控制一个事务，以及基于这种情况执行提交或者回滚</li><li>executeSql：执行实际的 SQL 查询</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var db = openDatabase(&apos; 数据库名称 &apos;, &apos;版本号 &apos;, &apos;描述文本 &apos;, 数据库大小, [创建回调]);</span><br></pre></td></tr></table></figure><p>例子：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = openDatabase(<span class="string">'mydb'</span>, <span class="string">'1.0'</span>, <span class="string">'Test DB'</span>, <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line"><span class="keyword">var</span> msg;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line">db.transaction(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.executeSql(<span class="string">'CREATE TABLE IF NOT EXISTS LOGS (id unique, log)'</span>);</span><br><span class="line">    tx.executeSql(<span class="string">'INSERT INTO LOGS (id, log) VALUES (1,"SmartestEE")'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">db.transaction(<span class="function"><span class="keyword">function</span> (<span class="params">tx</span>) </span>&#123;</span><br><span class="line">    tx.executeSql(<span class="string">'UPDATE LOGS SET log=\'test\'WHERE id=1'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line">db.transaction(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">tx.executeSql(<span class="string">'SELECT * FROM LOGS'</span>, [], (tx, results) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> len = results.rows.length, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        msg = <span class="string">"&lt;p&gt;&lt;b&gt;"</span> + results.rows.item(i).log + <span class="string">"&lt;/b&gt;&lt;/p&gt;"</span>;</span><br><span class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'#status'</span>).innerHTML +=  msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="literal">null</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">db.transaction(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</span><br><span class="line">    tx.executeSql(<span class="string">'DELETE FROM LOGS  WHERE id=1'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p></p><h3 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h3><p>特点：</p><ol><li>键值对储存。内部采用对象空间（object store）存放数据，支持所有 js 类型的数据</li><li>异步。IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的</li><li>支持事务。事务中一步出错整个事务都会回滚</li><li>同域限制。只能自身域名创建的 indexedDB 才可以访问</li><li>储存空间大。单个域名下的数据库超过 50M 的时候浏览器会弹窗向用户请求，不影响之后继续存储。</li><li>支持二进制储存。也就是可以存储图片和文件，<a href="https://hacks.mozilla.org/2012/02/storing-images-and-files-in-indexeddb/" target="_blank" rel="noopener">用 IndexedDB 存储图片和文件</a></li></ol><ul><li><p>判断是否可用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> indexedDB = <span class="built_in">window</span>.indexedDB || <span class="built_in">window</span>.mozIndexedDB || <span class="built_in">window</span>.webkitIndexedDB || <span class="built_in">window</span>.msIndexedDB || <span class="built_in">window</span>.shimIndexedDB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!indexedDB) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'indexedDB 不可用 '</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打开数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> local = indexedDB.open(<span class="string">' 数据库名 '</span>, [版本号]);</span><br><span class="line"><span class="keyword">var</span> db;</span><br><span class="line"></span><br><span class="line">local.onerror = <span class="function">(<span class="params">ect</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 打开错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">local.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 打开成功，定义一个数据库对象</span></span><br><span class="line">  db = evt.target.result;</span><br><span class="line">  <span class="comment">// 也可以 db = local.result</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建和更新数据库版本号<br>要更新数据库的 schema，也就是创建或者删除对象存储空间，需要实现 onupgradeneeded 处理程序，这个处理程序将会作为一个允许你处理对象存储空间的 versionchange 事务的一部分被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">local.onupgradeneeded = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">  db = evt.target.result;</span><br><span class="line">  db.createObjectStore(<span class="string">'objectStore'</span>, &#123; <span class="attr">keyPath</span>: <span class="string">"chatID"</span>&#125;); <span class="comment">// 创建一个对象空间，keyPath 指定唯一的 key，再加上 autoIncrement: true 自动增加 key</span></span><br><span class="line"></span><br><span class="line">  objectStore.createIndex(<span class="string">"name"</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">  <span class="comment">// createIndex 方法创建索引, 配合 index() 方法实用方便查询</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在数据库第一次被打开时或者当指定的版本号高于当前被持久化的数据库的版本号时，这个 versionchange 事务将被创建。版本号是一个 unsigned long long 数字, 不能用浮点数。</p><ul><li>操作数据<br>操作数据前都得定义一个事务，第一个参数数组指定这个事务跨越哪些对象存储空间，第二个参数指定模式（不加默认只读），事务具有三种模式（只读，读写，和版本变更），只读事务可以并发运行 。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">transaction.oncomplete = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当所有的数据都操作完成时执行一些操作</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">transaction.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 错误处理！</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>增</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = db.transaction([<span class="string">"objectStore"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"objectStore"</span>).add(&#123;<span class="attr">chatID</span>: chatID, <span class="attr">messageList</span>: list&#125;);</span><br><span class="line"></span><br><span class="line">request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123; &#125;</span><br><span class="line">request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>删</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> store = db.transaction([<span class="string">"objectStore"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"objectStore"</span>);</span><br><span class="line"><span class="keyword">var</span> request = store.delete(key); <span class="comment">// delete(key) 删除指定数据，store.clear() 清空整个对象空间，db.deleteObjectStore('objectStore') 删除对象空间 (得在 onupgradeneeded 方法中使用)，indexedDB.deleteDatabase(" 数据库名称 ") 删库</span></span><br><span class="line"></span><br><span class="line">request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123; &#125;</span><br></pre></td></tr></table></figure></li><li><p>查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = db.transaction([<span class="string">"objectStore"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"objectStore"</span>).get(key);</span><br><span class="line"></span><br><span class="line">request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 错误处理</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 对 request.result 或者 evt.target.result 做些操作！</span></span><br><span class="line">  <span class="built_in">console</span>.log(request.result);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> store = db.transaction([<span class="string">"objectStore"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"objectStore"</span>);</span><br><span class="line"><span class="keyword">var</span> request = store.get(key);</span><br><span class="line"></span><br><span class="line">request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 错误处理</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 对 request.result 或者 evt.target.result 做些操作！</span></span><br><span class="line">  <span class="keyword">let</span> data = evt.target.result;</span><br><span class="line">  data.messageList = [&#123;<span class="attr">chatID</span>: <span class="string">'123456'</span>, <span class="attr">message</span>: <span class="string">'hello guys'</span>&#125;];</span><br><span class="line">  store.put(data);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>遍历<br>openCursor 方法，它在当前对象仓库里面建立一个读取光标（cursor）。<br>openCursor 方法还可以接受第二个参数，表示遍历方向，默认值为 next，其他可能的值为 prev、nextunique 和 prevunique。后两个值表示如果遇到重复值，会自动跳过。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t = db.transaction([<span class="string">"test"</span>], <span class="string">"readonly"</span>);</span><br><span class="line"><span class="keyword">var</span> store = t.objectStore(<span class="string">"test"</span>);</span><br><span class="line"><span class="keyword">var</span> cursor = store.openCursor();</span><br><span class="line"></span><br><span class="line">cursor.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = e.target.result;</span><br><span class="line">    <span class="keyword">if</span>(res) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Key"</span>, res.key);</span><br><span class="line">        <span class="built_in">console</span>.dir(<span class="string">"Data"</span>, res.value);</span><br><span class="line">        res.continue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>关闭数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.close()</span><br></pre></td></tr></table></figure></li></ul><h2 id="用于一个-react-聊天项目的本地消息记录存储的-IndexedDB-使用示例"><a href="#用于一个-react-聊天项目的本地消息记录存储的-IndexedDB-使用示例" class="headerlink" title="用于一个 react 聊天项目的本地消息记录存储的 IndexedDB 使用示例"></a>用于一个 react 聊天项目的本地消息记录存储的 IndexedDB 使用示例</h2><blockquote><p>封装的函数用法跟 localStorage 的属性方法类似</p></blockquote><p>IndexedDB.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> indexedDB = <span class="built_in">window</span>.indexedDB || <span class="built_in">window</span>.mozIndexedDB || <span class="built_in">window</span>.webkitIndexedDB || <span class="built_in">window</span>.msIndexedDB || <span class="built_in">window</span>.shimIndexedDB;</span><br><span class="line"><span class="keyword">var</span> userID = localStorage.getItem(<span class="string">'userID'</span>), db;</span><br><span class="line"></span><br><span class="line">indexedDB.open(<span class="string">'LocalMessageDataBase'</span>, <span class="number">1</span>).onupgradeneeded = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// console.log('establish database');</span></span><br><span class="line">  db = evt.target.result;</span><br><span class="line">  db.createObjectStore(userID, &#123; <span class="attr">keyPath</span>: <span class="string">"chatID"</span>&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getLocalData</span> (<span class="params">chatID</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> localDB = indexedDB.open(<span class="string">'LocalMessageDataBase'</span>, <span class="number">1</span>), data = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    localDB.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// console.log('open database to getdata');</span></span><br><span class="line">      db = evt.target.result;</span><br><span class="line">      <span class="keyword">if</span> (chatID) &#123;</span><br><span class="line">        <span class="keyword">let</span> request = db.transaction([userID]).objectStore(userID).get(chatID);</span><br><span class="line"></span><br><span class="line">        request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'get error:'</span>, evt);</span><br><span class="line">          reject(evt)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// console.log('get data:', evt.target.result);</span></span><br><span class="line">          data = request.result || [];</span><br><span class="line">          resolve(data)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setLocalData</span> (<span class="params">chatID, list</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> localDB = indexedDB.open(<span class="string">'LocalMessageDataBase'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  localDB.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log('open database to setdata');</span></span><br><span class="line">    db = evt.target.result;</span><br><span class="line">    <span class="keyword">let</span> store = db.transaction([userID], <span class="string">'readwrite'</span>).objectStore(userID);</span><br><span class="line">    <span class="keyword">let</span> request = store.get(chatID);</span><br><span class="line"></span><br><span class="line">    request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123; <span class="keyword">throw</span> evt &#125;;</span><br><span class="line"></span><br><span class="line">    request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> data = evt.target.result;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        <span class="comment">// console.log('update data');</span></span><br><span class="line">        data.messageList = list;</span><br><span class="line">        store.put(data)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log('add data');</span></span><br><span class="line">        store.add(&#123;<span class="attr">chatID</span>: chatID, <span class="attr">messageList</span>: list&#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteLocalData</span> (<span class="params">chatID</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> localDB = indexedDB.open(<span class="string">'LocalMessageDataBase'</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  localDB.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">    db = evt.target.result;</span><br><span class="line">    <span class="keyword">let</span> request = db.transaction([userID], <span class="string">"readwrite"</span>).objectStore(userID).delete(chatID);</span><br><span class="line"></span><br><span class="line">    request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'delete error'</span>, evt)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'delete data'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>调用函数只需引入 IndexedDB.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;getLocalData, setLocalData, deleteLocaldata&#125; = <span class="string">'path/IndexedDB'</span>;</span><br><span class="line"></span><br><span class="line">getLocalData(chatID).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// 获取聊天记录</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setLocalData(chatID, list); <span class="comment">// 存入新的聊天消息记录</span></span><br><span class="line"></span><br><span class="line">deleteLocaldata(chatID); <span class="comment">// 删除指定对象的消息记录</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器本地存储 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>系统 I/O</title>
      <link href="/2017/08-SystemIO.html"/>
      <url>/2017/08-SystemIO.html</url>
      <content type="html"><![CDATA[<p><strong>输入输出（I/O）是主存和外部设备设备（磁盘驱动器、终端、网络等）之间复制数据的过程。</strong></p><a id="more"></a><h2 id="Unix-I-O-是系统底层数据操作"><a href="#Unix-I-O-是系统底层数据操作" class="headerlink" title="Unix I/O 是系统底层数据操作"></a>Unix I/O 是系统底层数据操作</h2><p><img src="/images/io/IO.png" alt="img"></p><p>open() 和 close() 来打开和关闭文件，使用 read() 和 write() 来读写文件，或者利用 lseek() 来设定读取的偏移量</p><ul><li>文件类型：</li></ul><ol><li>普通文件：包含任意数据</li><li>目录：相关一组文件的索引</li><li>套接字 Socket：和另一台机器上的进程通信的类型</li></ol><p>目录包含一个链接 (link) 数组，并且每个目录至少包含两条记录：<br>./ 当前目录<br>../ 上一层目录</p><p>相对路径和绝对路径</p><ul><li><p>打开文件</p><p>open 函数（返回的文件描述符一定是最小的且没有被用过的数值）</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int open(const char *pathname, int flags, mode_t mode)</span><br><span class="line">// flags 用于指定文件的打开 / 创建模式, 第三个参数仅当创建新文件时才使用，用于指定文件的访问权限位（access permission bits）</span><br></pre></td></tr></table></figure><p>flags:<br>O_RDONLY 只读模式<br>O_WRONLY 只写模式<br>O_RDWR 读写模式<br>. . .</p><p>modes:<br>S_IRWXU00700 权限，代表该文件所有者具有可读、可写及可执行的权限。<br>S_IRUSR 或 S_IREAD，00400 权限，代表该文件所有者具有可读取的权限。<br>S_IWUSR 或 S_IWRITE，00200 权限，代表该文件所有者具有可写入的权限。<br>S_IXUSR 或 S_IEXEC，00100 权限，代表该文件所有者具有可执行的权限<br>. . .</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int fd; // 文件描述符</span><br><span class="line">if ((fd = open(&quot;/etc/hosts&quot;, O_RDONLY)) &lt; 0) // 返回值等于 -1 则说明发生了错误</span><br><span class="line">&#123;</span><br><span class="line">    perror(&quot;open&quot;);</span><br><span class="line">    exit(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关闭文件<br>close 函数用于关闭已打开的文件, 关闭一个已关闭的描述符会出错</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int close(int fd)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int fd;     // 文件描述符</span><br><span class="line">int retval; // 返回值</span><br><span class="line">if ((retval = close(fd)) &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    perror(&quot;close&quot;);</span><br><span class="line">    exit(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>读取文件<br>实际上就是把文件中对应的字节复制到内存中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssize_t read(int fd, void *buf, size_t count) // 成功执行时，返回所读取的数据量，如果读到文件的末尾 EOF 则返回 0。失败的时候返回 - 1</span><br></pre></td></tr></table></figure><p>buf: 所要读取到的数据的内存缓冲<br>count：需要读取的数据量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">char buf[512];</span><br><span class="line">int fd;</span><br><span class="line">int nbytes;</span><br><span class="line">// 打开文件描述符，并从中读取 512 字节的数据</span><br><span class="line">if ((nbytes = read(fd, buf, sizeof(buf))) &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    perror(&quot;read&quot;);</span><br><span class="line">    exit(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>写入文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssize_t write(int fd, const void *buf, size_t nbytes) // write 函数将 buf 中的 nbytes 字节内容写入文件描述符 fd. 成功时返回写的字节数. 失败时返回 - 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">char buf[512];</span><br><span class="line">int fd;</span><br><span class="line">int nbytes;</span><br><span class="line">// 打开文件描述符，并向其写入 512 字节的数据</span><br><span class="line">if ((nbytes = write(fd, buf, sizeof(buf)) &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">    perror(&quot;write&quot;);</span><br><span class="line">    exit(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips：x86-64 系统中，size-t 被定义为 unsigned long，而 ssize-t（有符号）被定义为 long，因为函数返回值可能为 - 1</p></blockquote><ul><li>lseek 函数<br>为一个打开的文件设置其偏移量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">off_t lseek(int fd, off_t offset, int whence)</span><br></pre></td></tr></table></figure><p>Offset：偏移量，每一读写操作所需要移动的距离，单位是字节的数量，可正可负（向前，向后）<br>whence: SEEK_SET / SEEK_CUR / SEEK_END (依次为 0，1，2）.<br>　　SEEK_SET 将读写位置指向文件头后再增加 offset 个位移量。<br>　　SEEK_CUR 以目前的读写位置往后增加 offset 个位移量。<br>　　SEEK_END 将读写位置指向文件尾后再增加 offset 个位移量。</p><p>当 whence 值为 SEEK_CUR 或 SEEK_END 时，参数 offet 允许负值的出现</p><p>当调用成功时则返回目前的读写位置，也就是距离文件开头多少个字节。若有错误则返回 - 1，errno 会存放错误代码</p><ul><li>元数据<br>元数据是用来描述数据的结构，由内核维护，可以通过 stat 和 fstat 函数来访问</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int stat(const char *filename, struct stat *buf)</span><br><span class="line">int fstat(int fd, struct stat *buf)</span><br></pre></td></tr></table></figure><p>函数结果是填充一个 stat 结构：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">struct stat</span><br><span class="line">&#123;</span><br><span class="line">    dev_t           st_dev;     // Device</span><br><span class="line">    ino_t           st_ino;     // inode</span><br><span class="line">    mode_t          st_mode;    // Protection &amp; file type</span><br><span class="line">    nlink_t         st_nlink;   // Number of hard links</span><br><span class="line">    uid_t           st_uid;     // User ID of owner</span><br><span class="line">    gid_t           st_gid;     // Group ID of owner</span><br><span class="line">    dev_t           st_rdev;    // Device type (if inode device)</span><br><span class="line">    off_t           st_size;    // Total size, in bytes</span><br><span class="line">    unsigned long   st_blksize; // Blocksize for filesystem I/O</span><br><span class="line">    unsigned long   st_blocks;  // Number of blocks allocated</span><br><span class="line">    time_t          st_atime;   // Time of last access</span><br><span class="line">    time_t          st_mtime;   // Time of last modification</span><br><span class="line">    time_t          st_ctime;   // Time of last change</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">int main (int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    struct stat stat;</span><br><span class="line">    char *type, *readok;</span><br><span class="line"></span><br><span class="line">    Stat(argv[1], &amp;stat);</span><br><span class="line">    if (S_ISREG(stat.st_mode)) // 确定文件类型，S_ISREG(m) 判断普通文件，</span><br><span class="line">        type = &quot;regular&quot;;</span><br><span class="line">    else if (S_ISDIR(stat.st_mode)) // S_ISDIR(m) 判断目录文件</span><br><span class="line">        type = &quot;directory&quot;;</span><br><span class="line">    else // S_ISSOCK(m) 判断网络套接字</span><br><span class="line">        type = &quot;other&quot;;</span><br><span class="line"></span><br><span class="line">    if ((stat.st_mode &amp; S_IRUSR)) // 检查读权限</span><br><span class="line">        readok = &quot;yes&quot;;</span><br><span class="line">    else</span><br><span class="line">        readok = &quot;no&quot;;</span><br><span class="line"></span><br><span class="line">    printf(&quot;type: %s, read: %s\n&quot;, type, readok);</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>读取目录内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">  DIR *streamp;</span><br><span class="line">  struct dirent *dep;</span><br><span class="line">  streamp = Opendir(argv[0]);</span><br><span class="line"></span><br><span class="line">  errno = 0;</span><br><span class="line">  while ((dep = readdir(streamp)) != NULL) &#123;</span><br><span class="line">    printf(&quot; 找到文件：%s\n&quot;, dep -&gt; d_name);</span><br><span class="line">  &#125;</span><br><span class="line">  if (errno != 0)</span><br><span class="line">    unix_error(&quot;readdir 失败 &quot;);</span><br><span class="line">  CloseDir(streamp);</span><br><span class="line">  exit(0)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h2><p>C 标准库中包含一系列高层的标准 IO 函数</p><ul><li>打开和关闭文件: fopen, fclose</li><li>读取和写入字节: fread, fwrite</li><li>读取和写入行: fgets, fputs</li><li>格式化读取和写入: fscanf, fprintf</li></ul><p>Standard C I/O: fopen, fdopen, fread, fwrite, fscanf, fprintf, sscanf, sprintf, fgets, fputs, fflush, fseek, fclose</p><h2 id="Node-js-文件系统-fs-模块"><a href="#Node-js-文件系统-fs-模块" class="headerlink" title="Node.js 文件系统 fs 模块"></a>Node.js 文件系统 fs 模块</h2><p>Node.js 提供一组类似 UNIX（POSIX）标准的文件操作 API。 Node 导入文件系统模块 (fs) 语法如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;)</span><br></pre></td></tr></table></figure><p>Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。<br>异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息 (error)。<br>建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line">// 异步读取</span><br><span class="line">fs.readFile(&apos;./hello.txt&apos;, function (err, data) &#123;</span><br><span class="line">   if (err) &#123;</span><br><span class="line">       return console.error(err);</span><br><span class="line">   &#125;</span><br><span class="line">   console.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 同步读取</span><br><span class="line">var data = fs.readFileSync(&apos;./hello.txt&apos;);</span><br><span class="line">console.log(data.toString());</span><br></pre></td></tr></table></figure><ul><li>打开文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.open(path, flags[, mode], callback(err, fd))</span><br><span class="line">// fd 是返回的文件描述符</span><br></pre></td></tr></table></figure><ul><li>获取文件信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.stat(path, callback(err, stats))</span><br><span class="line">// stats 是 fs.Stats 对象</span><br></pre></td></tr></table></figure><ul><li><p>stats 类</p><p>查询文件信息</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.stat(path, callback(err, stats))</span><br></pre></td></tr></table></figure><p>一个 stats 类对象的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  dev: 16777220,   // 文件或目录所在的设备 I, 该属性值在 UNIX 系统下有效</span><br><span class="line">  mode: 33188,     // 文件或目录的权限标志，采用数值形式表示</span><br><span class="line">  nlink: 1,        // 文件或目录的的硬连接数量</span><br><span class="line">  uid: 501,        // 文件或目录的所有者的用户 ID, 该属性值在 UNIX 系统下有效</span><br><span class="line">  gid: 20,         // 文件或目录的所有者的用户组 ID, 该属性值在 UNIX 系统下有效</span><br><span class="line">  rdev: 0,         // 字符设备文件或块设备文件所在设备 ID, 该属性值在 UNIX 系统下有效</span><br><span class="line">  blksize: 4096,   // 块大小</span><br><span class="line">  ino: 78808297,   // 文件或目录的索引编号, 该属性值仅在 UNIX 系统下有效</span><br><span class="line">  size: 244,       // 文件的字节数</span><br><span class="line">  blocks: 8,       // 块数</span><br><span class="line">  atime: Wed May 27 2015 18:24:43 GMT+0800 (CST),  // 文件或目录的访问时间</span><br><span class="line">  mtime: Wed May 27 2015 18:26:25 GMT+0800 (CST),  // 文件或目录的最后修改时间</span><br><span class="line">  ctime: Wed May 27 2015 18:26:25 GMT+0800 (CST),  // 文件或目录状态的最后修改时间</span><br><span class="line">  birthtime: Mon, 10 Oct 2011 23:24:11 GMT,        // 文件创建时间</span><br><span class="line">  atimeMs: 1318289051000.1,      // 以单位为毫秒保存相对应时间的数字</span><br><span class="line">  mtimeMs: 1318289051000.1,</span><br><span class="line">  ctimeMs: 1318289051000.1,</span><br><span class="line">  birthtimeMs: 1318289051000.1,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stats 类的方法</p><ol><li>stats.isFile() 如果是标准文件，返回 true。是目录、套接字、符号连接、或设备等返回 false</li><li>stats. isDirectory() 如果是目录，返回 true</li><li>stats. isBlockDevice() 如果是块设备，返回 true，大多数情况下类 UNIX 系统的块设备都位于 / dev 目录下</li><li>stats. isCharacterDevice() 如果是字符设备，返回 true</li><li>stats. isSymbolicLink() 如果是符号连接，返回 true。（fs.lstat() 方法返回的 stats 对象才有此方法）</li><li>stats.isFIFO() 如果是 FIFO（FIFO 是 UNIX 中的一种特殊类型的命令管道），返回 true。FIFO 是 UNIX 中的一种特殊类型的命令管道</li><li>stats. isSocket() 如果是 UNIX 套接字（socket），返回 true</li></ol><ul><li>检查文件是否存在</li></ul><ol><li>fs.stat()，如果 stats 对象存在且 stats.isFile() 为 true 才能确认要修改或删除的文件存在</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.stat(&apos;/xxx&apos;, function(err, stat)&#123;</span><br><span class="line">    if(stat&amp;&amp;stat.isFile()) &#123;</span><br><span class="line">console.log(&apos; 文件存在 &apos;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">console.log(&apos; 文件不存在或不是标准文件 &apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>fs.access(), 检查到指定 path 路径的目录或文件的访问权限</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.access(path[, mode], callback(err))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 检查文件是否存在</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.access(&apos;/etc/passwd&apos;, function(err) &#123;</span><br><span class="line">    console.log(err ? &apos;文件存在&apos; : &apos;文件不存在 &apos;);</span><br><span class="line">&#125;);</span><br><span class="line">// 检查是否对文件是否有读写权限</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.access(&apos;/etc/passwd&apos;, fs.R_OK | fs.W_OK, function(err) &#123;</span><br><span class="line">    console.log(err ? &apos;不可操作!&apos; : &apos;可以读 / 写 &apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>fs.F_OK - 文件是对于进程是否可见，可以用来检查文件是否存在。也是 mode 的默认值<br>fs.R_OK - 文件对于进程是否可读<br>fs.W_OK - 文件对于进程是否可写<br>fs.X_OK - 文件对于进程是否可执行。（Windows 系统不可用，执行效果等同 fs.F_OK）</p><ul><li>写入文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeFile(file, data[, options], callback(err))</span><br></pre></td></tr></table></figure><ol><li>fd - 通过 fs.open() 方法返回的文件描述符。</li><li>buffer - 数据写入的缓冲区。</li><li>offset - 缓冲区写入的写入偏移量。</li><li>length - 要从文件中读取的字节数。</li><li>position - 文件读取的起始位置，如果 position 的值为 null，则会从当前文件指针的位置读取。</li><li>callback - 回调函数，有三个参数 err, bytesRead, buffer，err 为错误信息， bytesRead 表示读取的字节数，buffer 为缓冲区对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line">var buf = new Buffer(1024);</span><br><span class="line"></span><br><span class="line">console.log(&quot; 准备打开已存在的文件！&quot;);</span><br><span class="line">fs.open(&apos;input.txt&apos;, &apos;r+&apos;, function(err, fd) &#123;</span><br><span class="line">   if (err) &#123;</span><br><span class="line">       return console.error(err);</span><br><span class="line">   &#125;</span><br><span class="line">   console.log(&quot; 文件打开成功！&quot;);</span><br><span class="line">   console.log(&quot; 准备读取文件：&quot;);</span><br><span class="line">   fs.read(fd, buf, 0, buf.length, 0, function(err, bytes)&#123;</span><br><span class="line">      if (err)&#123;</span><br><span class="line">         console.log(err);</span><br><span class="line">      &#125;</span><br><span class="line">      console.log(bytes + &quot; 字节被读取 &quot;);</span><br><span class="line"></span><br><span class="line">      // 仅输出读取的字节</span><br><span class="line">      if(bytes&gt; 0)&#123;</span><br><span class="line">         console.log(buf.slice(0, bytes).toString());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// fs.write(fd, buffer, offset, length[, position], callback)</span><br></pre></td></tr></table></figure></li></ol><ul><li>关闭文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.close(fd, callback())</span><br></pre></td></tr></table></figure><ul><li>截取文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.ftruncate(fd, len, callback())</span><br></pre></td></tr></table></figure><ul><li>删除文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.unlink(path, callback())</span><br></pre></td></tr></table></figure><ul><li>创建目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.mkdir(path[, mode], callback)</span><br></pre></td></tr></table></figure><ul><li>读取目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.readdir(path, callback(err, files))</span><br><span class="line">// files 为目录下的文件数组列表</span><br></pre></td></tr></table></figure><ul><li>删除目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.rmdir(path, callback())</span><br></pre></td></tr></table></figure><ul><li>检测给定的路径是否存在</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.existsSync(path) // 异步版本已无效</span><br></pre></td></tr></table></figure><ul><li>追加文件内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.appendFile(filename, data[, options], callback(err))</span><br></pre></td></tr></table></figure><h2 id="几条查询目录信息终端命令"><a href="#几条查询目录信息终端命令" class="headerlink" title="几条查询目录信息终端命令"></a>几条查询目录信息终端命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ find 路径 -type f|wc -l // 统计文件数</span><br><span class="line">$ find 路径 -type d|wc -l // 统计目录数</span><br><span class="line"></span><br><span class="line">$ du -sh 路径 // 统计大小</span><br><span class="line">$ df -h /    // 查询磁盘使用量</span><br><span class="line"></span><br><span class="line">$ ls -lR 路径 | grep &quot;^d&quot;|wc -l // 统计目录数</span><br><span class="line">$ ls -lR 路径 | grep &quot;^-&quot;|wc -l // 统计文件数</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> READ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入理解计算机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0611-JS 笔记</title>
      <link href="/2017/06-JSNote3.html"/>
      <url>/2017/06-JSNote3.html</url>
      <content type="html"><![CDATA[<h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><h3 id="使用-this-对象的方法作为回调函数时的问题"><a href="#使用-this-对象的方法作为回调函数时的问题" class="headerlink" title="使用 this 对象的方法作为回调函数时的问题"></a>使用 this 对象的方法作为回调函数时的问题</h3><p>如果回调函数被传递给一个全局函数，this 对象指向全局 window 对象（在浏览器中）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clientData = &#123;</span><br><span class="line">  id: <span class="number">094545</span>,</span><br><span class="line">  fullName: <span class="string">"Not Set"</span>,</span><br><span class="line">  setUserName: <span class="function"><span class="keyword">function</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这指向了对象中的 fullName 属性</span></span><br><span class="line">    <span class="keyword">this</span>.fullName = firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInput</span>(<span class="params">firstName, lastName, callback</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 在这做些什么来确认 firstName/lastName</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 现在存储 names</span></span><br><span class="line">  callback(firstName, lastName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getUserInput(<span class="string">"Wang"</span>, <span class="string">"RiYu"</span>, clientData.setUserName);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clientData.fullName);  <span class="comment">//Not Set</span></span><br><span class="line"><span class="built_in">console</span>.log(fullName); <span class="comment">//Wang RiYu</span></span><br></pre></td></tr></table></figure><p>当 clientData.setUsername 被执行时，this.fullName 并没有设置 clientData 对象中的 fullName 属性。</p><p>相反，它将设置 window 对象中的 fullName 属性，因为 getUserInput 是一个全局函数。</p><p>这是因为全局函数中的 this 对象指向 window 对象。</p><h3 id="修复上面出现的问题"><a href="#修复上面出现的问题" class="headerlink" title="修复上面出现的问题"></a>修复上面出现的问题</h3><p><strong>使用 Call 和 Apply 函数保存 this</strong></p><ul><li><p>call 接收的第一个参数为被用来在函数内部当做 this 的对象，传递给函数的参数被挨个传递（当然使用逗号分开）</p></li><li><p>apply 函数的第一个参数也是在函数内部作为 this 的对象，然而最后一个参数确是传递给函数的值的数组</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInput</span>(<span class="params">firstName, lastName, callback. callbackObj</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 在这里做些什么来确认名字</span></span><br><span class="line"></span><br><span class="line">  callback.apply(callbackObj, [firstName, lastName]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Apply 函数正确设置了 this 对象，我们现在正确的执行了 callback 并在 clientData 对象中正确设置了 fullName 属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们将 clientData.setUserName 方法和 clientData 对象作为参数</span></span><br><span class="line"><span class="comment">//clientData 对象会被 Apply 方法使用来设置 this 对象</span></span><br><span class="line"></span><br><span class="line">getUserName(<span class="string">"Barack"</span>, <span class="string">"Obama"</span>, clientData.setUserName, clientData);</span><br><span class="line"></span><br><span class="line"><span class="comment">//clientData 中的 fullName 属性被正确的设置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clientUser.fullName)</span><br></pre></td></tr></table></figure><hr><h3 id="回调函数特点"><a href="#回调函数特点" class="headerlink" title="回调函数特点"></a>回调函数特点</h3><ul><li>回调函数是一段可执行的代码段，它作为一个参数传递给其他的代码，其作用是在需要的时候方便调用这段（回调函数）代码</li><li>不会立刻执行, 调用 add 时才会执行 print</li><li>回调函数是一个闭包，也就是说它能访问到其外层定义的变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2, callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = num1 + num2;</span><br><span class="line">  callback(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, print);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在执行回调函数前最好确认其是一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2, callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = num1 + num2;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> callback === <span class="string">'function'</span>)&#123;</span><br><span class="line">    callback(sum);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="注意在回调函数调用时-this-的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文"><a href="#注意在回调函数调用时-this-的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文" class="headerlink" title="注意在回调函数调用时 this 的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文"></a>注意在回调函数调用时 this 的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  sum: <span class="number">0</span>,</span><br><span class="line">  add: <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.sum = num1 + num2;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sum)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2, callback</span>)</span>&#123;</span><br><span class="line">  callback(num1, num2);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, obj.add);</span><br><span class="line"><span class="built_in">console</span>.log(obj.sum); <span class="comment">//0</span></span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br></pre></td></tr></table></figure><p>上述代码调用回调函数的时候是在全局环境下，因此 this 指向的是 window，所以 sum 的值是赋值给 windows 的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arg1, arg2, callback</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> rand = <span class="built_in">Math</span>.random();</span><br><span class="line">  <span class="built_in">console</span>.log(rand);</span><br><span class="line">  <span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(rand * (arg2 - arg1) + arg1);</span><br><span class="line">  callback(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">10</span>, <span class="number">20</span>, <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Callback called! Num:"</span> + num);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 结果为 10 和 20 之间的随机数</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> clientData = &#123;</span><br><span class="line">  id: <span class="number">094545</span>,</span><br><span class="line">  fullName: <span class="string">"Not Set"</span>,</span><br><span class="line">  setUserName: <span class="function"><span class="keyword">function</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这指向了对象中的 fullName 属性</span></span><br><span class="line">    <span class="keyword">this</span>.fullName = firstName + <span class="string">" "</span> + lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInput</span>(<span class="params">firstName, lastName, callback</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 在这做些什么来确认 firstName/lastName</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 现在存储 names</span></span><br><span class="line">  callback(firstName, lastName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getUserInput(<span class="string">"Wang"</span>, <span class="string">"RiYu"</span>, clientData.setUserName);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clientData.fullName);  <span class="comment">//Not Set</span></span><br><span class="line"><span class="built_in">console</span>.log(fullName); <span class="comment">// Wang RiYu</span></span><br></pre></td></tr></table></figure><hr><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="闭包作用，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中"><a href="#闭包作用，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中" class="headerlink" title="闭包作用，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中"></a>闭包作用，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>) </span>&#123; counter += <span class="number">1</span>;&#125;</span><br><span class="line">  plus();</span><br><span class="line">  <span class="built_in">console</span>.log(counter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(); <span class="comment">// 1</span></span><br><span class="line">add(); <span class="comment">// 1</span></span><br><span class="line">add(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> counter = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(counter += <span class="number">1</span>); &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">add(); <span class="comment">// 1</span></span><br><span class="line">add(); <span class="comment">// 2</span></span><br><span class="line">add(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc1</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> x++&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = [makeFunc1(<span class="number">0</span>), makeFunc1(<span class="number">1</span>), makeFunc1(<span class="number">2</span>)];</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]()); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">1</span>]()); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">2</span>]()); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc2</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(x++) &#125;</span><br><span class="line">  foo()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = [makeFunc2(<span class="number">0</span>), makeFunc2(<span class="number">1</span>), makeFunc2(<span class="number">2</span>)];</span><br><span class="line">b[<span class="number">0</span>]; <span class="comment">// 0</span></span><br><span class="line">b[<span class="number">1</span>]; <span class="comment">// 1</span></span><br><span class="line">b[<span class="number">2</span>]; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">  nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result=f1();</span><br><span class="line">result(); <span class="comment">// 999</span></span><br><span class="line">nAdd();</span><br><span class="line">result(); <span class="comment">// 1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-----------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">  mAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">  &#125;</span><br><span class="line">  f2()</span><br><span class="line">&#125;</span><br><span class="line">f2(); <span class="comment">// 999</span></span><br><span class="line">mAdd();</span><br><span class="line">f2(); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a *= <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = foo1();</span><br><span class="line">f(); <span class="comment">//return 20.</span></span><br><span class="line">f(); <span class="comment">//return 40.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------------------------*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    a *= <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;;</span><br><span class="line">  f1()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo2(); <span class="comment">//return 20.</span></span><br><span class="line">foo2(); <span class="comment">//return 20.</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0507-JS 笔记</title>
      <link href="/2017/05-JSNote2.html"/>
      <url>/2017/05-JSNote2.html</url>
      <content type="html"><![CDATA[<h2 id="splice-和-slice"><a href="#splice-和-slice" class="headerlink" title="splice 和 slice"></a>splice 和 slice</h2><h3 id="splice-方法通过删除现有元素和-或添加新元素来更改数组的内容"><a href="#splice-方法通过删除现有元素和-或添加新元素来更改数组的内容" class="headerlink" title="splice() 方法通过删除现有元素和 / 或添加新元素来更改数组的内容"></a>splice() 方法通过删除现有元素和 / 或添加新元素来更改数组的内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.splice(start)</span><br><span class="line">array.splice(start, deleteCount) </span><br><span class="line">array.splice(start, deleteCount, item1, item2, ...)</span><br></pre></td></tr></table></figure><ul><li>start<br>指定修改的开始位置（从 0 计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从 1 计数）。</li><li>deleteCount （可选）<br>整数，表示要移除的数组元素的个数。如果 deleteCount 是 0，则不移除元素。这种情况下，至少应添加一个新元素。如果 deleteCount 大于 start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。<br>如果 deleteCount 被省略，则其相当于 (arr.length - start)。</li><li>item1, item2, … （可选）<br>要添加进数组的元素, 从 start 位置开始。如果不指定，则 splice() 将只删除数组元素。</li></ul><h3 id="splice-返回值"><a href="#splice-返回值" class="headerlink" title="splice() 返回值"></a>splice() 返回值</h3><p>由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组</p><blockquote><p>tips：splice() 方法与 slice() 方法的作用是不同的，splice() 方法会直接对数组进行修改</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> removed = array.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">"e"</span>);</span><br><span class="line"><span class="comment">//array --&gt; ["a","b","e","c","d"]</span></span><br><span class="line"><span class="comment">//removed --&gt; []</span></span><br><span class="line"></span><br><span class="line">removed = array.splice(<span class="number">3</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//array --&gt; ["a","b","e","d"]</span></span><br><span class="line"><span class="comment">//removed --&gt; ["c"]</span></span><br><span class="line"></span><br><span class="line">removed = array.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"f"</span>);</span><br><span class="line"><span class="comment">//array --&gt; ["a","b","f","d"]</span></span><br><span class="line"><span class="comment">//removed --&gt; ["e"]</span></span><br></pre></td></tr></table></figure><hr><h3 id="slice-方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象-不改变原数组"><a href="#slice-方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象-不改变原数组" class="headerlink" title="slice() 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象, 不改变原数组"></a>slice() 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象, 不改变原数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.slice()</span><br><span class="line">array.slice(begin)</span><br><span class="line">array.slice(begin,end)</span><br></pre></td></tr></table></figure><ul><li>begin （可选）<br>从该索引处开始提取原数组中的元素（从 0 开始）。<br>如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2) 表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。<br>如果省略 begin，则 slice 从索引 0 开始。</li><li>end （可选）<br>在该索引处结束提取原数组元素（从 0 开始）。slice 会提取原数组中索引从 begin 到 end 的所有元素（包含 begin，但不包含 end）。<br>slice(1,4) 提取原数组中的第二个元素开始直到第四个元素的所有元素 （索引为 1, 2, 3 的元素）。<br>如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1) 表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。<br>如果 end 被省略，则 slice 会一直提取到原数组末尾。<br>如果 end 大于数组长度，slice 也会一直提取到原数组末尾。</li></ul><h3 id="slice-返回值"><a href="#slice-返回值" class="headerlink" title="slice() 返回值"></a>slice() 返回值</h3><p>array 下标 <strong>begin &lt;= copy &lt; end</strong> 的数组拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sliced = array.slice(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//array --&gt; ["a","b","c","d"]</span></span><br><span class="line"><span class="comment">//sliced --&gt; ["b","c"]</span></span><br></pre></td></tr></table></figure><h2 id="调用-Object-属性"><a href="#调用-Object-属性" class="headerlink" title="调用 Object 属性"></a>调用 Object 属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">    name0: <span class="string">"abc"</span>,</span><br><span class="line">    name1: <span class="number">123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">object.name0 <span class="comment">// 等同于 object["name0"], 输出 "abc"</span></span><br></pre></td></tr></table></figure><h2 id="创建函数的几种方法"><a href="#创建函数的几种方法" class="headerlink" title="创建函数的几种方法"></a>创建函数的几种方法</h2><h3 id="三种基础方法"><a href="#三种基础方法" class="headerlink" title="三种基础方法"></a>三种基础方法</h3><ul><li>function foo(arg) { statements }</li><li>var foo = function(arg) { statements }</li><li>var foo = new Function(“a”,”b”,”console.log(a+b)”) // 等同于 function foo(a,b){ console.log(a+b); }</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// --&gt; 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面的代码可以简写成下面这个</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;)() <span class="comment">// --&gt; 123</span></span><br></pre></td></tr></table></figure><h3 id="ES6-引入箭头函数"><a href="#ES6-引入箭头函数" class="headerlink" title="ES6 引入箭头函数"></a>ES6 引入箭头函数</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">MDN 箭头函数语法</a></p><p><a href="https://www.kancloud.cn/kancloud/es6-in-depth/47781" target="_blank" rel="noopener">深入浅出 ES6 箭头函数</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x =&gt; <span class="built_in">console</span>.log(x*x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于下面这个方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x*x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x*x);</span><br><span class="line">foo(<span class="number">5</span>) <span class="comment">// --&gt; 25</span></span><br></pre></td></tr></table></figure><p>参数只有一个可以省略括号，其他情况如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个参数:</span></span><br><span class="line">(x, y) =&gt; x * x + y * y</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无参数:</span></span><br><span class="line">() =&gt; <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变参数:</span></span><br><span class="line">(x, y, ...rest) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> i, sum = x + y;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;rest.length; i++) &#123;</span><br><span class="line">        sum += rest[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="箭头函数改变了-this-指向"><a href="#箭头函数改变了-this-指向" class="headerlink" title="箭头函数改变了 this 指向"></a>箭头函数改变了 this 指向</h4><p>原有函数写法与箭头函数写法下的 this 指向:</p><p><img src="/images/javaScript/this.png" alt="image"></p><p>箭头函数内部的 this 是词法作用域，由上下文确定。</p><p>由于 JavaScript 函数对 this 绑定的错误处理，下面的例子无法得到预期结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    birth: <span class="number">1990</span>,</span><br><span class="line">    getAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="keyword">this</span>.birth; <span class="comment">// 1990</span></span><br><span class="line">        <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="keyword">this</span>.birth; <span class="comment">// this 指向 window 或 undefined</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> fn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.getAge(); <span class="comment">// --&gt; NaN</span></span><br></pre></td></tr></table></figure><p>箭头函数完全修复了 this 的指向，this 总是指向词法作用域，也就是外层调用者 obj</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    birth: <span class="number">1990</span>,</span><br><span class="line">    getAge: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="keyword">this</span>.birth; <span class="comment">// 1990</span></span><br><span class="line">        <span class="keyword">var</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="keyword">this</span>.birth; <span class="comment">// this 指向 obj 对象</span></span><br><span class="line">        <span class="keyword">return</span> fn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.getAge(); <span class="comment">// 27</span></span><br></pre></td></tr></table></figure><p>如果使用箭头函数，以前的那种 hack 写法：<br>var that = this;<br>就不再需要了。</p><p>由于 this 在箭头函数中已经按照词法作用域绑定了，所以，用 call() 或者 apply() 调用箭头函数时，无法对 this 进行绑定，即传入的第一个参数被忽略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    birth: <span class="number">1990</span>,</span><br><span class="line">    getAge: <span class="function"><span class="keyword">function</span> (<span class="params">year</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="keyword">this</span>.birth; <span class="comment">// 1990</span></span><br><span class="line">        <span class="keyword">var</span> fn = <span class="function">(<span class="params">y</span>) =&gt;</span> y - <span class="keyword">this</span>.birth; <span class="comment">// this.birth 仍是 1990</span></span><br><span class="line">        <span class="keyword">return</span> fn.call(&#123;<span class="attr">birth</span>:<span class="number">2000</span>&#125;, year);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.getAge(<span class="number">2017</span>); <span class="comment">// 27</span></span><br></pre></td></tr></table></figure><h2 id="Javascript-闭包（Closure）"><a href="#Javascript-闭包（Closure）" class="headerlink" title="Javascript 闭包（Closure）"></a>Javascript 闭包（Closure）</h2><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>变量的作用域无非就两种：全局变量和局部变量。</p><p>Javascript 函数内部可以直接读取全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">foo() <span class="comment">// --&gt; 123</span></span><br></pre></td></tr></table></figure><p>在函数外部无法读取函数内的局部变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a=<span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure><p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用 var 命令。如果不用的话，你实际上声明了一个全局变量！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  a=<span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// --&gt; 123</span></span><br></pre></td></tr></table></figure><h3 id="如何从外部读取局部变量？"><a href="#如何从外部读取局部变量？" class="headerlink" title="如何从外部读取局部变量？"></a>如何从外部读取局部变量？</h3><p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。</p><p>那就是在函数的内部，再定义一个函数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　<span class="keyword">var</span> n=<span class="number">123</span>;</span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="built_in">console</span>.log(n); <span class="comment">// --&gt; 123</span></span><br><span class="line">　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，函数 f2 就被包括在函数 f1 内部，这时 f1 内部的所有局部变量，对 f2 都是可见的。但是反过来就不行，f2 内部的局部变量，对 f1 就是不可见的。这就是 Javascript 语言特有的 “ 链式作用域 “ 结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p><p>既然 f2 可以读取 f1 中的局部变量，那么只要把 f2 作为返回值，我们不就可以在 f1 外部读取它的内部变量了吗！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　<span class="keyword">var</span> n=<span class="number">123</span>;</span><br><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　<span class="built_in">console</span>.log(n); </span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result=f1();</span><br><span class="line">result(); <span class="comment">// --&gt; 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> n=<span class="number">123</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x=<span class="number">456</span>;</span><br><span class="line"><span class="keyword">var</span> result=f1()(x);</span><br></pre></td></tr></table></figure><h3 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h3><p>上一节代码中的 f2 函数，就是闭包。</p><p>简单理解闭包就是能够读取其他函数内部变量的函数。</p><p>由于在 Javascript 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成 “ 定义在一个函数内部的函数 “。</p><p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><h3 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h3><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">　　　　nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="built_in">console</span>.log(n);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　<span class="keyword">return</span> f2;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">var</span> result=f1();</span><br><span class="line">　　result(); <span class="comment">// 999</span></span><br><span class="line">　　nAdd();</span><br><span class="line">　　result(); <span class="comment">// 1000</span></span><br></pre></td></tr></table></figure><p>在这段代码中，result 实际上就是闭包 f2 函数。它一共运行了两次，第一次的值是 999，第二次的值是 1000。这证明了，函数 f1 中的局部变量 n 一直保存在内存中，并没有在 f1 调用后被自动清除。</p><p>为什么会这样呢？原因就在于 f1 是 f2 的父函数，而 f2 被赋给了一个全局变量，这导致 f2 始终在内存中，而 f2 的存在依赖于 f1，因此 f1 也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p><p>这段代码中另一个值得注意的地方，就是 “nAdd=function(){n+=1}” 这一行，首先在 nAdd 前面没有使用 var 关键字，因此 nAdd 是一个全局变量，而不是局部变量。其次，nAdd 的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以 nAdd 相当于是一个 setter，可以在函数外部对函数内部的局部变量进行操作。</p><h3 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h3><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0423-JS 笔记</title>
      <link href="/2017/04-JSNote1.html"/>
      <url>/2017/04-JSNote1.html</url>
      <content type="html"><![CDATA[<h2 id="一、var、let、const-区别与联系"><a href="#一、var、let、const-区别与联系" class="headerlink" title="一、var、let、const 区别与联系"></a>一、var、let、const 区别与联系</h2><h3 id="JavaScript-是弱类型语言，var-可以定义各种数据类型和对象"><a href="#JavaScript-是弱类型语言，var-可以定义各种数据类型和对象" class="headerlink" title="JavaScript 是弱类型语言，var 可以定义各种数据类型和对象"></a>JavaScript 是弱类型语言，var 可以定义各种数据类型和对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> x = &#123; <span class="attr">name0</span> : value0,<span class="attr">name1</span> : value1 &#125;;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"abc"</span>, <span class="number">123</span>, <span class="literal">true</span>); <span class="comment">// var x = ["abc",123,true]</span></span><br><span class="line"><span class="keyword">var</span> y; <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="literal">null</span>; <span class="comment">//null</span></span><br></pre></td></tr></table></figure><h3 id="var-可以重复声明并赋值同一变量，后者覆盖前者-但-let-声明的变量在同一块级作用域中不能重复"><a href="#var-可以重复声明并赋值同一变量，后者覆盖前者-但-let-声明的变量在同一块级作用域中不能重复" class="headerlink" title="var 可以重复声明并赋值同一变量，后者覆盖前者; 但 let 声明的变量在同一块级作用域中不能重复"></a>var 可以重复声明并赋值同一变量，后者覆盖前者; 但 let 声明的变量在同一块级作用域中不能重复</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>; <span class="comment">//var 作用域是全局的或者函数级的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">1</span>; <span class="comment">//let 作用域是块级的&#123;&#125;内</span></span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 0</span></span><br><span class="line">foo() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="循环体中，第一个例子循环本身及三次-timeout-回调均共享唯一的变量-i-。当循环结束执行时，i-的值变为-3，当第一个-timeout-执行时，调用的-i-值为-3-；第二个人例子每次循环-let-声明的-i-均不一样，输出自然不一样。而的第二个才是我们想要的结果，所以循环体条件中很多情况用-let-更好"><a href="#循环体中，第一个例子循环本身及三次-timeout-回调均共享唯一的变量-i-。当循环结束执行时，i-的值变为-3，当第一个-timeout-执行时，调用的-i-值为-3-；第二个人例子每次循环-let-声明的-i-均不一样，输出自然不一样。而的第二个才是我们想要的结果，所以循环体条件中很多情况用-let-更好" class="headerlink" title="循环体中，第一个例子循环本身及三次 timeout 回调均共享唯一的变量 i 。当循环结束执行时，i 的值变为 3，当第一个 timeout 执行时，调用的 i 值为 3 ；第二个人例子每次循环 let 声明的 i 均不一样，输出自然不一样。而的第二个才是我们想要的结果，所以循环体条件中很多情况用 let 更好"></a>循环体中，第一个例子循环本身及三次 timeout 回调均共享唯一的变量 i 。当循环结束执行时，i 的值变为 3，当第一个 timeout 执行时，调用的 i 值为 3 ；第二个人例子每次循环 let 声明的 i 均不一样，输出自然不一样。而的第二个才是我们想要的结果，所以循环体条件中很多情况用 let 更好</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125; <span class="comment">// 输出 3 个 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i)</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125; <span class="comment">// 输出 0，1，2</span></span><br></pre></td></tr></table></figure><h3 id="let-是更完美的-var"><a href="#let-是更完美的-var" class="headerlink" title="let 是更完美的 var"></a>let 是更完美的 var</h3><ul><li>let 声明的变量拥有块级作用域</li><li>let 声明的全局变量不是全局对象的属性</li><li>形如 for (let i…) 的循环在每次迭代时都为 i 创建新的绑定</li><li>用 let 重定义变量会抛出一个语法错误（SyntaxError）</li></ul><h3 id="const-是-ES6-引入的新的声明类关键词，用来定义常量，不可改变常量的值"><a href="#const-是-ES6-引入的新的声明类关键词，用来定义常量，不可改变常量的值" class="headerlink" title="const 是 ES6 引入的新的声明类关键词，用来定义常量，不可改变常量的值"></a>const 是 ES6 引入的新的声明类关键词，用来定义常量，不可改变常量的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX_CAT_SIZE_KG = <span class="number">3000</span>; <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line">MAX_CAT_SIZE_KG = <span class="number">5000</span>; <span class="comment">// 语法错误（SyntaxError）</span></span><br><span class="line">MAX_CAT_SIZE_KG++; <span class="comment">// 仍然会导致语法错误</span></span><br></pre></td></tr></table></figure><h2 id="二、循环"><a href="#二、循环" class="headerlink" title="二、循环"></a>二、循环</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for 循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(i);</span><br><span class="line">   <span class="comment">// more statements</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//while 循环</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">  n++;</span><br><span class="line">  x += n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do-while 循环</span></span><br></pre></td></tr></table></figure><h3 id="for…in-语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。"><a href="#for…in-语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。" class="headerlink" title="for…in 语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。"></a>for…in 语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"obj."</span> + prop + <span class="string">" = "</span> + obj[prop]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//obj.a = 1</span></span><br><span class="line"><span class="comment">//obj.b = 2</span></span><br><span class="line"><span class="comment">//obj.c = 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//a</span></span><br><span class="line"><span class="comment">//b</span></span><br><span class="line"><span class="comment">//c</span></span><br></pre></td></tr></table></figure><h3 id="for…of-语句在可迭代对象-包括-Array-Map-Set-String-TypedArray，arguments-对象等等-上创建一个迭代循环，对每个不同属性的属性值-调用一个自定义的有执行语句的迭代挂钩"><a href="#for…of-语句在可迭代对象-包括-Array-Map-Set-String-TypedArray，arguments-对象等等-上创建一个迭代循环，对每个不同属性的属性值-调用一个自定义的有执行语句的迭代挂钩" class="headerlink" title="for…of 语句在可迭代对象 (包括 Array, Map, Set, String, TypedArray，arguments 对象等等) 上创建一个迭代循环，对每个不同属性的属性值, 调用一个自定义的有执行语句的迭代挂钩."></a>for…of 语句在可迭代对象 (包括 Array, Map, Set, String, TypedArray，arguments 对象等等) 上创建一个迭代循环，对每个不同属性的属性值, 调用一个自定义的有执行语句的迭代挂钩.</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历 Array:</span></span><br><span class="line"><span class="keyword">let</span> iterable = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 20</span></span><br><span class="line"><span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 String:</span></span><br><span class="line"><span class="keyword">let</span> iterable = <span class="string">"boo"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "b"</span></span><br><span class="line"><span class="comment">// "o"</span></span><br><span class="line"><span class="comment">// "o"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 TypedArray:</span></span><br><span class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0x00</span>, <span class="number">0xff</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 255</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 Map:</span></span><br><span class="line"><span class="comment">// Map 对象就是简单的键 / 值映射。其中键和值可以是任意值 (对象或者原始值)，键值不能重复</span></span><br><span class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">"a"</span>, <span class="number">1</span>], [<span class="string">"b"</span>, <span class="number">2</span>], [<span class="string">"c"</span>, <span class="number">3</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(entry);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [a, 1]</span></span><br><span class="line"><span class="comment">// [b, 2]</span></span><br><span class="line"><span class="comment">// [c, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 Set:</span></span><br><span class="line"><span class="comment">// 集合（Set）对象允许你存储任意类型的唯一值（不能重复），无论它是原始值或者是对象引用</span></span><br><span class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历 DOM 集合...</span></span><br><span class="line"><span class="comment">// 遍历生成器...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历另外的可遍历对象:</span></span><br><span class="line"><span class="comment">// 您也可以遍历一个已经明确的可遍历（可迭代）协议。</span></span><br><span class="line"><span class="comment">// ES6 语法中 Symbol 是一种特殊的、不可变的数据类型，可以作为对象属性的标识符使用。Symbol 对象是一个 symbol primitive data type 的隐式对象包装器。</span></span><br><span class="line"><span class="keyword">var</span> iterable = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      i: <span class="number">0</span>,</span><br><span class="line">      next() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="keyword">this</span>.i++, <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="for…of-与-for…in-的区别"><a href="#for…of-与-for…in-的区别" class="headerlink" title="for…of 与 for…in 的区别"></a>for…of 与 for…in 的区别</h3><ul><li>for…in 循环会遍历一个 object 所有的可枚举属性。</li><li>for…of 语法是为各种 collection 对象专门定制的，并不适用于所有的 object. 它会以这种方式迭代出任何拥有 [Symbol.iterator] 属性的 collection 对象的每个元素。</li></ul><p>下面的例子演示了 for…of 循环和 for…in 循环的区别。for…in 遍历（当前对象及其原型上的）每一个属性名称, 而 for…of 遍历（当前对象上的）每一个属性值:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.objCustom = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;; </span><br><span class="line"><span class="built_in">Array</span>.prototype.arrCustom = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterable = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</span><br><span class="line">iterable.foo = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// logs 0, 1, 2, "foo", "arrCustom", "objCustom"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// logs 3, 5, 7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">Array 对象 -MDN</a></p><h3 id="遍历数组："><a href="#遍历数组：" class="headerlink" title="遍历数组："></a>遍历数组：</h3><p><strong>普通方法遍历</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for 循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; myArray.length; index++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(myArray[index]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for-of 循环</span></span><br><span class="line"><span class="comment">// 与 forEach() 不同的是，它可以正确响应 break、continue 和 return 语句</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> myArray) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>forEach 遍历</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">对数组的遍历，参数是一个回调函数</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">x, i</span>) </span>&#123; <span class="built_in">console</span>.log(i+<span class="string">'.'</span>+x) &#125;) <span class="comment">//x：数组中遍历到的每一个元素，i：相对应的下标</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 0.a</span></span><br><span class="line"><span class="comment">// 1.b</span></span><br><span class="line"><span class="comment">// 2.c</span></span><br></pre></td></tr></table></figure><p><strong>map 遍历</strong></p><p>对数组的遍历，参数是一个回调函数，与 forEach 不同的是，map 函数返回一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x, i</span>) </span>&#123; <span class="keyword">return</span> i+<span class="string">'.'</span>+x &#125;) <span class="comment">//x：数组中遍历到的每一个元素，i：相对应的下标</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// [ '0.a', '1.b', '2.c' ]</span></span><br></pre></td></tr></table></figure><p><strong>every 遍历</strong></p><p>检查数组里的每一个元素的类型，参数是一个回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>].every(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">'string'</span> &#125;) <span class="comment">//x：数组中遍历到的每一个元素</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>,<span class="number">123</span>].every(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">'string'</span> &#125;)</span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="四、浮点型"><a href="#四、浮点型" class="headerlink" title="四、浮点型"></a>四、浮点型</h2><p>IEEE 754<br>JavaScript 中的浮点数采用 IEEE-754 格式的规定。更具体的说是一个双精度格式，这意味着每个浮点数占 64 位。虽然它不是二进制表示浮点数的唯一途径，但它是目前最广泛使用的格式。该格式用 64 位二进制表示像下面这样：<br><img src="http://yanhaijing.com/blog/75.png" alt="image"><br>你可能注意到机器表示的方法和约定俗成的书面表示一点不同。在 64 位中，1 位用于标志位——用来表示一个数是正数还是负数。11 位用于指数–这允许指数最大到 1024。剩下的 52 位代表的尾数。如果你曾经好奇为什么 JavaScript 中的某些东西如 +0 和 -0，标志位说明一切——JavaScript 中的所有数字都有符号位。Infinity 和 NaN 也被编码进浮点数——2047 作为一个特殊的指数。如果尾数是 0，它是一个正无穷或负无限。如果不是，那么它是 NaN。</p><p><a href="https://www.cnblogs.com/snandy/p/4943138.html" target="_blank" rel="noopener">JS 数字精度丢失的一些典型问题</a></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * floatTool 包含加减乘除四个方法，能确保浮点数运算不丢失精度</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 我们知道计算机编程语言里浮点数计算会存在精度丢失问题（或称舍入误差），其根本原因是二进制和实现位数限制有些数无法有限表示</span></span><br><span class="line"><span class="comment"> * 以下是十进制小数对应的二进制表示</span></span><br><span class="line"><span class="comment"> *      0.1 &gt;&gt; 0.0001 1001 1001 1001…（1001 无限循环）</span></span><br><span class="line"><span class="comment"> *      0.2 &gt;&gt; 0.0011 0011 0011 0011…（0011 无限循环）</span></span><br><span class="line"><span class="comment"> * 计算机里每种数据类型的存储是一个有限宽度，比如 JavaScript 使用 64 位存储数字类型，因此超出的会舍去。舍去的部分就是精度丢失的部分。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ** method **</span></span><br><span class="line"><span class="comment"> *  add / subtract / multiply /divide</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ** explame **</span></span><br><span class="line"><span class="comment"> *  0.1 + 0.2 == 0.30000000000000004 （多了 0.00000000000004）</span></span><br><span class="line"><span class="comment"> *  0.2 + 0.4 == 0.6000000000000001  （多了 0.0000000000001）</span></span><br><span class="line"><span class="comment"> *  19.9 * 100 == 1989.9999999999998 （少了 0.0000000000002）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * floatObj.add(0.1, 0.2) &gt;&gt; 0.3</span></span><br><span class="line"><span class="comment"> * floatObj.multiply(19.9, 100) &gt;&gt; 1990</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> floatTool = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 判断 obj 是否为一个整数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isInteger</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor(obj) === obj</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 将一个浮点数转成整数，返回整数和倍数。如 3.14 &gt;&gt; 314，倍数是 100</span></span><br><span class="line"><span class="comment">     * @param floatNum &#123;number&#125; 小数</span></span><br><span class="line"><span class="comment">     * @return &#123;object&#125;</span></span><br><span class="line"><span class="comment">     *   &#123;times:100, num: 314&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toInteger</span>(<span class="params">floatNum</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = &#123;<span class="attr">times</span>: <span class="number">1</span>, <span class="attr">num</span>: <span class="number">0</span>&#125;</span><br><span class="line">        <span class="keyword">if</span> (isInteger(floatNum)) &#123;</span><br><span class="line">            ret.num = floatNum</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> strfi  = floatNum + <span class="string">''</span></span><br><span class="line">        <span class="keyword">var</span> dotPos = strfi.indexOf(<span class="string">'.'</span>)</span><br><span class="line">        <span class="keyword">var</span> len    = strfi.substr(dotPos+<span class="number">1</span>).length</span><br><span class="line">        <span class="keyword">var</span> times  = <span class="built_in">Math</span>.pow(<span class="number">10</span>, len)</span><br><span class="line">        <span class="keyword">var</span> intNum = <span class="built_in">parseInt</span>(floatNum * times + <span class="number">0.5</span>, <span class="number">10</span>)</span><br><span class="line">        ret.times  = times</span><br><span class="line">        ret.num    = intNum</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 核心方法，实现加减乘除运算，确保不丢失精度</span></span><br><span class="line"><span class="comment">     * 思路：把小数放大为整数（乘），进行算术运算，再缩小为小数（除）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param a &#123;number&#125; 运算数 1</span></span><br><span class="line"><span class="comment">     * @param b &#123;number&#125; 运算数 2</span></span><br><span class="line"><span class="comment">     * @param digits &#123;number&#125; 精度，保留的小数点数，比如 2, 即保留为两位小数</span></span><br><span class="line"><span class="comment">     * @param op &#123;string&#125; 运算类型，有加减乘除（add/subtract/multiply/divide）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params">a, b, op</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> o1 = toInteger(a)</span><br><span class="line">        <span class="keyword">var</span> o2 = toInteger(b)</span><br><span class="line">        <span class="keyword">var</span> n1 = o1.num</span><br><span class="line">        <span class="keyword">var</span> n2 = o2.num</span><br><span class="line">        <span class="keyword">var</span> t1 = o1.times</span><br><span class="line">        <span class="keyword">var</span> t2 = o2.times</span><br><span class="line">        <span class="keyword">var</span> max = t1 &gt; t2 ? t1 : t2</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'add'</span>:</span><br><span class="line">                <span class="keyword">if</span> (t1 === t2) &#123; <span class="comment">// 两个小数位数相同</span></span><br><span class="line">                    result = n1 + n2</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t1 &gt; t2) &#123; <span class="comment">// o1 小数位 大于 o2</span></span><br><span class="line">                    result = n1 + n2 * (t1 / t2)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// o1 小数位 小于 o2</span></span><br><span class="line">                    result = n1 * (t2 / t1) + n2</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result / max</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'subtract'</span>:</span><br><span class="line">                <span class="keyword">if</span> (t1 === t2) &#123;</span><br><span class="line">                    result = n1 - n2</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t1 &gt; t2) &#123;</span><br><span class="line">                    result = n1 - n2 * (t1 / t2)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result = n1 * (t2 / t1) - n2</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result / max</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'multiply'</span>:</span><br><span class="line">                result = (n1 * n2) / (t1 * t2)</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'divide'</span>:</span><br><span class="line">                <span class="keyword">return</span> result = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> r1 = n1 / n2</span><br><span class="line">                    <span class="keyword">var</span> r2 = t2 / t1</span><br><span class="line">                    <span class="keyword">return</span> operation(r1, r2, <span class="string">'multiply'</span>)</span><br><span class="line">                &#125;()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 加减乘除的四个接口</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> operation(a, b, <span class="string">'add'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">subtract</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> operation(a, b, <span class="string">'subtract'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> operation(a, b, <span class="string">'multiply'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> operation(a, b, <span class="string">'divide'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// exports</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        add: add,</span><br><span class="line">        subtract: subtract,</span><br><span class="line">        multiply: multiply,</span><br><span class="line">        divide: divide</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
