<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Mac快速入门操作指南]]></title>
      <url>/2017/MacSkills.html</url>
      <content type="html"><![CDATA[<!-- build time:Tue Oct 31 2017 14:16:07 GMT+0800 (CST) --><blockquote><p>OS X测试版本Mac Sierra 10.12.4，测试机型Mac Air</p></blockquote><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>键盘符号说明<br><img alt="image" src="/images/mac/mac_keyboard.jpg" width="650px" height="900px"></p><p>系统设置<code>system preferences &gt; keyboard &gt; shortcuts</code>下有很多自定义快捷键设置，每个人都可以根据自己的喜好修改，熟悉以下的操作将会大大提高生产力，提升效率</p><h3 id="修改输入法切换的快捷方式"><a href="#修改输入法切换的快捷方式" class="headerlink" title="修改输入法切换的快捷方式"></a>修改输入法切换的快捷方式</h3><p>依次打开系统设置<code>system preferences &gt; keyboard &gt; shortcuts &gt; input sources</code>，然后勾选其中的select next source in input menu选项，然后输入你想要的快捷键组合，这就是输入法切换快捷键了。我的是<code>option + space</code>切换输入法，cmd + space用来打开Alfred。</p><h3 id="关闭spotlight"><a href="#关闭spotlight" class="headerlink" title="关闭spotlight"></a>关闭spotlight</h3><p>推荐用Alfred代替自带的spotlight应用，所以可以把spotlight关掉然后把cmd + space快捷键设置成Alfred<br>进入<code>system preferences &gt; keyboard &gt; shortcuts &gt; spotlight</code>取消spotlight选项</p><h3 id="删除字符的快捷方式"><a href="#删除字符的快捷方式" class="headerlink" title="删除字符的快捷方式"></a>删除字符的快捷方式</h3><p>这个和windows有点不同，windows中是用backspace键来删除光标左侧字符，用delete键来删除光标右侧字符。而在Mac中，是用delete键来删除光标左侧字符。如果要删除光标右侧字符的话，则需要使用fn + delete。在Mac中，可以使用command + delete来删除光标左侧的整行文字。</p><h3 id="光标和翻页的快捷方式"><a href="#光标和翻页的快捷方式" class="headerlink" title="光标和翻页的快捷方式"></a>光标和翻页的快捷方式</h3><p>以下快捷键加上 Shift 键可以选中文字：</p><ul><li>command + 下箭头，可以快速定位到一篇文章的末尾</li><li>command + 上箭头，可以快速定位到一篇文章的开头</li><li>command + 左箭头（也可以Control + A或者Option + 上箭头），可以快速定位到一行的行首</li><li>command + 右箭头（也可以Control + E或者Option + 下箭头），可以快速定位到一行的行末</li><li>Option + 左箭头，跳到当前单词的开头</li><li>Option + 右箭头，跳到当前单词的末尾</li><li>Control + N，跳至下一行</li><li>Control + P，跳至上一行</li></ul><h3 id="程序相关的快捷键"><a href="#程序相关的快捷键" class="headerlink" title="程序相关的快捷键"></a>程序相关的快捷键</h3><ul><li>command + q，快速退出程序进程</li><li>command + w，关闭当前页面，相当于按窗口左上角的红色叉，但是该程序的进程并没有退出</li><li>command + tab，可以在当前打开进程的程序中进行切换</li><li>command + h，可以隐藏当前的应用程序</li><li>command + 逗号， 可以打开当前应用程序的偏好设置</li></ul><h3 id="强制退出的快捷键"><a href="#强制退出的快捷键" class="headerlink" title="强制退出的快捷键"></a>强制退出的快捷键</h3><p>如果Mac中的某个程序运行出现异常，需要强制退出，可以按下的快捷键option + command + esc，这时系统会弹出一个force quit application的窗口，选中需要强制退出的程序，点击force quit键即可。也可以在Dock栏右键要关闭的程序，再长按option键会出现<code>force quit</code>和<code>hide others</code>选项</p><h3 id="窗口相关的快捷键"><a href="#窗口相关的快捷键" class="headerlink" title="窗口相关的快捷键"></a>窗口相关的快捷键</h3><ul><li>command + n，建立一个新窗口</li><li>command + `(反引号，数字1旁边)，在打开的程序窗口之间进行切换</li><li>command + m，可以最小化当前窗口</li><li>command + t，建立一个新签标</li><li>control + 左右方向键（←→）切换桌面</li><li>option + cmd + 左右方向键（←→）在浏览器中切换标签</li><li>control + ↑：mission control</li><li>control + ↓：application control</li><li>F11：显示桌面，mac air要fn + F11</li></ul><h3 id="截图相关的快捷键"><a href="#截图相关的快捷键" class="headerlink" title="截图相关的快捷键"></a>截图相关的快捷键</h3><p>可以在<code>system preferences &gt; keyboard &gt; shortcuts &gt; screen shots</code>中修改</p><ul><li>command + shift + 3，对整个屏幕进行截图，并且保存在桌面</li><li>command + shift + 4，用鼠标划定一个范围，会对该范围进行截图并且保存在桌面</li><li>command + shift + 4，鼠标不动，按空格键，会对当前操作的窗口进行截图并且保存在桌面</li><li>command + shift + control + 4，类似于以上command + shift + 4的两类操作，只不过其截图是保存在剪切板上，不在桌面上，可以后续将其贴在page等文档中</li></ul><h3 id="声音相关的快捷键"><a href="#声音相关的快捷键" class="headerlink" title="声音相关的快捷键"></a>声音相关的快捷键</h3><p>Mac自带了多种的系统语音，可以分别识别各国的语言，发出各国的语音。</p><p>在<code>system preferences &gt; accessibility &gt; speech &gt; system voice</code>中可以选择各国的语音了。</p><p>在弹出框到最下方，有一个speak selected text when the key is pressed的选项，这就表示当你选中某个文本的时候，以下的快捷键可以实现对该文本的发音。默认的快捷键是：option + esc。</p><h3 id="隐藏Dock栏的快捷键"><a href="#隐藏Dock栏的快捷键" class="headerlink" title="隐藏Dock栏的快捷键"></a>隐藏Dock栏的快捷键</h3><p>按下option + command + d，可以隐藏dock栏，此时如果把鼠标移动到dock栏原先所在位置，dock栏会重新出现在下方，待鼠标移走后，dock栏又重新隐藏。再次按下option + command + d，dock栏重新恢复到正常的显示状态。</p><h3 id="option键的神奇应用"><a href="#option键的神奇应用" class="headerlink" title="option键的神奇应用"></a>option键的神奇应用</h3><p>option和其他一些按键同时作用时，常常发挥出很多神奇的作用。</p><ul><li>option + command + h，如果当前桌面上同时打开了好多个程序，这个快捷键可以隐藏当前应用程序外的其他应用程序。如果只是option + h只隐藏当前程序</li><li>option + command + v，可以实现对一个已复制文件的移动，类似于windows中对文件的剪切黏贴效果</li><li>option + command + w，可以关闭safari下除当前tab外的所有其他tab，或者关闭某app相关的所有窗口。比如当你选中一批文件，按下command + i后，会弹出所有选中文件的info窗口，这时候就可以按option + command + w将全部info窗口关闭</li><li>option + command + i，可以用于选中好几个文件的场合，来看所有文件整合的info消息及所有文件占据空间的大小总和</li><li>打开launchpad，按下option键，所有app都会颤抖，和iphone中的状况是一样的。这时候按颤抖app上的✖️，即可卸载该app。仅适用于app store上下载的app的卸载</li><li>选择dock栏上打开的程序，按下右键弹出菜单后，再按下option键，这时就发现菜单栏倒数两项分别从hide，quit变化为hide others和force quit</li><li>在safari中，如果按下command + option + q退出safari，那么再次打开Safari的话，会发现之前打开的网址全部被保留了下来。但是如果是以command + q的方式退出safari，就没有这个保留网址的效果了</li></ul><h3 id="屏幕取词"><a href="#屏幕取词" class="headerlink" title="屏幕取词"></a>屏幕取词</h3><p>可以用control + command + d来实现屏幕取词的功能。</p><h3 id="Finder快捷键"><a href="#Finder快捷键" class="headerlink" title="Finder快捷键"></a>Finder快捷键</h3><p><img src="/images/mac/finder.png" alt="image"></p><ul><li>Command(⌘) + Delete 将选择的文件删除到垃圾箱</li><li>Command + z 撤销操作，包括复制粘贴删除</li><li>选中文件再按空格键 打开快速查看窗口</li><li>选中文件再回车 重命名</li><li>Command(⌘) + N 新打开一个Finder窗口</li><li>Command(⌘) + Shift(⇧) + N 新建一个文件夹</li><li>Command(⌘) + I 显示文件/文件夹简介</li><li>Command(⌘) + A 全选</li><li>Command(⌘) + Option(⌥) + A 取消全选</li><li>Command + Shift + 句号(.)， 可以显示隐藏文件、文件夹，再按一次，恢复隐藏</li><li>Command + Shift + G，可以跳转指定路径</li><li>Command + Shift + C，可以复制当前文件路径</li><li>Command + Shift + P，可以打开预览窗口</li><li>Command + Shift + T，可以打开导航栏，跟浏览器一样</li><li>Command + /，可以打开底部状态栏</li><li>Option + Command + P，可以打开底部路径栏</li><li>Option + Command + S，可以隐藏左侧栏</li><li>Command + 上下键跳转父子目录</li></ul><h3 id="快速切换目录"><a href="#快速切换目录" class="headerlink" title="快速切换目录"></a>快速切换目录</h3><p>在OS X下，可以在终端中以cd ~的方式进入根目录。</p><p>如果是在Finder里，可以按command + shift + h，快速切换到用户目录。<br>command + shift + d，快速切换到桌面目录。<br>command + shift + o，快速切换到Documents目录。</p><p>其他的快速切换在菜单栏Go中</p><h3 id="在MAC中输入特殊字符"><a href="#在MAC中输入特殊字符" class="headerlink" title="在MAC中输入特殊字符"></a>在MAC中输入特殊字符</h3><p>option + 各个键都有特定的一个字符，option + shift + 各个键也有特殊的字符</p><p>苹果标志 （Shift + Option + K）<br>Copyright © (Option + G)<br>美元 $ (Shift + 4)<br>美分 ￠ (Option + 4)<br>英镑 ￡ （Option + 3)<br>日元 ￥(Option + Y)<br>欧元 €（Shift + Option + 2)<br>破折号 –(Option + -)<br>约等于 ≈（Option + X)<br>度 °(Shift + Option + 8)<br>除号 ÷（Option + /)<br>循环 ∞（Option + 5）<br>小于等于≤（Option + ,)<br>大于等于≥（Option + .)<br>不等于≠（Option + =）<br>Pi π（Option + P）<br>正负号 ±(Shift + Option + =)<br>平方根√（Option + V)<br>求和 ∑（option + w）<br>产品标识 ™（Option + 2)<br>®(Option + r)</p><p>快捷键control + cmd + space打开符号面板，选择字符输入，比如cmd⌘、option⌥、control⌃、shift⇧、caps lock⇪、delete⌫、arrow↑→↓←等</p><h3 id="Finder设置"><a href="#Finder设置" class="headerlink" title="Finder设置"></a>Finder设置</h3><ul><li>显示隐藏文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder AppleShowAllFiles -boolean true ; killall Finder</div></pre></td></tr></table></figure><p>将true改为false恢复隐藏</p><ul><li>在顶部显示绝对路径，右键绝对路径前的图标可以切换父目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES</div></pre></td></tr></table></figure><p>将yes换为no还原</p><ul><li>底部地址栏从用户开始，默认是显示“MacHD/Users/clown/Downloads”，修改后显示“clown/Downloads”</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder PathBarRootAtHome -bool TRUE;killall Finder</div></pre></td></tr></table></figure><p>将true改为false还原</p><h3 id="Terminal常用命令"><a href="#Terminal常用命令" class="headerlink" title="Terminal常用命令"></a>Terminal常用命令</h3><ul><li><code>pwd</code>显示当前路径</li><li><code>which 库名</code>查看安装目录，比如<code>which go</code>输出/usr/local/go/bin/go</li><li><code>cd 路径</code>跳转，支持绝对路径和相对路径 ./ 和 ../</li><li><code>mkdir 文件名</code> 新建文件夹</li><li><code>rmdir 文件名</code>删除目录</li><li><code>mvdir</code></li><li><code>touch + 文件名</code>新建文件</li><li><code>ls 参数 路径</code>列出文件，<code>ls -l -A -h</code>显示当前路径详细信息文件列表</li><li><code>cp 参数 源文件 目标文件</code>拷贝文件，<code>cp -R ./Downloads/* ~/Desktop</code>表示将Downloads下所有文件拷贝到桌面，-R表示递归操作，源文件是文件夹时需要</li><li><code>rm 参数 文件</code>删除文件，参数－rf 表示递归和强制，文件夹需要-r参数，-i参数表示删除前要确认</li><li><code>mv 文件 路径</code>移动文件</li><li><code>file 文件</code>显示文件类型</li><li><code>open 文件</code>用默认工具打开文件</li><li><code>touch 文件名</code>更改文件的时间信息（可以用<code>stat 文件</code>查看），如果文件不存在会创建一个新的空文件，常用于创建新文件</li><li><code>vi 文件名</code>编辑文件，如果文件不存在就新建一个并打开文件，在vi编辑器中输入“:wq”保存更改并退出，推荐用vim代替vi</li><li><code>find</code>查询文件，<code>find 目录 -type f|wc -l</code>统计文件数，<code>find 目录 -type d|wc -l</code>统计目录数，<code>find . -name &quot;*.js&quot; -print</code>查询js格式的文件</li><li><code>date</code>显示系统时间</li><li><code>cal</code>显示日历</li><li><code>time 程序</code>统计程序的执行时间，比如 time a.out</li><li><code>telnet</code>远程登录</li><li><code>clear</code>清除窗口内容</li><li><code>env</code>显示当前所有设置过的环境变量</li><li><code>du</code>查询磁盘使用情况，<code>du -sh 目录</code>统计目录大小</li><li><code>df</code>显示文件系统的总空间和可用空间, <code>df -h /</code>显示硬盘使用情况</li><li><code>history</code>列出最近执行过的 几条命令及编号</li><li><code>alias</code>给某个命令定义别名，比如<code>alias del=rm -i</code></li><li><code>top</code>显示进程信息</li><li><code>kill 进程</code>终止进程</li></ul><h3 id="介绍Alfred"><a href="#介绍Alfred" class="headerlink" title="介绍Alfred"></a>介绍Alfred</h3><p>前面提到了Alfred，现在介绍一下如何使用它，使用教程网上都有，我就不赘述了，这里贴上一篇<a href="http://wellsnake.com/jekyll/update/2014/06/15/001/" target="_blank" rel="external">丢掉鼠标－Mac神软Alfred使用手册</a></p><p>我的设置如下</p><ul><li>热键：我设置的热键是<code>cmd + space</code>，刚好代替系统自带的spotlight</li><li>Default Results：勾上书签，支持搜索Safari的书签，但我用的是Chrome，可以把书签导入到Safari中即可；Search Scope设置Alfred查询时会遍历的文件夹，在这里可以自己添加经常访问的和删除不必要文件夹</li><li>Web Search：经常用到的功能，把自己常用的网站设置快捷键，像google搜索只要在Alfred中输入<code>gg 搜索的内容</code>即可，给自己的博客添加快捷键blog等等<br><img src="/images/artifact/websearch.png" alt="images"></li><li>关联terminal，直接在Alfred中输入<code>&gt; 命令</code>执行</li><li>workflow：我用的有Chrome Bookmarks、Dash和有道词典翻译，功能分别是搜索Chrome书签、<code>Dash 搜索内容</code>打开Dash中的API介绍，<code>yd 待翻译内容</code>显示翻译，其他workflow可以到网站<a href="http://www.packal.org" target="_blank" rel="external">http://www.packal.org</a> 和<a href="https://www.alfredapp.com/workflows" target="_blank" rel="external">https://www.alfredapp.com/workflows</a> 上看看</li><li>remote：远程控制电脑<br><img src="/images/mac/bookmarks.png" alt="image"></li></ul><p>完成设置后，之后几乎所有事都可以快捷键cmd + space打开Alfred解决，打开应用、搜索文件、执行命令、跳转网页、翻译、计算等等</p><h2 id="手势操作"><a href="#手势操作" class="headerlink" title="手势操作"></a>手势操作</h2><p>如果只是快捷键的话，windows也有，没什么很特别的，mac的优势之一就是它的触控板了，所以接下来介绍如何用好手势操作</p><h3 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h3><p>打开系统设置<code>system preferences &gt; Trackpad</code>，看介绍选择自己喜欢的操作，<br>我推荐把四指切换桌面选上，平时切换桌面会方便很多；<br>还有三指上划显示Mission Control选上，方便切换任务、整理桌面</p><h3 id="设置Hot-Corner"><a href="#设置Hot-Corner" class="headerlink" title="设置Hot Corner"></a>设置Hot Corner</h3><p>打开<code>system preferences &gt; Mission Control</code>，点击底部Hot Corner，设置鼠标移入四个角时的操作，比如我的<br><img src="/images/mac/hotcorner.png" alt="image"></p><p>鼠标移入右下角息屏，右上角显示桌面，很方便，是我使用很多的功能</p><h3 id="添加手势扩展"><a href="#添加手势扩展" class="headerlink" title="添加手势扩展"></a>添加手势扩展</h3><p>推荐两个软件：<a href="http://www.jitouch.com/" target="_blank" rel="external">Jitouch</a>和<a href="https://www.boastr.net/" target="_blank" rel="external">BetterTouchTool</a></p><p>bettertouch比jitouch更强大，支持的东西更多，但收费而且设置也会更复杂一点，对我来说jitouch已经够用，如果你喜欢折腾就去试下bettertouch</p><p>安装好后设置自己喜欢的手势，比如我的<br><img src="/images/artifact/jitouch1.png" alt="image"><br><img src="/images/artifact/jitouch2.png" alt="image"></p><p>使用手势时要注意两指的距离，设置里可以调，但不要太近，太近容易跟滚动冲突，我推荐用食指和无名指划字。</p><p>我也试了下buttertouch，它支持自定义手势，可选择的action也比jitouch多很多，但要注意一点，设置手势后还要设置一个快捷键选择record gesture，然后每次操作先按这个快捷键出现可划动区域再划手势，其实这点没有jitouch好用。</p><h2 id="ZSH"><a href="#ZSH" class="headerlink" title="ZSH"></a>ZSH</h2><p>这节主要跟terminal有关，terminal这也是mac另一大优势</p><p>推荐安装oh my zsh和iTerm2，提升terminal的使用效率和逼格指数</p><ul><li><a href="http://ohmyz.sh/" title="点击访问" target="_blank" rel="external">oh my zsh</a> is an open source, community-driven framework for managing your ZSH configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout…</li></ul><p>安装oh my zsh后默认bash改为zsh，配置文件变为<code>/Users/clown/.zshrc</code>，通过oh my zsh可以很方便地安装主题、安装插件等</p><p>建议加个主题再换个字体，设置一下颜色，逼格立马提高<br><img src="/images/mac/terminal3.png" alt="image"></p><p>推荐插件zsh-syntax-highlighting(指令高亮效果作用是当用户输入正确命令时指令会绿色高亮，错误时命令红色高亮)、z、git等等，查看官方地址<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins</a></p><ul><li><a href="http://www.iterm2.com/" title="点击访问" target="_blank" rel="external">iTerm2</a>是代替原本的terminal工具，支持更多操作，<a href="http://wulfric.me/2015/08/iterm2/" target="_blank" rel="external">设置教程</a></li></ul><p>主题配色可以去<a href="http://iterm2colorschemes.com/" target="_blank" rel="external">iterm2colorschemes.com</a>找，我用的是<code>idleToes</code></p><p><img src="/images/mac/terminal1.png" alt="image"><br><img src="/images/mac/terminal2.png" alt="image"></p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Mac </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[分享自用的一些软件、插件、网站和应用]]></title>
      <url>/2017/ShareArtifact.html</url>
      <content type="html"><![CDATA[<!-- build time:Tue Oct 31 2017 14:16:07 GMT+0800 (CST) --><blockquote><p>这些只是收录我现在用到的东西，没有特意收集的意思，未必很全，但每个应该都很实用<br><a href="https://github.com/wangriyu/Collections" title="点击访问" target="_blank" rel="external">Github仓库</a></p></blockquote><h2 id="插件篇"><a href="#插件篇" class="headerlink" title="插件篇"></a>插件篇</h2><h3 id="Chrome-插件"><a href="#Chrome-插件" class="headerlink" title="Chrome 插件"></a>Chrome 插件</h3><ul><li>Adblock Plus:：屏蔽广告，必备，不用介绍</li><li><a href="https://chrome.google.com/webstore/detail/code-cola/lomkpheldlbkkfiifcbfifipaofnmnkn" title="点击访问" target="_blank" rel="external">Code Cola</a>：一个可视化编辑在线页面css样式的chrome插件，相当于控制台修改的效果，但方便很多</li><li><a href="https://chrome.google.com/webstore/detail/full-page-screen-capture/fdpohaocaechififmbbbbbknoalclacl" title="点击访问" target="_blank" rel="external">Full Page Screen Capture</a>：可以滚动截取整个网页</li><li><a href="https://chrome.google.com/webstore/detail/%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91/ikhdkkncnoglghljlkmcimlnlhkeamad" target="_blank" rel="external">划词翻译</a>：划词翻译，支持谷歌、百度、有道翻译</li><li>★★<a href="http://ksria.com/simpread/" target="_blank" rel="external">简阅</a>：巨好用的插件，相当于添加了阅读模式，界面很漂亮，设置很全，功能也挺完整</li><li><a href="https://chrome.google.com/webstore/detail/page-ruler/jlpkojjdgbllmedoapgfodplfhcbnbpn" title="点击访问" target="_blank" rel="external">Page Ruler</a>：网页标尺，可以方便测量各个元素的尺寸</li><li>★<a href="http://chrispederick.com/work/web-developer/" title="点击访问" target="_blank" rel="external">Web Developer</a>：前端必备，功能强大，可以设置网页上几乎所有东西</li><li>★★<a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad?utm_source=chrome-ntp-icon" title="点击访问" target="_blank" rel="external">WEB前端助手(FeHelper)</a>：也是前端必备，包括json美化、页面测试、编解码、代码美化压缩等等</li><li>★有道云笔记网页剪报：配合有道云笔记，方便收藏各种笔记、网页</li><li><a href="https://chrome.google.com/webstore/detail/wide-github/kaalofacklcidaampbokdplbklpeldpj" title="点击访问" target="_blank" rel="external">Wide Github</a>：加宽GitHub的页面内容，让你的GitHub网页显示更舒服</li><li><a href="https://chrome.google.com/webstore/detail/sourcegraph-for-github/dgjhfomjieaadpoljlnidmbgkdffpack" title="点击访问" target="_blank" rel="external">Sourcegraph for GitHub</a>：相当于一个IDE，直接查看GitHub上的仓库</li><li><a href="https://chrome.google.com/webstore/detail/octotree/bkhaagjahfmjljalopjnoealnfndnagc?hl=en-US" title="点击访问" target="_blank" rel="external">Octotree</a>：GitHub插件，极力推荐，在仓库左上角显示目录，直接点击文件跳转，不用一级级打开网页上的repo</li><li>★★<a href="https://chrome.google.com/webstore/detail/insightio-for-github/pmhfgjjhhomfplgmbalncpcohgeijonh" title="点击访问" target="_blank" rel="external">Insight.io for Github</a>：功能和Octotree类似，比Octotree略微高级点</li><li>★<a href="https://chrome.google.com/webstore/detail/isometric-contributions/mjoedlfflcchnleknnceiplgaeoegien" title="点击访问" target="_blank" rel="external">Isometric Contributions</a>：装逼利器，让GitHub profile页的提交记录立体化，跟gitee的效果差不多</li><li>★★<a href="https://chrome.google.com/webstore/detail/github-plus/anlikcnbgdeidpacdbdljnabclhahhmd" title="点击访问" target="_blank" rel="external">GitHub Plus</a>：极力推荐，显示仓库、文件大小，并提供单文件的下载</li><li><a href="http://listen1.github.io/listen1" title="点击访问" target="_blank" rel="external">Lisen1</a>：很棒的一个音乐插件，还有客户端版本</li><li>★<a href="https://muz.li/" title="点击访问" target="_blank" rel="external">Muzli</a>：集合了很多网站的最新更新，一站式阅读新闻和资讯，适合设计者和开发者</li><li><a href="https://chrome.google.com/webstore/detail/feedly/hipbfijinpcgfogaopmgehiegacbhmob?utm_source=chrome-ntp-icon" title="点击访问" target="_blank" rel="external">feedly</a>：一个webapp，可以收藏网址，主要用于RSS和博客订阅</li><li><a href="https://userstyles.org/" title="点击访问" target="_blank" rel="external">stylish</a>：可以自定义浏览器主题样式，也可以安装别人的</li><li>★<a href="https://chrome.google.com/webstore/detail/addtoany-share-anywhere/ffpgijchhhkhnokafdeklpllijgnbche" title="点击访问" target="_blank" rel="external">AddToAny: Share Anywhere</a>：一个分享插件</li></ul><h3 id="Terminal-插件"><a href="#Terminal-插件" class="headerlink" title="Terminal 插件"></a>Terminal 插件</h3><p>Terminal插件和vim插件没怎么试过.感兴趣的可以到这个网站看看：<a href="https://vimawesome.com/" target="_blank" rel="external">Vim Awesome</a></p><p>这里有几个我用过的:</p><ul><li>★★<a href="http://ohmyz.sh/" target="_blank" rel="external">Oh My ZSH</a>：方便个性化配置你的zsh<br>加个ys主题，换个字体，再加个背景图片，逼格立马上升了:<br><img src="/images/mac/terminal1.png" alt="image"></li><li><a href="https://github.com/johngrib/vim-game-code-break" title="点击访问" target="_blank" rel="external">VimGameCodeBreak</a>：打开一个文本，开始一盘打方块游戏吧，注意需要vim8.0</li><li><a href="https://github.com/aksakalli/gtop" title="点击访问" target="_blank" rel="external">gtop</a>：在终端显示电脑cpu、内存、进程信息</li></ul><h3 id="VS-Code-插件"><a href="#VS-Code-插件" class="headerlink" title="VS Code 插件"></a>VS Code 插件</h3><p>更多vsc插件可以到官方市场搜索<a href="https://marketplace.visualstudio.com/search?target=VSCode&amp;category=All%20categories&amp;sortBy=Downloads" target="_blank" rel="external">https://marketplace.visualstudio.com/search?target=VSCode&amp;category=All%20categories&amp;sortBy=Downloads</a></p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=RoscoP.ActiveFileInStatusBar" target="_blank" rel="external">Active File In Status Bar</a>：在底部显示文档绝对路径</li><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag" target="_blank" rel="external">Auto Close Tag</a>：自动补全关闭的标签，比如</li><li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag" target="_blank" rel="external">Auto Rename Tag</a>：当你修改标签头时，同时修改标签尾</li><li><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer" target="_blank" rel="external">Bracket Pair Colorizer</a>：给各个括号添加颜色</li><li><a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome" target="_blank" rel="external">Debugger for Chrome</a>：在Google Chrome浏览器调试JavaScript代码</li><li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint" target="_blank" rel="external">ESLint</a>：代码检查工具</li><li><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense" target="_blank" rel="external">npm Intellisense</a>：在 import 导入语句中自动完成npm 模块</li><li><a href="https://marketplace.visualstudio.com/items?itemName=mkxml.vscode-filesize" target="_blank" rel="external">filesize</a>：显示文件大小</li><li><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme" target="_blank" rel="external">Material Icon Theme</a>：提供MD风格的文档图标</li><li><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense" target="_blank" rel="external">Path Intellisense</a>：路径自动补全</li><li><a href="https://marketplace.visualstudio.com/items?itemName=searKing.preview-vscode" target="_blank" rel="external">Preview</a>：提供Markdown, ReStructured Text, HTML, Jade, Pug, Mermaid files, Image’s URI or CSS properties的预览，MAC快捷键:cmd+shift+v</li><li><a href="https://marketplace.visualstudio.com/items?itemName=DoubleWoodH.word-count" target="_blank" rel="external">Word Count</a>：字数统计，同事写的</li><li><a href="https://marketplace.visualstudio.com/items?itemName=bibhasdn.git-easy" target="_blank" rel="external">Git Easy</a>：让git更方便</li><li><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets" target="_blank" rel="external">JavaScript (ES6) code snippets</a>：代码片段插件，支持js和ts，比如输入imp生成import fs from ‘fs’;</li><li><a href="https://marketplace.visualstudio.com/items?itemName=joelday.docthis" target="_blank" rel="external">Document This</a>：自动给js代码添加注释</li><li><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode" target="_blank" rel="external">Prettier</a>：格式化js代码，快捷键<code>cmd + shift + p</code>输入Format Document或Format Selection(先选中要格式化的文本)</li></ul><h3 id="IDE插件"><a href="#IDE插件" class="headerlink" title="IDE插件"></a>IDE插件</h3><p>分享两个JetBrains的插件，无意间看到的</p><ul><li><a href="https://plugins.jetbrains.com/plugin/8502-background-image-plus" target="_blank" rel="external">Background Image Plus</a>: 设置背景图片的，效果如下<br><img src="/images/artifact/background1.png" alt="image"><br><img src="/images/artifact/background2.png" alt="image"></li><li><a href="https://plugins.jetbrains.com/plugin/8330-activate-power-mode" target="_blank" rel="external">activate-power-mode</a>: 这原本是Atom的插件，移植过来的，效果还行吧，但是这东西华而不实，如果影响打字还是去掉得好。还有如果安装后发现没有效果，记得把combo那个选项去掉，因为默认要连击多少下才会出效果</li></ul><h2 id="软件篇"><a href="#软件篇" class="headerlink" title="软件篇"></a>软件篇</h2><ul><li>★<a href="https://pdfexpert.com/" title="点击访问" target="_blank" rel="external">PDF Expert</a>：mac上最好用最强大的pdf软件，如果资金有限不想购买的客官可以看下<a href="http://xclient.info/s/pdf-expert-for-mac.html?_=f7d710b8833dbc76de5d7640956a0551" title="点击访问" target="_blank" rel="external">Xclient.info</a></li><li>★★<a href="https://typora.io/" title="点击访问" target="_blank" rel="external">Typora</a>：方便快速地编写MarkDown，界面简单，实用高效</li><li>★<a href="https://itunes.apple.com/cn/app/networker-%E6%98%BE%E7%A4%BA%E7%BD%91%E7%BB%9C%E4%BF%A1%E6%81%AF/id1163602886?mt=12" title="点击访问" target="_blank" rel="external">NetWorker</a>：状态栏显示网速，简单美观</li><li>★<a href="https://itunes.apple.com/us/app/istatistica/id1025822138?mt=12" target="_blank" rel="external">iStatistica</a>：一款颜值颇高的系统监控软件，它包括通知中心小部件和状态栏菜单<br><img src="/images/artifact/iStatistica.png" alt="image"></li><li>★<a href="https://sipapp.io/" title="点击访问" target="_blank" rel="external">Sip</a>：很好用的取色工具，需要购买，如果资金有限不想购买的客官可以看下<a href="http://xclient.info/s/sip.html?_=f7d710b8833dbc76de5d7640956a0551" title="点击访问" target="_blank" rel="external">Xclient.info</a></li><li>★★<a href="http://faststone.org/FSCaptureDetail.htm" title="点击访问" target="_blank" rel="external">FastStone Capture</a>：Windows上一款非常强大的集取色截屏录屏于一身的软件，而且支持滚动截屏，可惜mac上没有</li><li>★★<a href="https://note.youdao.com/" title="点击访问" target="_blank" rel="external">有道云笔记</a>：收藏编写笔记很方便，配合浏览器插件可以收藏网页，关注官方公众号还可以把微信文章也收藏进去，我的所有收藏和笔记都可以放进去，而且多端同步随时可以看，手机版还可以写markdown</li><li><a href="http://snip.qq.com/" title="点击访问" target="_blank" rel="external">Snip</a>：之前找mac上支持滚动截屏的软件，但没找到很好的能代替Windows平台利器FastStone的，这个Snip勉强符合滚动截屏的要求</li><li>★<a href="http://jietu.qq.com" title="点击访问" target="_blank" rel="external">Jietu</a>：和snip一样同出于鹅厂，也有滚动截屏，功能多一点，可以代替snip</li><li>★<a href="https://itunes.apple.com/app/id992076693?mt=12&amp;ign-mpt=uo%3D4" title="点击访问" target="_blank" rel="external">MindNode</a>：很漂亮的一款思维导图，如果资金有限不想购买的客官可以看下<a href="http://xclient.info/s/mind-node-pro.html?_=f7d710b8833dbc76de5d7640956a0551" title="点击访问" target="_blank" rel="external">Xclient.info</a></li><li><a href="https://itunes.apple.com/cn/app/expressions/id913158085?l=en&amp;mt=12" title="点击访问" target="_blank" rel="external">Expressions</a>：一款macOS平台的强大的正则表达式工具，测试正则表达式，多种主题，选中高亮等。如果资金有限不想购买的客官可以看下<a href="http://xclient.info/s/expressions.html?_=f7d710b8833dbc76de5d7640956a0551" title="点击访问" target="_blank" rel="external">Xclient.info</a></li><li><a href="https://webtorrent.io/desktop/" title="点击访问" target="_blank" rel="external">WebTorrent</a>：直接看磁链里的内容，无需等待下载</li><li><a href="https://framer.com/features/" title="点击访问" target="_blank" rel="external">Framer</a>：一个设计开发用的</li><li><a href="http://tumult.com/hype/pro/" title="点击访问" target="_blank" rel="external">Tumult</a>：也是一个设计工具，还没用过</li><li>★<a href="http://xclient.info/s/new-file-menu.html?_=8f2ea7453a409bd6674c05d22079f675" title="点击访问" target="_blank" rel="external">New File Menu</a>：finder扩展，右键新建文件，还可以自定义文件模板</li><li>★★<a href="https://www.freedownloadmanager.org/" target="_blank" rel="external">FDM</a>：全称free download manager，相当于免费的idm，而且支持mac平台，支持下载youtubu视频，支持url或者torrent，我还试了下mac平台另一款网上推荐的下载工具folx，但folx速度好像比不上fdm</li><li>★<a href="http://www.eigenlogik.com/entropy/" target="_blank" rel="external">Entropy</a>：很强大的解压缩软件，支持多种格式，操作便捷，但收费，如果资金有限不想购买的客官可以看下<a href="http://xclient.info/s/entropy.html?_=38c50d7151e1cd2d16ca86daef7039c2" target="_blank" rel="external">xclient.info</a></li><li>★<a href="https://itunes.apple.com/cn/app/leaf-rss-news-reader/id576338668?l=en&amp;mt=12" target="_blank" rel="external">Leaf</a>：RSS News Reader, 订阅RSS源后，可以一站式阅读，之前不知道rss这东西，傻傻地一个个打开别人博客看文章<br>这里有一些收藏的RSS源: <a href="http://javascriptweekly.com/rss/13jbi2ol" target="_blank" rel="external">javascriptweekly</a>、<a href="http://blog.csdn.net/rss.html" target="_blank" rel="external">CSDN博客推荐文章</a>、<a href="http://www.ruanyifeng.com/blog/atom.xml" target="_blank" rel="external">阮一峰的网络日志</a>、<a href="http://www.barretlee.com/rss2.xml" target="_blank" rel="external">小胡子哥</a>、<a href="https://coolshell.cn/feed" target="_blank" rel="external">酷壳</a>、<a href="http://www.zhangxinxu.com/wordpress/feed/" target="_blank" rel="external">张鑫旭</a>、<a href="http://caibaojian.com/feed" target="_blank" rel="external">前端开发博客</a>、<a href="http://harttle.com/feed.xml" target="_blank" rel="external">Harttle Land</a>、<a href="https://www.phodal.com/blog/feeds/rss/" target="_blank" rel="external">Phodal - A Growth Engineer</a>、<br><a href="https://www.web-tinker.com/rss.xml" target="_blank" rel="external">Web技术研究所</a>、<a href="http://js8.in/atom.xml" target="_blank" rel="external">三水清</a>、<a href="http://liuyanwei.jumppo.com/pages/rss.xml" target="_blank" rel="external">刘彦玮</a>、<a href="http://feed.cnblogs.com/blog/u/177636/rss" target="_blank" rel="external">ChokCoco</a>、<a href="http://wdxtub.com/atom.xml" target="_blank" rel="external">小士刀</a>、<a href="http://www.devio.org/feed.xml" target="_blank" rel="external">贾鹏辉</a>、<a href="http://yanhaijing.com/rss.xml" target="_blank" rel="external">颜海镜</a>、<a href="http://gank.io/feed" target="_blank" rel="external">干货集中营</a>、<a href="https://weekly.75team.com/rss.php" target="_blank" rel="external">奇舞周刊</a>、<br><a href="http://blog.manong.io/rss.xml" target="_blank" rel="external">码农周刊</a>、<a href="http://www.infoq.com/cn/feed" target="_blank" rel="external">InfoQ</a>、<a href="http://onetwo.ren//feed.xml" target="_blank" rel="external">OneTwo</a></li><li><a href="https://bootstrapstudio.io/" title="点击访问" target="_blank" rel="external">Bootstrap Studio</a>：这个软件可牛逼了，建议看下官网的介绍视频，这个软件可以让你以直接拖动组件的方式完成一个网页，感觉跟C#类似，用来做基础布局可以节约大量时间</li><li>★<a href="https://zhitu.isux.us/" title="点击访问" target="_blank" rel="external">智图</a>：图片压缩，方便快捷</li><li><a href="https://github.com/yinghuocho/firefly-proxy" title="点击访问" target="_blank" rel="external">萤火虫Firefly</a>：一款翻墙软件，电脑手机都有</li><li><a href="https://github.com/getlantern/lantern" title="点击访问" target="_blank" rel="external">蓝灯</a>：蓝灯VPN，速度挺快的，如果下载发行版的话有流量限制，建议去GitHub上照步骤自己编译程序，这样是没有流量限制的</li><li><a href="https://www.tunnelbear.com/" target="_blank" rel="external">ThunnelBear</a>：ThunnelBear VPN，速度还行，分享推特后每月有1GB流量</li><li><a href="https://github.com/XX-net/XX-Net" title="点击访问" target="_blank" rel="external">XX-Net</a>：很好用的翻墙工具，但配置会麻烦一点</li><li><a href="http://www.smartisan.com/apps/handshaker" target="_blank" rel="external">HandShaker</a>：锤子科技出的一款软件，可以无线连接手机和电脑，方便在电脑上管理移动设备的文件，如果要互传可以使用茄子快传</li><li>★★<a href="https://kapeli.com/dash" title="点击访问" target="_blank" rel="external">Dash</a>：开发者必备，各种API文档，配合Alfred查询非常方便，如果资金有限不想购买的客官可以看下<a href="http://xclient.info/s/dash.html?_=f7d710b8833dbc76de5d7640956a0551" title="点击访问" target="_blank" rel="external">Xclient.info</a></li><li><a href="http://xscopeapp.com" title="点击访问" target="_blank" rel="external">xScope</a>：设计开发辅助工具，有10个实用优秀的小工具，如屏幕镜像、屏幕标尺、放大镜、十字定位等等</li><li>★★<a href="https://itunes.apple.com/cn/app/ohmystar2-best-way-to-organize-your-github-stars/id1218642292?l=en&amp;mt=12" title="点击访问" target="_blank" rel="external">ohMyStar2</a>：强烈推荐的一个软件，可以管理GitHub账号的star，分类管理添加标签，还可以看热门项目，对于star几百个的人太有用了</li><li>★<a href="https://github.com/Nightonke/Gitee" title="点击访问" target="_blank" rel="external">gitee</a>：显示GitHub账号信息，方便查看trending、项目信息等</li><li>★<a href="https://slack.com/" title="点击访问" target="_blank" rel="external">Slack</a>：开发人员的聊天app，主要是国外用户，加入不同的channel，了解不同的地域风格，与国外友人交流</li><li><a href="http://gitter.im" title="点击访问" target="_blank" rel="external">Gitter</a>：也是一款开发人员地聊天app，集合各种语言和框架，与其相关的还有一个GitLab</li><li>★★★<a href="http://www.jitouch.com/" target="_blank" rel="external">Jitouch</a>：手势拓展，定义手势操作让触控板更强大，加上alfred，还要什么鼠标。这是我的设置，注意手势要求两指有一定距离，最好用食指和无名指来划。</li></ul><p><img src="/images/artifact/jitouch1.png" alt="image"></p><p><img src="/images/artifact/jitouch2.png" alt="image"></p><ul><li>★★<a href="https://www.boastr.net/" target="_blank" rel="external">BetterTouchTool</a>：功能比jitouch还要强大，但现在要收费，虽然功能更多而且支持自定义手势但设置也会复杂一点，这里有篇<a href="http://www.jianshu.com/p/4447344fc531" target="_blank" rel="external">教程</a>，对我来说jitouch已经够用了</li><li>★★★<a href="https://www.alfredapp.com/" title="点击访问" target="_blank" rel="external">Alfred</a>：如果上面的都是神器，那这个就是超神器，强烈推荐。附上<a href="http://wellsnake.com/jekyll/update/2014/06/15/001/" title="点击访问" target="_blank" rel="external">使用教程</a>。<br>建议关掉mac自带的Spotlight, 将Alfred快捷键设置成cmd + space(原Spotlight快捷键)；<br>把常用的网站，特别是搜索类的放到websearch里：<br><img alt="image" src="/images/artifact/websearch.png" width="600px" height="400px"><br>把浏览器书签导入Safari，可以用Alfred搜索打开；快捷键打开终端；查询文档；搜索打开文件；记录Clipboard历史等等…<br>当然最强大的功能还是workflow，我用到的workflow有Dash和有道翻译</li></ul><h2 id="应用篇"><a href="#应用篇" class="headerlink" title="应用篇"></a>应用篇</h2><p>本人手机安卓，所以只推荐一些自用的安卓应用</p><ul><li>[Google Play]：第一推荐当然是谷歌商店啦，上面也有很多精品应用</li><li>[蓝灯VPN]：要访问谷歌肯定要翻墙，蓝灯还是能用的，之前用的是green，但后来又被封了</li><li>[萤火虫VPN]：萤火虫也是可以用的</li><li>★★[知乎、简书、轻氧、掘金、开发者头条]：学习的好地方</li><li><a href="https://play.google.com/store/apps/details?id=com.fastaccess.github" target="_blank" rel="external">FastHub</a>：FastHub for GitHub，集合了GitHub基本所需的所有功能</li><li><a href="http://zuimeia.com/apps/?platform=2" title="点击访问" target="_blank" rel="external">最美应用</a>：这是一个应用的名字，是最美团队出品的，收集了很多精品应用</li><li><a href="https://play.google.com/store/apps/details?id=flipboard.app&amp;hl=zh_CN" title="点击访问" target="_blank" rel="external">Flipboard</a>：需要翻墙，一些时事资讯。热门文章等</li><li><a href="https://play.google.com/store/apps/details?id=com.zuiapps.suite.days&amp;hl=zh_CN" title="点击访问" target="_blank" rel="external">ZUI Days</a>：一款很漂亮的记录时间和重要纪念日的应用</li><li>★<a href="https://play.google.com/store/apps/details?id=com.ruguoapp.jike&amp;hl=zh_CN" title="点击访问" target="_blank" rel="external">即刻</a>：专门为你定制的内容推送，推荐使用</li><li><a href="https://play.google.com/store/apps/details?id=com.google.android.spotlightstories&amp;hl=zh_CN" title="点击访问" target="_blank" rel="external">Google Spotlight Stories</a>：用手机看真•3D视频，效果很棒，值得一试</li><li>★<a href="https://play.google.com/store/apps/details?id=com.memorado.brain.games&amp;hl=zh_CN" title="点击访问" target="_blank" rel="external">Memorado</a>：很棒的一款脑力游戏，画面精美，无聊的时候练练脑力</li><li><a href="https://play.google.com/store/apps/details?id=com.picsart.studio&amp;hl=zh_CN" title="点击访问" target="_blank" rel="external">PicsArt</a>：很强大的修图应用，但让我印象深刻的是里面的魔法：可以将一张图转换成其他图片的风格，比如梵高的星夜</li><li><a href="https://play.google.com/store/apps/details?id=com.scheffsblend.designertools&amp;hl=zh_CN" title="点击访问" target="_blank" rel="external">Designer Tools</a>：设计师工具，提供了网格覆盖图、样机覆盖图、取色器、截图细节等</li><li><a href="https://play.google.com/store/apps/details?id=com.curiosity.dailycuriosity&amp;hl=zh_CN" title="点击访问" target="_blank" rel="external">Curiosity</a>：各种视频，了解世界，增长见识</li><li>★★<a href="https://play.google.com/store/apps/details?id=mark.via.gp&amp;hl=zh_CN" title="点击访问" target="_blank" rel="external">Via浏览器</a>：非常小巧的浏览器，但功能一应俱全，而且响应速度很快，类似的还有一个夸克浏览器</li><li>★[ADM]:安卓上的IDM，配合ES文件浏览器还可以下载百度网盘的东西，具体教程可以在网上搜到</li></ul><h2 id="网站篇"><a href="#网站篇" class="headerlink" title="网站篇"></a>网站篇</h2><ul><li>★<a href="http://xclient.info" title="点击访问" target="_blank" rel="external">Xclient</a>：精品mac应用分享</li><li>★<a href="http://devdocs.io/" title="点击访问" target="_blank" rel="external">Devdocs</a>：API文档，功能和Dash差不多</li><li><a href="https://www.docschina.org/" title="点击访问" target="_blank" rel="external">印记中文</a>：一些权威中文文档</li><li>★★<a href="https://htmlpreview.github.io/" title="点击访问" target="_blank" rel="external">HtmlPreview</a>：HTML链接预览，可以用于预览github上的html文件</li><li>★★<a href="https://clipchamp.com/zh-Hans/dashboard" title="点击访问" target="_blank" rel="external">在线压缩视频ClipChamp</a>：方便好用</li><li><a href="https://converticon.com/" target="_blank" rel="external">converticon</a>：图片转icon</li><li><a href="https://ezgif.com/video-to-gif" title="点击访问" target="_blank" rel="external">视频转换器</a>：视频转GIF，压缩、裁剪等等</li><li>★<a href="http://naotu.baidu.com/home" title="点击访问" target="_blank" rel="external">百度脑图</a>：在线创建思维导图，功能强大</li><li>★<a href="http://caibaojian.com/page/3" title="点击访问" target="_blank" rel="external">前端开发博客</a>：前端优质内容</li><li>★<a href="http://gank.io/" title="点击访问" target="_blank" rel="external">干货集中营</a>：确实有干货，还有妹纸</li><li>★<a href="https://tutorialzine.com/articles" title="点击访问" target="_blank" rel="external">tutorialzine</a>：前端文章推送</li><li><a href="http://collectui.com/" title="点击访问" target="_blank" rel="external">Collect UI </a>：UI设计灵感</li><li><a href="http://www.uisdc.com/75-web-animation-tools-1#" title="点击访问" target="_blank" rel="external">优设</a>：关于设计和开发</li><li>★<a href="https://codepen.io/picks/2/" title="点击访问" target="_blank" rel="external">CodePen</a>：各种有趣的js demo和项目</li><li><a href="https://www.codeseek.co/" target="_blank" rel="external">CodeSeek</a>：与CodePen类似的网站</li><li>★<a href="https://tympanus.net/codrops/category/playground/" title="点击访问" target="_blank" rel="external">Codrops</a>：各种优质文章和设计</li><li>★★<a href="https://www.ctolib.com/" title="点击访问" target="_blank" rel="external">CTOLib码库</a>：各种代码库</li><li><a href="http://nec.netease.com/library" title="点击访问" target="_blank" rel="external">网易代码库</a></li><li>★<a href="https://dribbble.com/" title="点击访问" target="_blank" rel="external">Dribbble</a>：优秀设计模板</li><li>★<a href="https://www.behance.net/" title="点击访问" target="_blank" rel="external">Behance</a>：优秀设计创意作品</li><li>★<a href="https://tinypng.com/" title="点击访问" target="_blank" rel="external">压缩图片https://tinypng.com</a></li><li><a href="http://asciiflow.com/" title="点击访问" target="_blank" rel="external">在线画图Asciiflow</a></li><li><a href="http://thecodeplayer.com/" title="点击访问" target="_blank" rel="external">TheCodePlayer</a>：很棒的HTML5、CSS3、JS学习网站，代码一行一行视频演示</li><li><a href="https://www.freshdesignweb.com/" title="点击访问" target="_blank" rel="external">Freshdesignweb</a>：网站设计</li><li><a href="https://css-tricks.com/" title="点击访问" target="_blank" rel="external">CSS-Tricks</a>：学习CSS不可错过此网站</li><li><a href="http://en.jsrun.net/" title="点击访问" target="_blank" rel="external">JSRUN</a>：类似codepen，提供在线编写代码，也有很多有趣demo</li><li><a href="http://cssdeck.com/" title="点击访问" target="_blank" rel="external">CssDeck</a>：一些展示CSS效果的demo</li><li>★<a href="http://tool.oschina.net/" title="点击访问" target="_blank" rel="external">在线工具汇总</a></li><li><a href="http://www.jiawin.com/10-design-artifact" title="点击访问" target="_blank" rel="external">觉唯设计</a></li><li>★<a href="https://www.smashingmagazine.com/tag/javascript/" title="点击访问" target="_blank" rel="external">SmashingMagazine</a>：前端杂志</li><li><a href="http://navnav.co/" title="点击访问" target="_blank" rel="external">NavNav</a>：各种响应式菜单的设计</li><li><a href="https://codyhouse.co/library/" title="点击访问" target="_blank" rel="external">CODYHOUSE</a>：视觉设计</li><li><a href="https://csswizardry.com/archive/" title="点击访问" target="_blank" rel="external">CSS Wizardry Posts Archive</a>：优质博客文章，很多关于css和设计的</li><li><a href="http://textify.it/" title="点击访问" target="_blank" rel="external">textify.it</a>：一个有趣的网站，可以把图片字符化</li><li><a href="http://www.developerdrive.com/categories/" title="点击访问" target="_blank" rel="external">DeveloperDrive</a>：提供大量优质文章</li><li>★<a href="https://hackernoon.com/" title="点击访问" target="_blank" rel="external">HACKNOON</a>：极客的下午茶时间，推送很多优质文章</li><li><a href="http://fakeupdate.net/" title="点击访问" target="_blank" rel="external">假装 Windows 升级界面</a></li><li><a href="https://www.seeseed.com/" title="点击访问" target="_blank" rel="external">SeeSeed</a>：设计与灵感，适合设计师用</li><li><a href="http://tushuo.baidu.com/wave/index#/gallery" title="点击访问" target="_blank" rel="external">百度•图说</a>：在线创建图表</li><li><a href="http://www.csswinner.com/blog/" title="点击访问" target="_blank" rel="external">CSSWinner</a>：CSS Award Gallery for Website Design Inspiration</li><li><a href="http://www.zcfy.cc/translate/discovery" title="点击访问" target="_blank" rel="external">众成翻译</a>：有很多翻译的和未翻译的文章，值得翻一翻看一看</li><li><a href="http://www.guokr.com/scientific/" title="点击访问" target="_blank" rel="external">果壳-科学人</a>：挺多有趣的科学文章</li><li><a href="https://zh.airbnb.com/" title="点击访问" target="_blank" rel="external">Airbnb</a></li><li>★<a href="https://medium.com/" title="点击访问" target="_blank" rel="external">Medium</a>：各种文章，谷歌商店上还能找到app</li><li><a href="https://developers.google.com/speed/pagespeed/?hl=zh-CN&amp;utm_source=PSI&amp;utm_medium=incoming-link&amp;utm_campaign=PSI" title="点击访问" target="_blank" rel="external">Google PageSpeed Tools</a>：谷歌站点分析，网站速度性能评分</li><li><a href="http://www.arkie.cn/" title="点击访问" target="_blank" rel="external">ARKie</a>：自动帮你设计海报，很好用</li><li>★<a href="http://iconfont.cn/" title="点击访问" target="_blank" rel="external">IconFont</a>：阿里巴巴矢量图标库</li><li><a href="http://ppt.baidu.com/" title="点击访问" target="_blank" rel="external">PPT遥控器</a>：用手机当ppt遥控器</li><li>★<a href="https://wordart.com/" title="点击访问" target="_blank" rel="external">Wordart</a>：在线生成文字云</li><li><a href="https://goo.gl/#" title="点击访问" target="_blank" rel="external">在线生成短链</a>：谷歌在线生成短链工具</li><li>★<a href="https://gfycat.com/" title="点击访问" target="_blank" rel="external">Gfycat</a>：各种动图</li><li><a href="https://mockupsjar.com/" title="点击访问" target="_blank" rel="external">Mockups</a>：三步生成逼真的网站、手机的设计稿</li><li><a href="https://mycolor.space/gradient" title="点击访问" target="_blank" rel="external">ColorSpace</a>：生成渐进色背景</li><li>★<a href="https://frontend.directory/p" title="点击访问" target="_blank" rel="external">frontend.directory</a>：罗列了各种前端的资源</li><li><a href="http://hawx1993.github.io/Front-end-Interview-Questions/#/?id=interview-quesetions" title="点击访问" target="_blank" rel="external">前端面试题</a>：长期更新的，内容挺全</li><li><a href="http://html5ify.com/fks/" title="点击访问" target="_blank" rel="external">FKS</a>：Frontend Knowledge Structure，前端知识体系汇总</li><li><a href="http://css3pie.com/" title="点击访问" target="_blank" rel="external">CSS3PIE</a>：PIE使IE6~9可以支持大部分CSS3的样式</li><li><a href="https://javier.xyz/img2css/" title="点击访问" target="_blank" rel="external">img2css</a>：将图片转成css，适合一些小图标，大图就不要尝试了</li><li><a href="https://trello.com/#" title="点击访问" target="_blank" rel="external">Trello</a>：看板，GitHub上有一个类似的项目叫<a href="https://wekan.indie.host/" title="点击访问" target="_blank" rel="external">wekan</a></li><li><a href="http://www.bootcdn.cn/" title="点击访问" target="_blank" rel="external">BootCDN</a>：找一些库的cdn很方便</li><li><a href="http://wetest.qq.com/product/cloudphone" title="点击访问" target="_blank" rel="external">云真机</a>：腾讯推出的服务，可以线上测试各种手机</li><li>★<a href="http://hao.caibaojian.com/" title="点击访问" target="_blank" rel="external">码农头条</a></li><li>★<a href="http://weekly.manong.io/issues/" title="点击访问" target="_blank" rel="external">码农周刊</a></li><li><a href="http://cssanimate.com/" title="点击访问" target="_blank" rel="external">CSS Animate</a>：在线生成css动画</li><li><a href="http://www.wailian.work/" title="点击访问" target="_blank" rel="external">外链工厂</a>：无限外链，批量上传，而且可以生成各种嵌入代码</li><li><a href="http://algo-visualizer.jasonpark.me/#path=backtracking/knight&#39;s_tour/basic" title="点击访问" target="_blank" rel="external">AlgorithmVisualizer</a>：演示算法的网页，做的很棒</li><li>★<a href="https://www.codewars.com" title="点击访问" target="_blank" rel="external">CodeWar</a>：很适合练习编程，包含各种语言，而且可以查看别人对同一问题的不同解法</li><li><a href="http://onlywei.github.io/explain-git-with-d3/" title="点击访问" target="_blank" rel="external">Visualizing Git Concepts with D3</a>：用图形化的教程教你使用一些基础的git命令</li><li><a href="http://www.jobbole.com/" title="点击访问" target="_blank" rel="external">伯乐在线</a></li><li><a href="https://www.creative-tim.com/" title="点击访问" target="_blank" rel="external">CreativeTim</a>：很多网站和管理后台的模板</li><li>★<a href="https://carbon.now.sh/" title="点击访问" target="_blank" rel="external">Carbon</a>：生成一张代码高亮图片，很漂亮，适合插入到网站和博客中</li><li><a href="http://resume.github.io/" title="点击访问" target="_blank" rel="external">GitHub Resume</a>：输入github名，自动生成一个简单的简历页</li><li><a href="https://js.coach/" title="点击访问" target="_blank" rel="external">js coach</a>：js开源库目录</li><li><a href="http://www.feweekly.com/issues" title="点击访问" target="_blank" rel="external">前端周刊</a></li><li>★<a href="https://www.easy-mock.com/login" title="点击访问" target="_blank" rel="external">EasyMock</a>：更方便地模拟数据</li><li><a href="https://material.io/icons/" title="点击访问" target="_blank" rel="external">MaterialIcon</a>：Material Design Icon</li><li><a href="https://tutorialzine.com/articles" title="点击访问" target="_blank" rel="external">tutorialzine</a>：前端文章</li><li>★<a href="http://www.w3cplus.com/" title="点击访问" target="_blank" rel="external">W3CPlus</a>：w3cplus_引领web前沿，打造前端精品教程</li><li><a href="https://www.helloweba.com/" title="点击访问" target="_blank" rel="external">HelloWeba</a>：又是前端文章</li><li><a href="http://youarelistening.to/" target="_blank" rel="external">http://youarelistening.to</a>: 好像是在线听美国的广播电台，在知乎上看到的</li><li><a href="http://geektyper.com/" target="_blank" rel="external">http://geektyper.com</a>：随便乱敲，屏幕会显示一段一段代码或窗口，看起来跟黑客一样，纯属装逼</li><li><a href="http://www.tuling123.com/" target="_blank" rel="external">http://www.tuling123.com</a>：聊天机器人，可以接入公众号、qq、网页等</li><li><a href="https://sentry.io/welcome/" target="_blank" rel="external">sentry.io</a>：收集错误报告，帮助开发人员实时监控和修复崩溃</li><li>★<a href="https://smallpdf.com/cn" target="_blank" rel="external">smallpdf</a>：一站式处理pdf</li><li><a href="http://overapi.com/" target="_blank" rel="external">overapi</a>：各大语言和各种框架的API介绍</li><li><a href="http://www.it-ebooks.info/" target="_blank" rel="external">it-ebooks</a>：可以下载很多it相关的书籍</li><li><a href="https://ui8.net/category/all" target="_blank" rel="external">UI8</a>：很多设计模板</li><li>★<a href="http://repository-hunter.herokuapp.com" target="_blank" rel="external">github hunter</a>：统计github上的一些信息，可以查指定名字的信息，还有一些趣事集锦，还可以生成你的贡献图</li><li><a href="http://www.hongkiat.com/blog/" target="_blank" rel="external">HONGKIAT</a>：汇集各种设计和灵感</li><li>★★<a href="https://gigabook.com/tools" target="_blank" rel="external">Free Web Developer Tools by GigaBook</a>：各种网页开发工具，很全很强大</li><li><a href="https://www.lanhuapp.com/" target="_blank" rel="external">蓝湖 - 产品设计的协作平台</a>：适合团队设计</li><li><a href="http://www.biaonimeia.com/" target="_blank" rel="external">标你妹啊</a>：标你妹啊是新一代全自动化的标注工具，通过分析psd文件，自动创建图层、字体等元素的数据信息。</li><li><a href="https://visualgo.net" target="_blank" rel="external">visualgo</a>：演示算法</li><li><a href="https://www.interviewcake.com/" target="_blank" rel="external">interviewcake</a>：I will teach you to be good at programming interviews</li><li>★<a href="http://www.css88.com" target="_blank" rel="external">http://www.css88.com</a> ：WEB前端开发 - 专注前端开发，关注用户体验 - 专注前端开发，关注用户体验</li><li><a href="http://www.jsnice.org" target="_blank" rel="external">http://www.jsnice.org</a> ：反编译压缩的js代码，更容易阅读理解</li><li><a href="https://www.cloudboost.io" target="_blank" rel="external">https://www.cloudboost.io</a> :快速构建app</li><li><a href="https://css3gen.com/" target="_blank" rel="external">css3gen</a>：CSS3Gen可让您轻松生成有用的CSS3片段，并将其直接复制到您的项目中</li><li><a href="http://learningthreejs.com" target="_blank" rel="external">http://learningthreejs.com</a> ：学习three.js</li><li><a href="http://javascript-puzzlers.herokuapp.com" target="_blank" rel="external">http://javascript-puzzlers.herokuapp.com</a> ：测试一下你是否真的懂了js，共44道题</li><li>★javascript周刊<a href="http://javascriptweekly.com/issues" target="_blank" rel="external">http://javascriptweekly.com/issues</a> ：英文网站</li><li><a href="http://bennettfeely.com/cssynth" target="_blank" rel="external">http://bennettfeely.com/cssynth</a> ：生成卡片加载动画</li><li>★<a href="https://www.minimamente.com/example/gradient-generator/" target="_blank" rel="external">css 生成渐变色代码</a></li><li>★<a href="https://gtmetrix.com/" target="_blank" rel="external">GTmetrix 网站测试</a>：对网站进行评估，并给出优化的建议</li><li>★<a href="https://developers.google.com/speed/pagespeed/insights/?hl=zh-CN" target="_blank" rel="external">PageSpeed Tools 谷歌站点分析工具</a>：也是对网站进行评估，并给出优化的建议</li><li><a href="https://codeburst.io/" target="_blank" rel="external">CodeBurst</a>：前端博客</li><li><a href="http://hitokoto.cn/" target="_blank" rel="external">Hitokoto - 一言</a>：一言指的就是一句话，可以是动漫中的台词，也可以是网络上的各种小段子。或是感动，或是开心，有或是单纯的回忆。</li><li><a href="https://www.invisionapp.com/feature/inspect?ref=muzli" target="_blank" rel="external">InvisionApp</a>：A magical new design to development workflow with Inspect</li><li><a href="https://webflow.com/" target="_blank" rel="external">Webflow</a>：Webflow gives designers and developers the power to design, build, and launch responsive websites visually, while writing clean, semantic code for you.</li><li><a href="https://www.sekai.co/trust/" target="_blank" rel="external">信任的进化</a>：有趣的游戏，通过博弈论来讲解”不信任”的原因</li><li><a href="https://ipfs.io/" target="_blank" rel="external">IPFS网络</a>：IPFS是一个点对点的超媒体协议，使网页更快，更安全，更开放。</li><li><a href="http://www.debugrun.com/" target="_blank" rel="external">DebugRun.com</a>：编程语言帮助文档 - 一个只有码农看得懂的网站 -</li></ul><h2 id="收藏库"><a href="#收藏库" class="headerlink" title="收藏库"></a>收藏库</h2><ul><li><p><a href="https://apoorv.pro/lozad.js/" target="_blank" rel="external">Lozad.js</a>：懒加载库</p></li><li><p><a href="https://tabrisjs.com" target="_blank" rel="external">https://tabrisjs.com</a> ：Tabris.js是一个移动框架，可让您从完全用JavaScript编写的单一代码库中开发原生iOS和Android应用程序</p></li><li><p><a href="https://github.com/oneuijs/You-Dont-Need-jQuery/blob/master/README.zh-CN.md" target="_blank" rel="external">You-Dont-Need-jQuery</a>：本项目总结了大部分 jQuery API 替代的方法</p></li><li><p>★<a href="http://lodashjs.com/" target="_blank" rel="external">lodash</a>：这是一个具有一致接口、模块化、高性能等特性的 JavaScript 工具库</p></li><li><p>★<a href="http://www.css88.com/doc/underscore" target="_blank" rel="external">underscore.js</a>：Underscore一个JavaScript实用库，提供了一整套函数式编程的实用功能，但是没有扩展任何JavaScript内置对象</p></li><li><p><a href="https://github.com/alvarcarto/url-to-pdf-api" target="_blank" rel="external">url-to-pdf-api</a>：网页生成pdf的API</p></li><li><p><a href="http://github.hubspot.com/odometer/" target="_blank" rel="external">Odometer</a>：Odometer是一个用于平滑过渡数字的Javascript和CSS库</p></li><li><p><a href="http://daniel-lundin.github.io/snabbt.js/" target="_blank" rel="external">snabbt.js</a>：snabbt.js是一个简约的JavaScript动画库。它专注于移动事物。它会翻译，旋转，缩放，扭曲和调整元素的大小。</p></li><li><p><a href="https://github.com/lukehaas/css-loaders" target="_blank" rel="external">css-loaders</a>：这是一个使用CSS动画的loading spinners集合</p></li><li><p><a href="http://force-js.com/" target="_blank" rel="external">Force.js</a>：The easy way to scroll and animate your page</p></li><li><p><a href="https://ionicframework.com/" target="_blank" rel="external">Ionic</a>：Build amazing native and progressive web apps with open web technologies</p></li><li><p><a href="https://hyperapp.js.org/" target="_blank" rel="external">hyperapp</a>：1 KB JavaScript library for building frontend applications</p></li><li><p><a href="http://shopify.github.io/js-buy-sdk/" target="_blank" rel="external">js-buy-sdk</a>：JS Buy SDK是一个轻量级库，可以让您在任何网站上构建电子商务</p></li><li><p><a href="https://shopify.github.io/draggable/" target="_blank" rel="external">draggable.js</a>：a lightweight, responsive, modern drag &amp; drop library</p></li><li><p>★<a href="http://momentjs.cn/" target="_blank" rel="external">moment.js</a>：JavaScript 日期处理类库</p></li><li><p><a href="http://fian.my.id/Waves/" target="_blank" rel="external">Waves</a>：Click effect inspired by Google’s Material Design</p></li><li><p><a href="http://learningthreejs.com/blog/2011/08/14/dat-gui-simple-ui-for-demos/" target="_blank" rel="external">dat-gui-demos</a>：<a href="https://github.com/dataarts/dat.gui" target="_blank" rel="external">Dat.gui</a> is a GUI widget for your demos. It provide way for the user to set parameters of the demo to play with it. It is simple to code, yet cool and minimalist on the screen.</p></li><li><p><a href="http://todomvc.com" target="_blank" rel="external">http://todomvc.com</a> ：Helping you select an MV* framework</p></li><li><p><a href="https://hnpwa.com" target="_blank" rel="external">https://hnpwa.com</a> ：Hacker News readers as Progressive Web Apps</p></li><li><p><a href="https://alvarotrigo.com/fullPage/" target="_blank" rel="external">fullPage.js</a>：Create Beautiful Fullscreen Scrolling Websites</p></li><li><p><a href="https://alvarotrigo.com/multiScroll" target="_blank" rel="external">multiScroll.js</a>：Create divided multi-scrolling pages</p></li><li><p><a href="http://createjs.com/" target="_blank" rel="external">Create js</a>：A suite of modular libraries and tools which work together or independently to enable rich interactive content on open web technologies via HTML5</p></li><li><p><a href="http://c3js.org" target="_blank" rel="external">http://c3js.org</a> ：D3-based reusable chart library</p></li><li><p>★★<a href="https://d3js.org" target="_blank" rel="external">D3</a> ：D3.js is a JavaScript library for manipulating documents based on data，巨强的图表库</p></li><li><p>★<a href="http://echarts.baidu.com/index.html" target="_blank" rel="external">Echarts</a>：百度出品的图表库，配置很简单，文档很全</p></li><li><p>★<a href="https://antv.alipay.com/index.html" target="_blank" rel="external">G2 + G6</a>：阿里出品的图表库</p></li><li><p>★<a href="http://www.chartjs.org" target="_blank" rel="external">Chart js</a> ：Simple yet flexible JavaScript charting for designers &amp; developers</p></li><li><p><a href="https://www.highcharts.com/" target="_blank" rel="external">Highcharts</a>：Highcharts makes it easy for developers to set up interactive charts in their web pages</p></li><li><p><a href="https://naver.github.io/billboard.js/" target="_blank" rel="external">billboard.js</a>：Re-usable, easy interface JavaScript chart library, based on D3 v4+</p></li><li><p><a href="http://recharts.org/#/zh-CN" target="_blank" rel="external">Recharts</a>：基于 React 的组合式图表，适合做简单轻量的图表</p></li><li><p><a href="https://display.js.org" target="_blank" rel="external">https://display.js.org</a> ：A simple JavaScript framework for building ambitious UIs</p></li><li><p><a href="http://www.pixijs.com" target="_blank" rel="external">Pixi JS</a> ：Create beautiful digital content with the fastest, most flexible 2D WebGL renderer</p></li><li><p><a href="https://gka.js.org/#/?id=gka" target="_blank" rel="external">GKA</a>：简单的、高效的帧动画生成工具</p></li><li><p><a href="https://alloyteam.github.io/curvejs/" target="_blank" rel="external">curvejs</a>：Made curve a dancer in HTML5 canvas - 魔幻线条，AllolyTeam出品<a href="https://alloyteam.github.io/" target="_blank" rel="external">https://alloyteam.github.io/</a></p></li><li><p>★<a href="http://thednp.github.io/kute.js/" target="_blank" rel="external">kute.js</a>：非常漂亮的动画库</p></li><li><p>★<a href="http://animejs.com/" target="_blank" rel="external">animejs</a>：js动画库</p></li><li><p><a href="http://dynamicsjs.com/" target="_blank" rel="external">dynamicsjs</a>：js基于物理的动画库</p></li><li><p><a href="http://bonsaijs.org/" target="_blank" rel="external">bonsaijs</a>：A lightweight graphics library with an intuitive graphics API and an SVG renderer</p></li><li><p><a href="http://lazylinepainter.info/" target="_blank" rel="external">lazylinepainter</a>：A JQUERY PLUGIN FOR SVG PATH ANIMATION</p></li><li><p><a href="http://anijs.github.io/" target="_blank" rel="external">AniJS</a>：A Library to Raise your Web Design without Coding</p></li><li><p><a href="http://bouncejs.com/" target="_blank" rel="external">bouncejs</a>：Bounce.js is a tool and JS library that lets you create beautiful CSS3 powered animations</p></li><li><p><a href="https://www.minimamente.com/example/magic_animations/" target="_blank" rel="external">Magic Animations CSS3</a>：漂亮的css动画</p></li><li><p><a href="https://daneden.github.io/animate.css/" target="_blank" rel="external">Animate.css</a></p></li><li><p>★<a href="https://threejs.org/" target="_blank" rel="external">three.js</a>：js 3D库</p></li><li><p><a href="https://varin6.github.io/Hover-Buttons/" target="_blank" rel="external">Hover-Buttons</a>：button hover特效</p></li><li><p>★<a href="http://brm.io/matter-js/" target="_blank" rel="external">matter-js</a>：Matter.js is a 2D physics engine for the web，js平面物理引擎库</p></li><li><p>★★<a href="http://iscrolljs.com/" target="_blank" rel="external">iScroll.js</a>：iScroll is a high performance, small footprint, dependency free, multi-platform javascript scroller.</p></li></ul><blockquote><p>如果你在这找到好用的东西，恭喜！如果你有好用的东西分享，欢迎在评论中告诉我！</p></blockquote><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Share </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 应用 </tag>
            
            <tag> 插件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Hexo主题Yelee]]></title>
      <url>/2017/Hexo.html</url>
      <content type="html"><![CDATA[<!-- build time:Tue Oct 31 2017 14:16:07 GMT+0800 (CST) --><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前使用的是next主题，虽然next很强大，但是next的样式并不是我很喜欢的类型。<br>后来无意间在别人博客上看到这种双栏主题，而且还有各种动画效果，作为颜控立马被吸引了，然后发现类似的双栏博客有好几个，像yilia、spfk、yelee等。<br>后者好像都是在yilia的基础上修改的，而我选择了yelee，因为我更喜欢其色调，并且作者很贴心地写了<a href="http://moxfive.coding.me/yelee" title="Yelee主题使用说明" target="_blank" rel="external">gitbook操作指南</a>，这对刚接触博客的小白我来说真是福音。<br>感谢作者提供了这么好的主题，后来使用上碰到的一些问题和修改，我都一一列举在下面，以后如果还有修改我还会更新。</p><hr><p>按照gitbook的教程我完成博客的基础配置，效果基本上已经很满足了，但是测试上发现有些小小小问题，作为强迫症，修改之。</p><h2 id="代码块前后留白问题："><a href="#代码块前后留白问题：" class="headerlink" title="代码块前后留白问题："></a>代码块前后留白问题：</h2><p>代码块中的代码空行消失，都被挤到前后了，issue上有人解决了：<br><img src="/images/hexo/CodeSpace.png" alt="代码显示错位"></p><hr><p>然后是页面跳转问题，我希望的是本站内的链接和标签都在本窗口打开，外站的都在新标签页打开，<br>但是像搜索结果和迷你文章列表等点击会在新标签页打开，得做如下修改：</p><h2 id="取消搜索结果跳转新标签页："><a href="#取消搜索结果跳转新标签页：" class="headerlink" title="取消搜索结果跳转新标签页："></a>取消搜索结果跳转新标签页：</h2><p><strong>目标文件：themes/yelee/source/js/search.js</strong></p><p>找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// show search results</span></div><div class="line"><span class="keyword">if</span> (isMatch) &#123;</div><div class="line">str += <span class="string">"&lt;li&gt;&lt;a href='"</span>+ data_url +<span class="string">"' class='search-result-title' target='_blank'&gt;"</span>+ <span class="string">"&gt; "</span> + data_title +<span class="string">"&lt;/a&gt;"</span>;</div></pre></td></tr></table></figure><p>删除 <code>target=&#39;_blank&#39;</code>字段</p><hr><h2 id="取消迷你文章在新窗口打开"><a href="#取消迷你文章在新窗口打开" class="headerlink" title="取消迷你文章在新窗口打开"></a>取消迷你文章在新窗口打开</h2><p><img src="/images/hexo/miniArchives.png" alt="迷你文章列表"></p><p><strong>目标文件：themes/yelee/layout/_partial/open-in-new-tab.ejs</strong></p><p>找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (theme.open_in_new.mini_archives) &#123; %&gt; miniArchives: <span class="string">"a.post-list-link"</span>, &lt;% &#125; %&gt;</div></pre></td></tr></table></figure><p>将<code>theme.open_in_new.mini_archives</code>直接改为false</p><p>我在 _config.yml 里设置 mini_archives 好像不起作用</p><hr><p><strong>下面的是我自己的一些修改，如有需要可供参考！</strong></p><blockquote><p>我的所有修改记录都放在仓库里了：<a href="https://github.com/wangriyu/hexo-theme-yelee" title="点击访问" target="_blank" rel="external">github</a></p></blockquote><h2 id="添加文章字数统计"><a href="#添加文章字数统计" class="headerlink" title="添加文章字数统计"></a>添加文章字数统计</h2><p>用到的插件是<a href="https://github.com/willin/hexo-wordcount" title="点击访问" target="_blank" rel="external">hexo-wordcount</a></p><p>安装很简单，一条命令<code>npm i --save hexo-wordcount</code>即可解决，<br>下面的配置是信息显示位置和样式，仅供参考，也可以自行修改</p><p><strong>目标文件：themes/yelee/layout/_partial/post/tag.ejs</strong><br>修改如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (post.tags &amp;&amp; post.tags.length)&#123; %&gt;</div><div class="line">-    &lt;div class="article-tag tagcloud"&gt;</div><div class="line">+    &lt;div class="article-tag tagcloud" style="display: flex; flex-wrap: wrap"&gt;</div><div class="line">        &lt;%-</div><div class="line">          list_tags(post.tags, &#123;</div><div class="line">            show_count: false,</div><div class="line">            class: 'article-tag'</div><div class="line">          &#125;)</div><div class="line">        %&gt;</div><div class="line">+       &lt;span class="post-count"&gt;总字数&lt;%= wordcount(post.content) %&gt;&lt;/span&gt;</div><div class="line">+       &lt;span class="post-count"&gt;预计阅读&lt;%= min2read(post.content) %&gt;分钟&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure><p>添加样式：<br><strong>目标文件：themes/yelee/source/css/_partial/tagcloud.styl</strong></p><p>找到</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.article-tag::before,</div><div class="line">.article-category::before</div><div class="line">    float left</div><div class="line">    color #999</div><div class="line">    font base-font-size FontAwesome</div><div class="line">    margin-right 5px</div><div class="line">    margin-top (1/3)rem</div><div class="line"></div><div class="line">.article-tag::before</div><div class="line">    content "\f02b"</div><div class="line">    margin-left 1em</div><div class="line"></div><div class="line">.article-category::before</div><div class="line">    content "\f02d"</div></pre></td></tr></table></figure><p>在<code>.article-category::before</code>前插入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.article-tag</span></div><div class="line">    <span class="selector-class">.article-tag-list</span></div><div class="line">        <span class="selector-tag">display</span> <span class="selector-tag">flex</span></div><div class="line">        <span class="selector-tag">flex-wrap</span> <span class="selector-tag">wrap</span></div><div class="line">    <span class="selector-tag">span</span></div><div class="line">        <span class="selector-tag">cursor</span> <span class="selector-tag">pointer</span></div><div class="line">        <span class="selector-tag">line-height</span> 29<span class="selector-tag">px</span></div><div class="line">        <span class="selector-tag">font-size</span> 13<span class="selector-tag">px</span></div><div class="line">        <span class="selector-tag">color</span> <span class="selector-id">#aaa</span></div><div class="line">        &amp;<span class="selector-pseudo">:before</span></div><div class="line">            <span class="selector-tag">content</span> "\27<span class="selector-tag">A4</span>"</div><div class="line">            <span class="selector-tag">margin-left</span> 1<span class="selector-tag">em</span></div></pre></td></tr></table></figure><p>content: “\27A4” 是unicode图标编码，可以换成其他的</p><p><a href="https://unicode-table.com/cn" title="点击访问" target="_blank" rel="external">unicode图标</a></p><p><a href="http://fontawesome.io/icons" title="点击访问" target="_blank" rel="external">Font Awesome Icon</a></p><hr><h2 id="添加音乐播放器"><a href="#添加音乐播放器" class="headerlink" title="添加音乐播放器"></a>添加音乐播放器</h2><p>我知道的有三种形式、两种样式的播放器添加方式</p><ul><li>网易云<code>iframe</code>标签<br>到网易云网页上找喜欢的歌，点击生产外链播放器，获取<code>iframe</code>标签代码，粘贴到想放的地方即可，也可以直接贴在markdown文本中，<br>我就是这样在每篇文章中插入一首歌;<br>如果是歌单，因为限制问题不能正常打开生产外链播放器的网页，需要以下操作，右键点击歌单的<code>生成外链播放器</code></li></ul><p><img src="/images/hexo/NeteasePlayer.png" alt="网易云歌单"></p><p>点击审查元素，图中的inspect，开发者工具会定位到该标签，data-href的最后那串数字就是我们的歌单ID，这个ID后面还要用到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a data-action=<span class="string">"outchain"</span> data-href=<span class="string">"/outchain/0/604161338/"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"des s-fc7"</span>&gt;生成外链播放器&lt;<span class="regexp">/a&gt;</span></div></pre></td></tr></table></figure><p>将浏览器中的网址改成 <a href="https://music.163.com/#/outchain/0/604161338/" target="_blank" rel="external">https://music.163.com/#/outchain/0/604161338/</a> ，#后面就是上面得到的data-href，<br>刷新页面就可以看见生产外链播放器的网页了</p><ul><li>使用aplayer插件<a href="https://github.com/MoePlayer/hexo-tag-aplayer" title="点击访问" target="_blank" rel="external">hexo-tag-aplayer</a></li></ul><p>安装：<code>npm install --save hexo-tag-aplayer</code><br>使用：<code>{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}</code><br>我没用过这个方法，好像这个插件得用音乐文件或者指定地址，网易云的ID可能没用</p><ul><li>使用aplayer库</li></ul><p>在主题的_config.yml文件底部添加两个库：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CDN</div><div class="line">  ...</div><div class="line"><span class="addition">+  aplayer: //cdn.bootcss.com/aplayer/1.6.0/APlayer.min.js</span></div><div class="line"><span class="addition">+  player: //api.i-meto.com/music/player.js</span></div></pre></td></tr></table></figure><p><strong>目标文件：themes/yelee/layout/_partial/head.ejs</strong><br>在jquery后面导入库</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script src="&lt;%- theme.CDN.jquery %&gt;"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="&lt;%- theme.CDN.clipboard %&gt;"&gt;&lt;/script&gt;</div><div class="line"><span class="addition">+ &lt;script src="&lt;%- theme.CDN.aplayer %&gt;"&gt;&lt;/script&gt;</span></div><div class="line"><span class="addition">+ &lt;script src="&lt;%- theme.CDN.player %&gt;"&gt;&lt;/script&gt;</span></div></pre></td></tr></table></figure><p>使用：粘贴以下代码生成播放器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div</div><div class="line">  <span class="class"><span class="keyword">class</span></span>=<span class="string">"aplayer"</span></div><div class="line">  data-id=<span class="string">"883067320"</span>    <span class="comment">// 歌曲/专辑/歌单 ID</span></div><div class="line">  data-server=<span class="string">"netease"</span>  <span class="comment">// 音乐平台：netease、tencent、xiami、kugou、baidu</span></div><div class="line">  data-type=<span class="string">"playlist"</span>   <span class="comment">// 类型：song、album、playlist、search</span></div><div class="line">  data-mode=<span class="string">"random"</span>     <span class="comment">// 播放模式：random、single、circulation、order</span></div><div class="line">  data-autoplay=<span class="string">"true"</span>&gt;  <span class="comment">// 自动播放</span></div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure><h2 id="简化添加音乐的方法"><a href="#简化添加音乐的方法" class="headerlink" title="简化添加音乐的方法"></a>简化添加音乐的方法</h2><p>我喜欢在每篇文章放不同的歌曲，如果按上面的方法添加，每次都得在文章前粘贴一段代码，而且主页加载时也会加载两个CDN库，影响加载速度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div</div><div class="line">  <span class="class"><span class="keyword">class</span></span>=<span class="string">"aplayer"</span></div><div class="line">  data-id=<span class="string">"883067320"</span> <span class="comment">// 歌曲ID</span></div><div class="line">  data-server=<span class="string">"netease"</span></div><div class="line">  data-type=<span class="string">"playlist"</span></div><div class="line">  data-mode=<span class="string">"random"</span></div><div class="line">  data-autoplay=<span class="string">"true"</span>&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>下面简化一下步骤</p><ol><li>修改<code>/themes/yelee/layout/_partial/article.ejs</code>如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;article-entry&quot; itemprop=&quot;articleBody&quot;&gt;</div><div class="line">  &lt;% if (index &amp;&amp; (post.description || post.excerpt))&#123; %&gt;</div><div class="line">      &lt;% if (post.description)&#123; %&gt;</div><div class="line">          &lt;%- post.description %&gt;</div><div class="line">      &lt;% &#125; else &#123; %&gt;</div><div class="line">          &lt;%- post.excerpt %&gt;</div><div class="line">      &lt;% &#125; %&gt;</div><div class="line">  &lt;% &#125; else &#123; %&gt;</div><div class="line">      &lt;% if (is_page())&#123; %&gt;</div><div class="line">          &lt;%- partial(&apos;_partial/page&apos;) %&gt;</div><div class="line">      &lt;% &#125; %&gt;</div><div class="line">+   &lt;% if (post.music)&#123; %&gt;</div><div class="line">+       &lt;%- partial(&apos;post/player&apos;) %&gt;</div><div class="line">+   &lt;% &#125; %&gt;</div><div class="line">    &lt;%- post.content %&gt;</div><div class="line">  &lt;% &#125; %&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><ol><li>在<code>/themes/yelee/layout/post/</code>下创建<code>player.ejs</code>文件</li></ol><p>player:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;&lt;%- theme.CDN.aplayer %&gt;&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;&lt;%- theme.CDN.player %&gt;&quot;&gt;&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;div class=&quot;aplayer&quot; data-id=&quot;&lt;%= post.music %&gt;&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-autoplay=&quot;true&quot;&gt;&lt;/div&gt;</div><div class="line">&lt;div style=&quot;height: 16px&quot;&gt;&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">  // 去除移动端的播放器, 减少流量消耗</div><div class="line">  if ($(&quot;.left-col&quot;).css(&quot;display&quot;) === &quot;none&quot;) &#123;</div><div class="line">    $(&quot;.aplayer&quot;).remove();</div><div class="line">  &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure><p>这里引入了cdn库，如果上文在head也引入这两个文件，那可以把head里的删了</p><ol><li>每篇文章要加音乐时只需在顶部引入<code>music: 歌曲ID</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line"></div><div class="line">title: 使用Hexo主题Yelee</div><div class="line">date: 2017-08-24</div><div class="line">description: &quot;更换博客主题Yelee的前前后后&quot;</div><div class="line">top: true</div><div class="line">music: 729638</div><div class="line">categories: Web</div><div class="line">tags: Yelee</div><div class="line"></div><div class="line">---</div></pre></td></tr></table></figure><h2 id="修改头像动画"><a href="#修改头像动画" class="headerlink" title="修改头像动画"></a>修改头像动画</h2><p><strong>目标文件：themes/yelee/source/css/_partial/main.styl</strong></p><p>修改头像为旋转效果：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">    ...</div><div class="line">    // animation: profilepic .15s linear infinite alternate;</div><div class="line">    // -webkit-animation: profilepic .15s linear infinite alternate;</div><div class="line">    animation: profilepic 5s linear infinite;</div><div class="line">    -webkit-animation: profilepic 5s linear infinite; // profilepic动画，周期5秒，速度不变，无限循环</div><div class="line">&#125;</div><div class="line">@keyframes profilepic &#123;</div><div class="line">    0% &#123;</div><div class="line">        // right: 4px;</div><div class="line">        // top: 1x;</div><div class="line">        transform: rotate(360deg);</div><div class="line">    &#125;</div><div class="line">    100% &#123;</div><div class="line">        // right: 0px;</div><div class="line">        // top: -1px;</div><div class="line">        transform: rotate(0deg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>animation: name duration timing-function delay iteration-count direction;</code><br>animation是CSS动画属性：第一个参数是用@keyframes定义的动画，第二个参数是单次动画持续时间，<br>第三个是动画的速度曲线，第四个参数是动画开始之前的延迟，第五个是动画应该播放的次数，最后一个规定是否应该轮流反向播放动画</p><h2 id="添加打赏"><a href="#添加打赏" class="headerlink" title="添加打赏"></a>添加打赏</h2><p>给yelee的配置文件<code>_config.yml</code>加上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 打赏</div><div class="line"># 将on改为false去掉打赏</div><div class="line">donate:</div><div class="line">  on: true</div><div class="line">  wechatpay: /img/wechatpay.jpg</div><div class="line">  alipay: /img/alipay.jpg</div></pre></td></tr></table></figure><p><strong>目标文件：themes/yelee/layout/_partial/left-col.ejs</strong><br>找到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;nav <span class="class"><span class="keyword">class</span></span>=<span class="string">"header-nav"</span>&gt;</div><div class="line">    &lt;ul class="social"&gt;</div><div class="line">        &lt;% for (var i in theme.subnav)&#123; %&gt;</div><div class="line">            &lt;a class="fa &lt;%= i %&gt;" href="&lt;%- url_for(theme.subnav[i]) %&gt;" title="&lt;%= i %&gt;"&gt;&lt;/a&gt;</div><div class="line">        &lt;%&#125;%&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;<span class="regexp">/nav&gt;</span></div></pre></td></tr></table></figure><p>在<code>&lt;/ul&gt;</code>下添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (theme.donate.on) &#123; %&gt;</div><div class="line">    &lt;ul class="social"&gt;</div><div class="line">        &lt;div style="position: absolute; top: 95%; left: 50%; margin-left: -30px;"&gt;</div><div class="line">            &lt;p style="display: block"&gt;</div><div class="line">                &lt;a</div><div class="line">                    class="donateIcon"</div><div class="line">                    href="javascript:void(0)"</div><div class="line">                    onmouseout="</div><div class="line">                        var qr = document.getElementById('donate');</div><div class="line">                        qr.style.display='none';</div><div class="line">                    "</div><div class="line">                    onmouseenter="</div><div class="line">                        var qr = document.getElementById('donate');</div><div class="line">                        qr.style.display='block';</div><div class="line">                    "&gt;</div><div class="line">                    赏</div><div class="line">                &lt;/a&gt;</div><div class="line">            &lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure><p>在<code>left-col.ejs</code>文件末尾<code>&lt;/div&gt;</code>之前添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (theme.donate.alipay) &#123; %&gt;</div><div class="line">    &lt;div id="donate"&gt;</div><div class="line">        &lt;img id="alipay" src="&lt;%=theme.donate.alipay%&gt;" width="260px" alt="&lt;%=theme.author%&gt; Alipay"/&gt;</div><div class="line">        &lt;div class="triangle"&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure><p><strong>目标文件：themes/yelee/source/css/_partial/customise/social-icon.styl</strong><br>在顶部找到找到</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#header</span> <span class="selector-class">.header-nav</span> <span class="selector-class">.social</span></div><div class="line">    <span class="selector-tag">margin-top</span> 10<span class="selector-tag">px</span></div><div class="line">    <span class="selector-tag">text-align</span> <span class="selector-tag">center</span></div><div class="line">    <span class="selector-tag">font-family</span> <span class="selector-tag">Arial</span></div><div class="line">    <span class="selector-tag">a</span></div><div class="line">        <span class="selector-tag">width</span> <span class="selector-tag">base-font-size</span> + 21</div><div class="line">        <span class="selector-tag">height</span> @<span class="keyword">width</span></div><div class="line">        border-radius <span class="number">50%</span></div><div class="line">        margin <span class="number">0</span> <span class="number">2px</span> <span class="number">6px</span></div><div class="line">        vertical-align middle</div><div class="line">        font-size .<span class="number">66</span>*@width</div><div class="line">        line-height @width</div><div class="line">        text-align center</div><div class="line">        color white</div><div class="line">        background #<span class="number">6</span>f7170</div><div class="line">        opacity i-opacity</div><div class="line">        box-shadow <span class="number">1px</span> <span class="number">2px</span> <span class="number">2px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, .<span class="number">1</span>), <span class="number">1px</span> <span class="number">1px</span> <span class="number">3px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>, .<span class="number">3</span>)</div><div class="line">        &amp;:hover</div><div class="line">            opacity <span class="number">1</span></div><div class="line">            transform scale(<span class="number">1.1</span>)</div></pre></td></tr></table></figure><p>在<code>a</code>标签的样式后面加上</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.donateIcon</span></div><div class="line">    <span class="selector-tag">display</span> <span class="selector-tag">block</span></div><div class="line">    <span class="selector-tag">width</span> 56<span class="selector-tag">px</span></div><div class="line">    <span class="selector-tag">margin</span> <span class="selector-tag">auto</span></div><div class="line">    <span class="selector-tag">height</span> 56<span class="selector-tag">px</span></div><div class="line">    <span class="selector-tag">line-height</span> 56<span class="selector-tag">px</span></div><div class="line">    <span class="selector-tag">font-size</span> 20<span class="selector-tag">px</span></div><div class="line">    <span class="selector-tag">color</span> <span class="selector-id">#fff</span></div><div class="line">    <span class="selector-tag">border</span> <span class="selector-tag">none</span></div><div class="line">    <span class="selector-tag">background</span> <span class="selector-id">#4094c7</span></div><div class="line">    <span class="selector-tag">border-radius</span> 50%</div><div class="line">    <span class="selector-tag">text-align</span> <span class="selector-tag">center</span></div><div class="line">    <span class="selector-tag">-webkit-box-shadow</span> 0 2<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.16</span>), 0 2<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.12</span>)</div><div class="line">    <span class="selector-tag">box-shadow</span> 0 2<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.16</span>), 0 2<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> 0 <span class="selector-tag">rgba</span>(0,0,0,0<span class="selector-class">.12</span>)</div><div class="line">    <span class="selector-tag">-webkit-transition</span> 0<span class="selector-class">.4s</span> <span class="selector-tag">ease-in-out</span></div><div class="line">    <span class="selector-tag">-moz-transition</span> 0<span class="selector-class">.4s</span> <span class="selector-tag">ease-in-out</span></div><div class="line">    <span class="selector-tag">-ms-transition</span> 0<span class="selector-class">.4s</span> <span class="selector-tag">ease-in-out</span></div><div class="line">    <span class="selector-tag">transition</span> 0<span class="selector-class">.4s</span> <span class="selector-tag">ease-in-out</span></div></pre></td></tr></table></figure><p><strong>目标文件：themes/yelee/source/css/_partial/main.styl</strong><br>找到<code>intrude-less</code>并加上donate标签的样式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">.intrude-less &#123;</div><div class="line">    width: 76%;</div><div class="line">    text-align: center;</div><div class="line">    margin: 112px auto 0;</div><div class="line">+   #donate &#123;</div><div class="line">+       display: none;</div><div class="line">+       position: fixed;</div><div class="line">+       top: 312px;</div><div class="line">+       left: 20px;</div><div class="line">+       img &#123;</div><div class="line">+           border-radius: 5px;</div><div class="line">+       &#125;</div><div class="line">+       .triangle &#123;</div><div class="line">+           height: 0;</div><div class="line">+           width: 0;</div><div class="line">+           margin: -5px 0 0 85px;</div><div class="line">+           border-right: 45px solid transparent;</div><div class="line">+           border-left: 45px solid transparent;</div><div class="line">+           border-top: 30px solid #059FE7;</div><div class="line">+       &#125;</div><div class="line">+   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="修改移动端背景"><a href="#修改移动端背景" class="headerlink" title="修改移动端背景"></a>修改移动端背景</h2><p><strong>目标文件：themes/yelee/layout/_partial/background.ejs</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (theme.background_image)&#123; %&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    $(document).ready(function() &#123;</div><div class="line">      var iPad = window.navigator.userAgent.indexOf('iPad');</div><div class="line">      if (iPad &gt; -1) &#123;</div><div class="line">        let bgColorList = ["#9db3f4", "#414141", "#e5a859", "#f5dfc6", "#c084a0", "#847e72", "#cd8390", "#996731"];</div><div class="line">        let bgColor = Math.ceil(Math.random() * (bgColorList.length - 1));</div><div class="line">        $("body").css(&#123;"background-color": bgColorList[bgColor], "background-size": "cover"&#125;);</div><div class="line">      &#125; else if ($(".left-col").css("display") === "none") &#123;</div><div class="line">        $("body").css(&#123;</div><div class="line">          "background-image": "url(&lt;%- theme.root_url %&gt;/background/mobile.jpg)",</div><div class="line">          "background-repeat": "no-repeat",</div><div class="line">          "background-attachment": "fixed",</div><div class="line">          "background-size": "cover"</div><div class="line">        &#125;)</div><div class="line">      &#125; else &#123;</div><div class="line">        var backgroundnum = &lt;%= theme.background_image %&gt;;</div><div class="line">        var backgroundimg = "url(&lt;%- theme.root_url %&gt;/background/bg-x.jpg)".replace(/x/gi, Math.ceil(Math.random() * backgroundnum));</div><div class="line">        $("body").css(&#123;</div><div class="line">          "background": backgroundimg,</div><div class="line">          "background-position": "0% 80%",</div><div class="line">          "background-attachment": "fixed",</div><div class="line">          "background-size": "cover"</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure><h2 id="修改列表显示的bug"><a href="#修改列表显示的bug" class="headerlink" title="修改列表显示的bug"></a>修改列表显示的bug</h2><p>bug如下：Expressions和xScope的前缀消失<br><img src="/images/hexo/list.png" alt="image"></p><p>markdown中编写无序列表时，比如”- [列表名]”, 如果列表名前两个字符含’x’, 则列表前缀消失</p><p>排查之后发现是main.js里对无序列表进行了判断，若出现”- [ ]”或者”- [x]”，则解析成复选框的样式，需要修改判断条件</p><p><strong>目标文件：themes/yelee/source/js/main.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Task lists in markdown</span></div><div class="line">$(<span class="string">'ul &gt; li'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> taskList = &#123;</div><div class="line">-       field: <span class="keyword">this</span>.textContent.substring(<span class="number">0</span>, <span class="number">2</span>),</div><div class="line">+       field: <span class="keyword">this</span>.textContent.substring(<span class="number">0</span>, <span class="number">3</span>),</div><div class="line">        <span class="attr">check</span>: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">-           <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(str);</div><div class="line">-           <span class="keyword">return</span> <span class="keyword">this</span>.field.match(re);</div><div class="line">+           <span class="keyword">return</span> <span class="keyword">this</span>.field === str;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="添加404文字特效"><a href="#添加404文字特效" class="headerlink" title="添加404文字特效"></a>添加404文字特效</h2><p>之前在CodePen上看到这个文字特效: <a href="https://codepen.io/Chokcoco/pen/RVxbWW?editors=1100" target="_blank" rel="external">https://codepen.io/Chokcoco/pen/RVxbWW?editors=1100</a><br>感觉很适合用来做404特效，便加到404页面，但原代码不能直接用，改了半天总算适配到自己的博客上，<a href="/pages/shake.html">点击查看效果</a></p><p>如果没有404页面，先用 Hexo 命令新建一个名为 404 的页面: <code>hexo new page 404</code></p><p>将<code>/source/404/index.md</code>文件的内容修改如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line"></div><div class="line">toc: false</div><div class="line">comments: false</div><div class="line">permalink: /404</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display: flex"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"whiteSide"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"error"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"errBefore"</span>&gt;</span>404 Not Found<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hgroup</span> <span class="attr">class</span>=<span class="string">"text-magic"</span>&gt;</span></div><div class="line">      404 Not Found</div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"white"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"errAfter"</span>&gt;</span>404 Not Found<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>修改样式: <code>themes/yelee/source/css/_partial/article.styl</code><br>在<code>.article-entry</code>子级中加上如下样式:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.error</span> &#123;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">top</span>: <span class="number">3px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.whiteSide</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">3px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">top</span>: <span class="number">3px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.text-magic</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%) <span class="built_in">skewX</span>(0deg);</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">6vw</span>;</div><div class="line">  <span class="attribute">font-family</span>: Raleway, Verdana, Arial, sans-serif;</div><div class="line">  <span class="attribute">animation</span>: skewX <span class="number">5s</span> ease-in infinite;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.white</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">4vw</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">3px</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">5</span> <span class="meta">!important</span>;</div><div class="line">  <span class="attribute">animation</span>: whiteMove <span class="number">3s</span> ease-out infinite;</div><div class="line">  <span class="attribute">mix-blend-mode</span>: luminosity;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.errBefore</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">6vw</span>;</div><div class="line">  <span class="attribute">font-family</span>: Raleway, Verdana, Arial, sans-serif;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 3vw);</div><div class="line">  <span class="attribute">left</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">0px</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">6vw</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(255, 0, 0, .9);</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">  <span class="attribute">animation</span>: redShadow <span class="number">1.5s</span> ease-in infinite;</div><div class="line">  <span class="attribute">-webkit-filter</span>: <span class="built_in">contrast</span>(200%);</div><div class="line">  <span class="attribute">text-shadow</span>: <span class="number">0.1px</span> <span class="number">0</span> <span class="number">0</span> red;</div><div class="line">  <span class="attribute">mix-blend-mode</span>: color-burn;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.errAfter</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">6vw</span>;</div><div class="line">  <span class="attribute">font-family</span>: Raleway, Verdana, Arial, sans-serif;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(50% - 3vw);</div><div class="line">  <span class="attribute">left</span>: -<span class="number">3px</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">6vw</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">2vw</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(0, 0, 0, .8);</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 255, .9);</div><div class="line">  <span class="attribute">animation</span>: redHeight <span class="number">3s</span> ease-out infinite;</div><div class="line">  <span class="attribute">-webkit-filter</span>: <span class="built_in">contrast</span>(200%);</div><div class="line">  <span class="attribute">mix-blend-mode</span>: hard-light;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">768px</span>) &#123;</div><div class="line">  <span class="selector-class">.errAfter</span> &#123;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">1px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.white</span> &#123;</div><div class="line">    <span class="attribute">top</span>: <span class="number">6vw</span>;</div><div class="line">    <span class="attribute">animation</span>: whiteMove <span class="number">3s</span> ease-out infinite;</div><div class="line">  &#125;</div><div class="line">  @<span class="keyword">keyframes</span> whiteMove &#123;</div><div class="line">    8%  &#123; <span class="attribute">top</span>: <span class="number">5vw</span>;   &#125;</div><div class="line">    20% &#123; <span class="attribute">top</span>: <span class="number">6.6vw</span>; &#125;</div><div class="line">    45% &#123; <span class="attribute">top</span>: <span class="number">5.5vw</span>; &#125;</div><div class="line">    60% &#123; <span class="attribute">top</span>: <span class="number">4vw</span>;   &#125;</div><div class="line">    88% &#123; <span class="attribute">top</span>: <span class="number">5.5vw</span>; &#125;</div><div class="line">    90% &#123; <span class="attribute">top</span>: <span class="number">3.5vw</span>; &#125;</div><div class="line">    92% &#123; <span class="attribute">top</span>: <span class="number">4vw</span>;   &#125;</div><div class="line">    94% &#123; <span class="attribute">top</span>: <span class="number">5.6vw</span>; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">425px</span>) &#123;</div><div class="line">  <span class="selector-class">.error</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.whiteSide</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.white</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">12vw</span>;</div><div class="line">    <span class="attribute">animation</span>: whiteMove <span class="number">3s</span> ease-out infinite;</div><div class="line">  &#125;</div><div class="line">  @<span class="keyword">keyframes</span> whiteMove &#123;</div><div class="line">    8%  &#123; <span class="attribute">top</span>: <span class="number">6vw</span>;   &#125;</div><div class="line">    20% &#123; <span class="attribute">top</span>: <span class="number">7.2vw</span>; &#125;</div><div class="line">    45% &#123; <span class="attribute">top</span>: <span class="number">9vw</span>;   &#125;</div><div class="line">    60% &#123; <span class="attribute">top</span>: <span class="number">6vw</span>;   &#125;</div><div class="line">    88% &#123; <span class="attribute">top</span>: <span class="number">3vw</span>;   &#125;</div><div class="line">    90% &#123; <span class="attribute">top</span>: <span class="number">7vw</span>;   &#125;</div><div class="line">    92% &#123; <span class="attribute">top</span>: <span class="number">4vw</span>;   &#125;</div><div class="line">    94% &#123; <span class="attribute">top</span>: <span class="number">7.2vw</span>; &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> redShadow &#123;</div><div class="line">  20% &#123;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">1px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">3vw</span>;</div><div class="line">  &#125;</div><div class="line">  60% &#123;</div><div class="line">    <span class="attribute">left</span>: <span class="number">2px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">0.1vw</span>;</div><div class="line">  &#125;</div><div class="line">  100% &#123;</div><div class="line">    <span class="attribute">left</span>: -<span class="number">2px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">4vw</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> redHeight &#123;</div><div class="line">  20% &#123; <span class="attribute">height</span>: <span class="number">3.5vw</span>; &#125;</div><div class="line">  35% &#123; <span class="attribute">height</span>: <span class="number">1vw</span>;   &#125;</div><div class="line">  50% &#123; <span class="attribute">height</span>: <span class="number">3.5vw</span>; &#125;</div><div class="line">  60% &#123; <span class="attribute">height</span>: <span class="number">2vw</span>;   &#125;</div><div class="line">  70% &#123; <span class="attribute">height</span>: <span class="number">3vw</span>;   &#125;</div><div class="line">  80% &#123; <span class="attribute">height</span>: <span class="number">2vw</span>;   &#125;</div><div class="line">  99% &#123; <span class="attribute">height</span>: <span class="number">0vw</span>;   &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> whiteMove &#123;</div><div class="line">  8%  &#123; <span class="attribute">top</span>: <span class="number">3vw</span>;   &#125;</div><div class="line">  20% &#123; <span class="attribute">top</span>: <span class="number">3.6vw</span>; &#125;</div><div class="line">  45% &#123; <span class="attribute">top</span>: <span class="number">4.5vw</span>; &#125;</div><div class="line">  60% &#123; <span class="attribute">top</span>: <span class="number">3vw</span>;   &#125;</div><div class="line">  88% &#123; <span class="attribute">top</span>: <span class="number">1.5vw</span>; &#125;</div><div class="line">  90% &#123; <span class="attribute">top</span>: <span class="number">3.5vw</span>; &#125;</div><div class="line">  92% &#123; <span class="attribute">top</span>: <span class="number">2vw</span>;   &#125;</div><div class="line">  94% &#123; <span class="attribute">top</span>: <span class="number">3.6vw</span>; &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">keyframes</span> skewX &#123;</div><div class="line">  78% &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%) <span class="built_in">skewX</span>(0);</div><div class="line">  &#125;</div><div class="line">  79% &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%) <span class="built_in">skewX</span>(10deg);</div><div class="line">  &#125;</div><div class="line">  80% &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%) <span class="built_in">skewX</span>(-10deg);</div><div class="line">  &#125;</div><div class="line">  81% &#123;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%) <span class="built_in">skewX</span>(0);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果不想主题文件修改你添加的单页面内容，需要在站点配置文件中配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//  单个文件夹下全部文件：skip_render: test/*</div><div class="line">//  单个文件夹下指定类型文件：skip_render: test/*.html</div><div class="line">//  单个文件夹下全部文件以及子目录:skip_render: test/**</div><div class="line">//  多个文件夹以及各种复杂情况：</div><div class="line">//  skip_render:</div><div class="line">//      - `test1/*.html`</div><div class="line">//      - `test2/**`</div><div class="line"></div><div class="line">比如 skip_render: pages/** 代表source/pages/目录下所有东西都不会被修改</div></pre></td></tr></table></figure><p>后来我又把404特效换成这个效果：<a href="/pages/yun.html">点击查看</a></p><p>将<code>/source/404/index.md</code>文件的内容修改如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div></pre></td><td class="code"><pre><div class="line">-------</div><div class="line"></div><div class="line">toc: false</div><div class="line">comments: false</div><div class="line">permalink: /404</div><div class="line"></div><div class="line">---</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/pixi.js/4.5.5/pixi.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"yun"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  404页面</div><div class="line">     */</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">var</span> lastTime = <span class="number">0</span>;</div><div class="line">         <span class="keyword">var</span> vendors = [<span class="string">'ms'</span>, <span class="string">'moz'</span>, <span class="string">'webkit'</span>, <span class="string">'o'</span>];</div><div class="line">         <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++x) &#123;</div><div class="line">           <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vendors[x] + <span class="string">'RequestAnimationFrame'</span>];</div><div class="line">           <span class="built_in">window</span>.cancelAnimationFrame = <span class="built_in">window</span>[vendors[x] + <span class="string">'CancelAnimationFrame'</span>] || <span class="built_in">window</span>[vendors[x] + <span class="string">'CancelRequestAnimationFrame'</span>];</div><div class="line">         &#125;</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame)</div><div class="line">           <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">callback, element</span>) </span>&#123;</div><div class="line">             <span class="keyword">var</span> currTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">             <span class="keyword">var</span> timeToCall = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">16</span> - (currTime - lastTime));</div><div class="line">             <span class="keyword">var</span> id = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                 callback(currTime + timeToCall);</div><div class="line">               &#125;,</div><div class="line">               timeToCall);</div><div class="line">             lastTime = currTime + timeToCall;</div><div class="line">             <span class="keyword">return</span> id;</div><div class="line">           &#125;;</div><div class="line"></div><div class="line">         <span class="keyword">if</span> (!<span class="built_in">window</span>.cancelAnimationFrame)</div><div class="line">           <span class="built_in">window</span>.cancelAnimationFrame = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">             clearTimeout(id);</div><div class="line">           &#125;;</div><div class="line">       &#125;());</div><div class="line"></div><div class="line">    <span class="comment">//math2 utils</span></div><div class="line">    <span class="keyword">var</span> Math2=&#123;&#125;;</div><div class="line">    Math2.random = <span class="function"><span class="keyword">function</span> (<span class="params">t, n</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.random() * (n - t) + t</div><div class="line">    &#125;, Math2.map = <span class="function"><span class="keyword">function</span> (<span class="params">t, n, r, a, o</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> (o - a) * ((t - n) / (r - n)) + a</div><div class="line">    &#125;, Math2.randomPlusMinus = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> t = t ? t : <span class="number">.5</span>, <span class="built_in">Math</span>.random() &gt; t ? <span class="number">-1</span> : <span class="number">1</span></div><div class="line">    &#125;, Math2.randomInt = <span class="function"><span class="keyword">function</span> (<span class="params">t, n</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> n += <span class="number">1</span>, <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (n - t) + t)</div><div class="line">    &#125;, Math2.randomBool = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> t = t ? t : <span class="number">.5</span>, <span class="built_in">Math</span>.random() &lt; t ? !<span class="number">0</span> : !<span class="number">1</span></div><div class="line">    &#125;, Math2.degToRad = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> rad = t * <span class="built_in">Math</span>.PI / <span class="number">180</span>, rad</div><div class="line">    &#125;, Math2.radToDeg = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> deg = <span class="number">180</span> / (<span class="built_in">Math</span>.PI * t), deg</div><div class="line">    &#125;, Math2.rgbToHex = <span class="function"><span class="keyword">function</span> (<span class="params">t</span>) </span>&#123;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> (<span class="string">"0"</span> + <span class="built_in">parseInt</span>(t).toString(<span class="number">16</span>)).slice(<span class="number">-2</span>)</div><div class="line">      &#125;</div><div class="line">      t = t.match(<span class="regexp">/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/</span>);</div><div class="line">      <span class="keyword">var</span> r = n(t[<span class="number">1</span>]) + n(t[<span class="number">2</span>]) + n(t[<span class="number">3</span>]);</div><div class="line">      <span class="keyword">return</span> r.toUpperCase()</div><div class="line">    &#125;, Math2.distance = <span class="function"><span class="keyword">function</span> (<span class="params">t, n, r, a</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt((r - t) * (r - t) + (a - n) * (a - n))</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//mouse</span></div><div class="line">    <span class="keyword">var</span> mousePos=&#123;</div><div class="line">      <span class="attr">x</span>:<span class="number">0</span>,</div><div class="line">      <span class="attr">y</span>:<span class="number">0</span></div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">window</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">      e = e || <span class="built_in">window</span>.event;</div><div class="line"></div><div class="line">      <span class="keyword">var</span> pageX = e.pageX - <span class="number">300</span>;</div><div class="line">      <span class="keyword">var</span> pageY = e.pageY + <span class="number">350</span>;</div><div class="line">      <span class="keyword">if</span> (pageX === <span class="literal">undefined</span>) &#123;</div><div class="line">        pageX = e.clientX + <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft - <span class="number">300</span>;</div><div class="line">        pageY = e.clientY + <span class="built_in">document</span>.body.scrollTop + <span class="built_in">document</span>.documentElement.scrollTop + <span class="number">350</span>;</div><div class="line">      &#125;</div><div class="line">      mousePos = &#123;</div><div class="line">        <span class="attr">x</span>: pageX,</div><div class="line">        <span class="attr">y</span>: pageY,</div><div class="line">      &#125;;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> options = &#123;</div><div class="line">      <span class="attr">width</span>: <span class="number">1000</span>,</div><div class="line">      <span class="attr">height</span>: <span class="number">1000</span>,</div><div class="line">      <span class="attr">keyword</span>: <span class="string">"404"</span>,</div><div class="line">      <span class="attr">density</span>: <span class="number">8</span>,</div><div class="line">      <span class="attr">densityText</span>: <span class="number">2</span>,</div><div class="line">      <span class="attr">minDist</span>: <span class="number">20</span>,</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// initialize canvas</span></div><div class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</div><div class="line">    canvas.width = options.width;</div><div class="line">    canvas.height = options.height;</div><div class="line">    canvas.style.width = options.width/<span class="number">2</span>;</div><div class="line">    canvas.style.height = options.height/<span class="number">2</span>;</div><div class="line">    canvas.getContext(<span class="string">'2d'</span>).scale(<span class="number">2</span>,<span class="number">2</span>)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> renderer = <span class="keyword">new</span> PIXI.autoDetectRenderer(options.width, options.height, &#123;</div><div class="line">      <span class="attr">transparent</span>: <span class="literal">true</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">var</span> stage = <span class="keyword">new</span> PIXI.Container(<span class="string">"0X000000"</span>, <span class="literal">true</span>);</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"yun"</span>).appendChild(renderer.view);</div><div class="line">    renderer.view.id = <span class="string">"notFound"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> imageData = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">var</span> particles =[];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      positionParticles();</div><div class="line">      positionText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">positionParticles</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line">      canvas.width = <span class="number">500</span>;</div><div class="line">      canvas.height = <span class="number">350</span>;</div><div class="line">      <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">      context.fillStyle = <span class="string">"#000000"</span>;</div><div class="line">      context.font = <span class="string">"300px 'Arial', sans-serif"</span>;</div><div class="line">      context.fillText(options.keyword, <span class="number">0</span>, <span class="number">250</span>);</div><div class="line"></div><div class="line">      <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">350</span>, <span class="number">500</span>);</div><div class="line">      data = imageData.data;</div><div class="line"></div><div class="line">      <span class="comment">// Iterate each row and column</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imageData.height; i += options.density) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; imageData.width; j += options.density) &#123;</div><div class="line"></div><div class="line">          <span class="comment">// Get the color of the pixel</span></div><div class="line">          <span class="keyword">var</span> color = data[((j * (imageData.width * <span class="number">4</span>)) + (i * <span class="number">4</span>)) - <span class="number">1</span>];</div><div class="line"></div><div class="line">          <span class="comment">// If the color is black, draw pixels</span></div><div class="line">          <span class="keyword">if</span> (color == <span class="number">255</span>) &#123;</div><div class="line">            <span class="keyword">var</span> newPar = particle();</div><div class="line">            newPar.setPosition(i, j);</div><div class="line">            particles.push(newPar);</div><div class="line">            stage.addChild(newPar);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">positionText</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line">      canvas.width = <span class="number">400</span>;</div><div class="line">      canvas.height = <span class="number">120</span>;</div><div class="line">      <span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line">      context.fillStyle = <span class="string">"#000000"</span>;</div><div class="line">      context.font = <span class="string">"80px 'Arial', sans-serif"</span>;</div><div class="line">      context.fillText(<span class="string">"Not Found"</span>, <span class="number">0</span>, <span class="number">80</span>);</div><div class="line"></div><div class="line">      <span class="keyword">var</span> imageData = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">400</span>, <span class="number">400</span>);</div><div class="line">      data = imageData.data;</div><div class="line"></div><div class="line">      <span class="comment">// Iterate each row and column</span></div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imageData.height; i += options.densityText) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; imageData.width; j += options.densityText) &#123;</div><div class="line"></div><div class="line">          <span class="comment">// Get the color of the pixel</span></div><div class="line">          <span class="keyword">var</span> color = data[((j * (imageData.width * <span class="number">4</span>)) + (i * <span class="number">4</span>)) - <span class="number">1</span>];</div><div class="line"></div><div class="line">          <span class="comment">// If the color is black, draw pixels</span></div><div class="line">          <span class="keyword">if</span> (color == <span class="number">255</span>) &#123;</div><div class="line">            <span class="keyword">var</span> newPar = particle(<span class="literal">true</span>);</div><div class="line">            newPar.setPosition(i, j);</div><div class="line">            particles.push(newPar);</div><div class="line">            stage.addChild(newPar);</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">particle</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">      $<span class="keyword">this</span> = <span class="keyword">new</span> PIXI.Graphics();</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (text == <span class="literal">true</span>) &#123;</div><div class="line">        $<span class="keyword">this</span>.text = <span class="literal">true</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      $<span class="keyword">this</span>.beginFill(<span class="number">0X5CC9F5</span>);</div><div class="line"></div><div class="line">      <span class="keyword">var</span> radius;</div><div class="line">      $<span class="keyword">this</span>.radius = radius = $<span class="keyword">this</span>.text ? <span class="built_in">Math</span>.random() * <span class="number">3.5</span> : <span class="built_in">Math</span>.random() * <span class="number">10.5</span>;</div><div class="line"></div><div class="line">      $<span class="keyword">this</span>.drawCircle(<span class="number">0</span>, <span class="number">0</span>, radius);</div><div class="line"></div><div class="line">      $<span class="keyword">this</span>.size = <span class="keyword">this</span>.radius;</div><div class="line">      $<span class="keyword">this</span>.x = -<span class="keyword">this</span>.width;</div><div class="line">      $<span class="keyword">this</span>.y = -<span class="keyword">this</span>.height;</div><div class="line">      $<span class="keyword">this</span>.free = <span class="literal">false</span>;</div><div class="line"></div><div class="line">      $<span class="keyword">this</span>.timer = Math2.randomInt(<span class="number">0</span>, <span class="number">100</span>);</div><div class="line">      $<span class="keyword">this</span>.v = Math2.randomPlusMinus() * Math2.random(<span class="number">.5</span>, <span class="number">1</span>);</div><div class="line">      $<span class="keyword">this</span>.hovered = <span class="literal">false</span></div><div class="line"></div><div class="line">      $<span class="keyword">this</span>.alpha = Math2.randomInt(<span class="number">10</span>, <span class="number">100</span>) / <span class="number">100</span>;</div><div class="line"></div><div class="line">      $<span class="keyword">this</span>.vy = <span class="number">-5</span> + <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">10</span>) / <span class="number">2</span>;</div><div class="line">      $<span class="keyword">this</span>.vx = <span class="number">-4</span> + <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">8</span>);</div><div class="line"></div><div class="line">      $<span class="keyword">this</span>.setPosition = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> ($<span class="keyword">this</span>.text) &#123;</div><div class="line">          $<span class="keyword">this</span>.x = x + (options.width / <span class="number">2</span> - <span class="number">180</span>);</div><div class="line">          $<span class="keyword">this</span>.y = y + (options.height / <span class="number">2</span> + <span class="number">100</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          $<span class="keyword">this</span>.x = x + (options.width / <span class="number">2</span> - <span class="number">250</span>);</div><div class="line">          $<span class="keyword">this</span>.y = y + (options.height / <span class="number">2</span> - <span class="number">175</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> $<span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      renderer.render(stage);</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; particles.length; i++) &#123;</div><div class="line">        <span class="keyword">var</span> p = particles[i];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mousePos.x &gt; p.x &amp;&amp; mousePos.x &lt; p.x + p.size &amp;&amp; mousePos.y &gt; p.y &amp;&amp; mousePos.y &lt; p.y + p.size) &#123;</div><div class="line">          p.hovered = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        p.scale.x = p.scale.y = scale = <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.min(<span class="number">2.5</span> - (Math2.distance(p.x, p.y, mousePos.x, mousePos.y) / <span class="number">160</span>), <span class="number">160</span>), <span class="number">1</span>);</div><div class="line"></div><div class="line"></div><div class="line">        p.x = p.x + <span class="number">.2</span> * <span class="built_in">Math</span>.sin(p.timer * <span class="number">.15</span>)</div><div class="line">        p.y = p.y + <span class="number">.2</span> * <span class="built_in">Math</span>.cos(p.timer * <span class="number">.15</span>)</div><div class="line">        p.timer = p.timer + p.v;</div><div class="line"></div><div class="line">      &#125;</div><div class="line">      <span class="built_in">window</span>.requestAnimationFrame(update);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    init();</div><div class="line">    update();</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>同样在<code>.article-entry</code>子级中加上如下样式:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#notFound</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%) <span class="built_in">translateX</span>(-50%);</div><div class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</div><div class="line">  <span class="attribute">height</span>: auto;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#yun</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">320px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">768px</span>) &#123;</div><div class="line">  <span class="selector-id">#yun</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-id">#notFound</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">425px</span>) &#123;</div><div class="line">  <span class="selector-id">#yun</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-id">#notFound</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">120%</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最终效果: <a href="http://wangriyu.wang/404.html">点击查看</a></p><h2 id="压缩优化静态文件"><a href="#压缩优化静态文件" class="headerlink" title="压缩优化静态文件"></a>压缩优化静态文件</h2><p>使用<code>hexo-neat</code>插件压缩js、html、css的文件代码</p><p>安装插件<code>npm install hexo-neat --save</code></p><p>在站点配置文件<code>_config.yml</code>中添加插件配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># hexo-neat</div><div class="line">neat_enable: true</div><div class="line"></div><div class="line">neat_html:</div><div class="line">  enable: true</div><div class="line">  exclude:</div><div class="line"></div><div class="line">neat_css:</div><div class="line">  enable: true</div><div class="line">  exclude:</div><div class="line">    - '*.min.css'</div><div class="line"></div><div class="line">neat_js:</div><div class="line">  enable: true</div><div class="line">  mangle: true</div><div class="line">  output:</div><div class="line">  compress:</div><div class="line">  exclude:</div><div class="line">    - '*.min.js'</div></pre></td></tr></table></figure><p>再部署一遍代码便完成压缩了</p><p>使用<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s --watch --debug</code>命令查看网站加载信息</p><h2 id="添加谷歌站长并提交站点地图"><a href="#添加谷歌站长并提交站点地图" class="headerlink" title="添加谷歌站长并提交站点地图"></a>添加谷歌站长并提交站点地图</h2><p>验证网址：<a href="https://www.google.com/webmasters/tools/" target="_blank" rel="external">Search Console</a></p><p>选择html验证时，将下载的文件放到<code>source</code>目录下后，再部署到github或者服务器上时，html文件的内容可能被改了，导致验证不成功，<br>解决办法是把html文件直接放到<code>.deploy_git</code>目录下，然后运行<code>hexo d</code>直接部署，再去验证应该就能通过了</p><p>然后安装sitemap生成器<code>npm install hexo-generator-sitemap --save</code>，</p><p>在站点配置文件<code>_config.yml</code>中加上</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">### sitemap</div><div class="line">sitemap:</div><div class="line">  path: sitemap.xml</div><div class="line">  template: ./sitemap_template.xml</div></pre></td></tr></table></figure><p>部署一遍博客目录下会多出一个<code>sitemap.xml</code>文件,到谷歌站长里添加站点地图即可</p><p>这里提一点，搜索引擎会抓取路径在三级以内的地址，如果路径太多可能抓取不到，但hexo文章的路径默认会加上日期，比如<code>http://wangriyu.wang/2017/08/24/Hexo/</code>，<br>在站点配置文件中修改一下permalink(默认是:year/:month/:day/:title/)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># URL</div><div class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class="line">url: http://wangriyu.wang</div><div class="line">root: /</div><div class="line">permalink: :title.html</div><div class="line">permalink_defaults:</div></pre></td></tr></table></figure><p>现在就不会加上日期了，为了更容易被抓取，文件名最好是英文</p><h2 id="使用七牛云图床"><a href="#使用七牛云图床" class="headerlink" title="使用七牛云图床"></a>使用七牛云图床</h2><p><a href="https://portal.qiniu.com" target="_blank" rel="external">https://portal.qiniu.com</a><br>注册七牛云账号，进入对象存储，点击内容管理，上传图片或其他一些资源，上传完成便可以使用产生的外链来代替站内的图片资源，<br>七牛云还提供了图片处理的服务，添加水印、裁剪缩放等</p><h2 id="使用Sentry-io的错误收集服务"><a href="#使用Sentry-io的错误收集服务" class="headerlink" title="使用Sentry.io的错误收集服务"></a>使用<a href="https://sentry.io" title="点击访问" target="_blank" rel="external">Sentry.io</a>的错误收集服务</h2><p>添加CDN库：<code>sentry: //cdn.ravenjs.com/3.18.1/raven.min.js</code></p><p>在head.ejs中加入以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&lt;%- theme.CDN.sentry %&gt;"</span> <span class="attr">crossorigin</span>=<span class="string">"anonymous"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">Raven.config(<span class="string">'服务地址'</span>).install()</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>服务地址改为注册得到的地址，例如<a href="https://XXXXXXXXXXXX@sentry.io/XXXXXX" target="_blank" rel="external">https://XXXXXXXXXXXX@sentry.io/XXXXXX</a></p><p>之后打开sentry的网站查看，如果出现错误会一一记录下来<br><img src="/images/hexo/error.png" alt="image"></p><p>该网站支持很多语言，可以嵌入到很多东西中，方便收集错误，但是不建议长期放在网站上，感觉会影响性能</p><h2 id="添加二次元人物"><a href="#添加二次元人物" class="headerlink" title="添加二次元人物"></a>添加二次元人物</h2><p>安装插件 <code>npm install -save hexo-helper-live2d</code></p><p>在layout.ejs中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">      ...</div><div class="line">      &lt;%- partial(&apos;_partial/footer&apos;) %&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;%- partial(&apos;_partial/after-footer&apos;) %&gt;</div><div class="line">+   &lt;%- live2d(&#123; model: &quot;koharu&quot; &#125;) %&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">+ &lt;script&gt;</div><div class="line">+   if ($(&quot;.left-col&quot;).css(&quot;display&quot;) === &quot;none&quot;) &#123;</div><div class="line">+     document.getElementById(&quot;live2dcanvas&quot;).style.height = &quot;25vh&quot;;</div><div class="line">+   &#125;</div><div class="line">+ &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><p>model可以替换成其他的：<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="external">https://github.com/EYHN/hexo-helper-live2d</a></p><h2 id="推荐几个工具网站"><a href="#推荐几个工具网站" class="headerlink" title="推荐几个工具网站"></a>推荐几个工具网站</h2><p><a href="https://zhitu.isux.us/" title="点击访问" target="_blank" rel="external">智图</a>：压缩图片很方便</p><p><a href="https://clipchamp.com/zh-Hans/dashboard" title="点击访问" target="_blank" rel="external">ClipChamp.com</a>: 在线压缩转换视频</p><p><a href="https://gifs.com/" title="点击访问" target="_blank" rel="external">Gifs.com</a>：视频转gif，压缩截取等</p><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Yelee </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浏览器本地存储]]></title>
      <url>/2017/20170815Storage.html</url>
      <content type="html"><![CDATA[<!-- build time:Tue Oct 31 2017 14:16:07 GMT+0800 (CST) --><h2 id="intro">前言</h2><blockquote><p>浏览器存储数据的几种方式</p></blockquote><ul><li>Cookies</li><li>Local Storage &amp; Session Storage</li><li>WebSQL &amp; IndexedDB</li></ul><a id="more"></a><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP Cookie（也叫Web cookie或者浏览器Cookie）是服务器发送到用户浏览器并保存在浏览器上的一块数据，它会在浏览器下一次发起请求时被携带并发送到服务器上。比较经典的，可以它用来确定两次请求是否来自于同一个浏览器，从而能够确认和保持用户的登录状态（类似token）。对于购物网站而言，cookie是非常重要的，为了实现购物车功能，把已选物品加入cookie，可以实现不同页面之间数据的同步，同时在提交订单的时候又会把这些cookie传到后台。</p><p>Cookie主要用在以下三个方面:</p><ul><li>会话状态管理（如用户登录状态、购物车）</li><li>个性化设置（如用户自定义设置）</li><li>浏览器行为跟踪（如跟踪分析用户行为）</li></ul><h3 id="1-创建cookie"><a href="#1-创建cookie" class="headerlink" title="1. 创建cookie"></a>1. 创建cookie</h3><p>当服务器收到HTTP请求（request）时，可以在响应头（headers）里面增加一个Set-Cookie头部。浏览器收到响应（response）之后会取出Cookie信息并保存，之后对该服务器每一次请求中都通过Cookie请求头部将Cookie信息发送给服务器。另外，Cookie的过期时间、域、路径、有效期、站点都可以根据需要来指定<br>格式：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-Cookie: &lt;cookie名称&gt; = &lt;cookie值&gt;</div></pre></td></tr></table></figure><p></p><p>服务器告诉客户端要保存Cookie信息， 响应的数据里面应该包含Set-Cookie头，浏览器收到之后会将Cookie保存，比如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HTTP/1.0 200 OK</div><div class="line">Content-type: text/html</div><div class="line">Set-Cookie: yummy_cookie = choco</div><div class="line">Set-Cookie: tasty_cookie = strawberry</div></pre></td></tr></table></figure><p></p><p>对该服务器发起的每一次新的请求，浏览器都会将之前保存的Cookie信息通过Cookie请求头发送给服务器<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /sample_page.html HTTP/1.1</div><div class="line">Host: www.example.org</div><div class="line">Cookie: yummy_cookie = choco; tasty_cookie = strawberry</div></pre></td></tr></table></figure><p></p><h3 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h3><ul><li>会话期Cookie （session cookie）<br>会话期Cookie是最简单的Cookie：浏览器关闭之后它会被自动删除</li><li><p>持久Cookie<br>持久Cookie可以指定一个特定的过期时间（Expires）或者有效期（Max-Age）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-Cookie: name = SmartestEE; expires = Sat, 02 May 2017 23:38:25 GMT // max-age = 3600 * 72</div></pre></td></tr></table></figure></li><li><p>安全类型Cookie<br>安全类型可以设置secure 选项，该选项只是一个标记而没有值。只有在使用SLL和HTTPS协议向服务器发起请求时，才能确保Cookie被安全地发送到服务器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-Cookie: name = Nicholas; secure</div></pre></td></tr></table></figure></li><li><p>HttpOnly类型Cookie<br>HttpOnly类型可以设置HttpOnly选项，HTTP-only类型的Cookie不能使用Javascript通过Document.cookie属性来访问，从而能够在一定程度上阻止跨域脚本攻击（XSS）。HttpOnly标志并没有给你提供额外的加密或者安全性上的能力，当整个机器暴露在不安全的环境时，切记绝不能通过HTTP Cookie存储、传输机密或者敏感信息。JavaScript可以通过跨站脚本攻击（XSS）的方式来窃取Cookie</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-Cookie: name = Nicholas; HttpOnly</div></pre></td></tr></table></figure></li></ul><h3 id="3-Cookie的作用域"><a href="#3-Cookie的作用域" class="headerlink" title="3. Cookie的作用域"></a>3. Cookie的作用域</h3><p>Domain和Path指令定义了Cookie的作用域，即需要发送Cookie的URL集合。</p><ul><li><p>Domain指令规定了需要发送Cookie的主机名。如果没有指定，默认为当前的文档地址上的主机名（但是不包含子域名）。如果指定了Domain，则一般包含子域名。</p><p>如果设置了Domain=mozilla.org，则Cookie包含在子域名中（如developer.mozilla.org）。</p></li><li><p>Path指令表明需要发送Cookie的URL路径。字符%x2F (即”/“)用做文件夹分隔符，子文件夹也会被匹配到。</p><p>如设置Path=/docs，则下面这些地址都将匹配到：”/docs”，”/docs/Web/“，”/docs/Web/HTTP”</p></li></ul><h3 id="4-JavaScript通过Document-cookies访问设置Cookie"><a href="#4-JavaScript通过Document-cookies访问设置Cookie" class="headerlink" title="4.  JavaScript通过Document.cookies访问设置Cookie"></a>4. JavaScript通过Document.cookies访问设置Cookie</h3><p>通过Document.cookie属性可以来创建新的Cookie，也能够通过该属性来访问未被指定HttpOnly标志的Cookie。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"yummy_cookie=choco"</span>; </div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"tasty_cookie=strawberry"</span>; </div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.cookie); </div><div class="line"><span class="comment">// logs "yummy_cookie=choco; tasty_cookie=strawberry"</span></div></pre></td></tr></table></figure><p></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie" target="_blank" rel="external">一个完整支持unicode的cookie读取/写入器</a><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> docCookies = &#123;</div><div class="line">  <span class="comment">// docCookies.getItem(name), 读取一个cookie。如果cookie不存在返回null</span></div><div class="line">  <span class="comment">// encodeURIComponent 转义除了字母、数字、(、)、. 、! 、~ 、* 、' 、- 和 _ 之外的所有字符</span></div><div class="line">  getItem: <span class="function"><span class="keyword">function</span> (<span class="params">sKey</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:(?:^|.*;)\\s*"</span> + <span class="built_in">encodeURIComponent</span>(sKey).replace(<span class="regexp">/[\-\.\+\*]/g</span>, <span class="string">"\\$&amp;"</span>) + <span class="string">"\\s*\\=\\s*([^;]*).*$)|^.*$"</span>), <span class="string">"$1"</span>)) || <span class="literal">null</span>;</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="comment">// docCookies.setItem(name, value, [end], [path], [domain], [secure]), 创建或覆盖一个cookie</span></div><div class="line">  <span class="comment">// end (可选)最大时间的秒数 (一年为31536e3， 永不过期的cookie为Infinity) ，或者过期时间的GMTString格式或Date对象; 如果没有定义则会在会话结束时过期 (number – 有限的或 Infinity – string, Date object or null)。</span></div><div class="line">  setItem: <span class="function"><span class="keyword">function</span> (<span class="params">sKey, sValue, vEnd, sPath, sDomain, bSecure</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!sKey || <span class="regexp">/^(?:expires|max\-age|path|domain|secure)$/i</span>.test(sKey)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> sExpires = <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span> (vEnd) &#123;</div><div class="line">      <span class="keyword">switch</span> (vEnd.constructor) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">Number</span>:</div><div class="line">          sExpires = vEnd === <span class="literal">Infinity</span> ? <span class="string">"; expires=Fri, 31 Dec 9999 23:59:59 GMT"</span> : <span class="string">"; max-age="</span> + vEnd;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">String</span>:</div><div class="line">          sExpires = <span class="string">"; expires="</span> + vEnd;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">Date</span>:</div><div class="line">          sExpires = <span class="string">"; expires="</span> + vEnd.toUTCString();</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(sKey) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(sValue) + sExpires + (sDomain ? <span class="string">"; domain="</span> + sDomain : <span class="string">""</span>) + (sPath ? <span class="string">"; path="</span> + sPath : <span class="string">""</span>) + (bSecure ? <span class="string">"; secure"</span> : <span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="comment">// docCookies.removeItem(name, [path], domain), 删除一个cookie</span></div><div class="line">  removeItem: <span class="function"><span class="keyword">function</span> (<span class="params">sKey, sPath, sDomain</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!sKey || !<span class="keyword">this</span>.hasItem(sKey)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(sKey) + <span class="string">"=; expires=Thu, 01 Jan 1970 00:00:00 GMT"</span> + ( sDomain ? <span class="string">"; domain="</span> + sDomain : <span class="string">""</span>) + ( sPath ? <span class="string">"; path="</span> + sPath : <span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="comment">// docCookies.hasItem(name), 检查一个cookie是否存在</span></div><div class="line">  hasItem: <span class="function"><span class="keyword">function</span> (<span class="params">sKey</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:^|;\\s*)"</span> + <span class="built_in">encodeURIComponent</span>(sKey).replace(<span class="regexp">/[\-\.\+\*]/g</span>, <span class="string">"\\$&amp;"</span>) + <span class="string">"\\s*\\="</span>)).test(<span class="built_in">document</span>.cookie);</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="comment">// docCookies.keys(), 返回一个这个路径所有可读的cookie的数组</span></div><div class="line">  keys: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> aKeys = <span class="built_in">document</span>.cookie.replace(<span class="regexp">/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g</span>, <span class="string">""</span>).split(<span class="regexp">/\s*(?:\=[^;]*)?;\s*/</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> nIdx = <span class="number">0</span>; nIdx &lt; aKeys.length; nIdx++) &#123;</div><div class="line">      aKeys[nIdx] = <span class="built_in">decodeURIComponent</span>(aKeys[nIdx]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> aKeys;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p></p><p>用法示例：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docCookies.setItem(<span class="string">"test0"</span>, <span class="string">"Hello world!"</span>);</div><div class="line">docCookies.setItem(<span class="string">"test3"</span>, <span class="string">"Hello world!"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2027</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="string">"/blog"</span>);</div><div class="line">docCookies.setItem(<span class="string">"test5"</span>, <span class="string">"Hello world!"</span>, <span class="string">"Tue, 06 Dec 2022 13:11:07 GMT"</span>, <span class="string">"/home"</span>);</div><div class="line">docCookies.setItem(<span class="string">"test6"</span>, <span class="string">"Hello world!"</span>, <span class="number">150</span>);</div><div class="line">docCookies.setItem(<span class="string">"test7"</span>, <span class="string">"Hello world!"</span>, <span class="number">245</span>, <span class="string">"/content"</span>);</div><div class="line">docCookies.setItem(<span class="string">"test8"</span>, <span class="string">"Hello world!"</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"example.com"</span>);</div><div class="line">docCookies.setItem(<span class="string">"test9"</span>, <span class="string">"Hello world!"</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">true</span>);</div><div class="line">docCookies.setItem(<span class="string">"test1;="</span>, <span class="string">"Safe character test;="</span>, <span class="literal">Infinity</span>);</div></pre></td></tr></table></figure><p></p><h3 id="5-cookie缺陷"><a href="#5-cookie缺陷" class="headerlink" title="5. cookie缺陷"></a>5. cookie缺陷</h3><ul><li>cookie会随着每次HTTP请求头信息一起发送，无形中增加了网络流量</li><li>cookie能存储的数据容量有限，根据浏览器类型不同而不同，通常只有4KB。所有超出该限制的 cookie 都会被截掉并且不会发送至服务器</li><li>每个域名下的cookie数量也有限制，根据浏览器类型不同而不同</li></ul><h2 id="HTML5的DOM存储分成两种：SessionStorage和LocalStorage"><a href="#HTML5的DOM存储分成两种：SessionStorage和LocalStorage" class="headerlink" title="HTML5的DOM存储分成两种：SessionStorage和LocalStorage"></a>HTML5的DOM存储分成两种：SessionStorage和LocalStorage</h2><p>DOM存储的机制是通过存储字符串类型的键/值对。</p><ul><li>SessionStorage是一种会话级别的缓存，关闭浏览器会数据会被清除。它的作用域是窗口级别的，也就是说不同窗口间的sessionStorage数据不能共享的。</li><li>LocalStorage是持久化存储，不会自动删除</li></ul><table><thead><tr><th style="text-align:left">属性方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">.length</td><td style="text-align:left">返回storage中的键值对个数</td></tr><tr><td style="text-align:left">.key(n)</td><td style="text-align:left">返回storage中第n个元素对的键值（第一个元素是0）</td></tr><tr><td style="text-align:left">.getItem(key)</td><td style="text-align:left">返回键值key对应的值</td></tr><tr><td style="text-align:left">.key</td><td style="text-align:left">返回键值key对应的值</td></tr><tr><td style="text-align:left">.setItem(key, value)</td><td style="text-align:left">添加数据，键值为key，值为value</td></tr><tr><td style="text-align:left">.removeItem(key)</td><td style="text-align:left">移除键值为key的数据</td></tr><tr><td style="text-align:left">.clear()</td><td style="text-align:left">清除所有数据</td></tr></tbody></table><p>特点：</p><ul><li>Storage提供几MB的空间，根据浏览器类型不同而不同，chrome为5MB。</li><li>键值对为文本类型，存储对象时要配合 JSON.stringify( ) 和 JSON.parse( )使用。</li><li>不同于cookie，Storage的访问限制更高一些，只有当前设定Storage的域名下才能访问。<br>SessionStorage是以tab为级别的session，刷新页面可以访问到之前的sessionStorage，关闭再打开页面，无法访问到之前的sessionStorage。<br>LocalStorage两种情况下都可以访问，而且下次再打开浏览器仍可以访问</li><li>低版本浏览器不支持。</li></ul><h2 id="WebSQL-amp-IndexedDB"><a href="#WebSQL-amp-IndexedDB" class="headerlink" title="WebSQL &amp; IndexedDB"></a>WebSQL &amp; IndexedDB</h2><p>websql的标准，官方已经不打算维护了，转而维护了新的indexeddb，但是websql兼容性好，而且是移动端几乎完全可用。indexeddb的兼容性没那么好，android4.4之前以及ios7以前都无法直接使用，但可以用polyfill脚本做移动端兼容。</p><p><a href="http://caniuse.com/#feat=indexeddb" target="_blank" rel="external">各浏览器兼容性</a></p><p>websql更像是关系型数据库，并且使用sql语句进行操作。</p><p>indexeddb更像是nosql（非关系型数据库），直接使用js的方法操作数据即可。</p><ul><li>也是永久存储</li><li>访问限制性：indexeddb和websql均是在创建数据库的域名下才能访问。而且不能指定访问域名。</li><li>两种存储的方式是没有大小限制的</li></ul><h3 id="WebSQL三个核心方法："><a href="#WebSQL三个核心方法：" class="headerlink" title="WebSQL三个核心方法："></a>WebSQL三个核心方法：</h3><ul><li>openDatabase：这个方法使用现有的数据库或者新建的数据库创建一个数据库对象</li><li>transaction：控制一个事务，以及基于这种情况执行提交或者回滚</li><li>executeSql：执行实际的 SQL 查询</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var db = openDatabase(&apos;数据库名称&apos;, &apos;版本号&apos;, &apos;描述文本&apos;, 数据库大小, [创建回调]);</div></pre></td></tr></table></figure><p>例子：<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> db = openDatabase(<span class="string">'mydb'</span>, <span class="string">'1.0'</span>, <span class="string">'Test DB'</span>, <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>);</div><div class="line"><span class="keyword">var</span> msg;</div><div class="line"> </div><div class="line"><span class="comment">// 插入</span></div><div class="line">db.transaction(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</div><div class="line">    tx.executeSql(<span class="string">'CREATE TABLE IF NOT EXISTS LOGS (id unique, log)'</span>);</div><div class="line">    tx.executeSql(<span class="string">'INSERT INTO LOGS (id, log) VALUES (1, "SmartestEE")'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 更新</span></div><div class="line">db.transaction(<span class="function"><span class="keyword">function</span> (<span class="params">tx</span>) </span>&#123;</div><div class="line">    tx.executeSql(<span class="string">'UPDATE LOGS SET log=\'test\' WHERE id=1'</span>);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line"><span class="comment">// 读取</span></div><div class="line">db.transaction(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</div><div class="line">tx.executeSql(<span class="string">'SELECT * FROM LOGS'</span>, [], (tx, results) =&gt; &#123;</div><div class="line">    <span class="keyword">var</span> len = results.rows.length, i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">        msg = <span class="string">"&lt;p&gt;&lt;b&gt;"</span> + results.rows.item(i).log + <span class="string">"&lt;/b&gt;&lt;/p&gt;"</span>;</div><div class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'#status'</span>).innerHTML +=  msg;</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="literal">null</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 删除</span></div><div class="line">db.transaction(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</div><div class="line">    tx.executeSql(<span class="string">'DELETE FROM LOGS  WHERE id=1'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><h3 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h3><p>特点：</p><ol><li>键值对储存。内部采用对象空间（object store）存放数据，支持所有js类型的数据</li><li>异步。IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的</li><li>支持事务。事务中一步出错整个事务都会回滚</li><li>同域限制。只能自身域名创建的indexedDB才可以访问</li><li>储存空间大。单个域名下的数据库超过50M的时候浏览器会弹窗向用户请求，不影响之后继续存储。</li><li>支持二进制储存。也就是可以存储图片和文件，<a href="https://hacks.mozilla.org/2012/02/storing-images-and-files-in-indexeddb/" target="_blank" rel="external">用IndexedDB存储图片和文件</a></li></ol><ul><li><p>判断是否可用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> indexedDB = <span class="built_in">window</span>.indexedDB || <span class="built_in">window</span>.mozIndexedDB || <span class="built_in">window</span>.webkitIndexedDB || <span class="built_in">window</span>.msIndexedDB || <span class="built_in">window</span>.shimIndexedDB;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!indexedDB) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'indexedDB不可用'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>打开数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> local = indexedDB.open(<span class="string">'数据库名'</span>, [版本号]);</div><div class="line"><span class="keyword">var</span> db;</div><div class="line"></div><div class="line">local.onerror = <span class="function">(<span class="params">ect</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 打开错误</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">local.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 打开成功，定义一个数据库对象</span></div><div class="line">  db = evt.target.result; </div><div class="line">  <span class="comment">// 也可以 db = local.result</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>创建和更新数据库版本号<br>要更新数据库的 schema，也就是创建或者删除对象存储空间，需要实现 onupgradeneeded 处理程序，这个处理程序将会作为一个允许你处理对象存储空间的 versionchange 事务的一部分被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">local.onupgradeneeded = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  db = evt.target.result;</div><div class="line">  db.createObjectStore(<span class="string">'objectStore'</span>, &#123; <span class="attr">keyPath</span>: <span class="string">"chatID"</span> &#125;); <span class="comment">// 创建一个对象空间，keyPath指定唯一的key，再加上autoIncrement: true自动增加key </span></div><div class="line">  </div><div class="line">  objectStore.createIndex(<span class="string">"name"</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</div><div class="line">  <span class="comment">// createIndex方法创建索引, 配合index()方法实用方便查询</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>在数据库第一次被打开时或者当指定的版本号高于当前被持久化的数据库的版本号时，这个 versionchange 事务将被创建。版本号是一个 unsigned long long 数字, 不能用浮点数。</p><ul><li>操作数据<br>操作数据前都得定义一个事务，第一个参数数组指定这个事务跨越哪些对象存储空间，第二个参数指定模式（不加默认只读），事务具有三种模式（只读，读写，和版本变更），只读事务可以并发运行 。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">transaction.oncomplete = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="comment">// 当所有的数据都操作完成时执行一些操作</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">transaction.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="comment">// 错误处理！</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><ol><li><p>增</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = db.transaction([<span class="string">"objectStore"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"objectStore"</span>).add(&#123;<span class="attr">chatID</span>: chatID, <span class="attr">messageList</span>: list&#125;);</div><div class="line"></div><div class="line">request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123; &#125;</div><div class="line">request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123; &#125;</div></pre></td></tr></table></figure></li><li><p>删</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> store = db.transaction([<span class="string">"objectStore"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"objectStore"</span>);</div><div class="line"><span class="keyword">var</span> request = store.delete(key); <span class="comment">// delete(key)删除指定数据，store.clear()清空整个对象空间，db.deleteObjectStore('objectStore')删除对象空间(得在onupgradeneeded方法中使用)，indexedDB.deleteDatabase("数据库名称")删库</span></div><div class="line"></div><div class="line">request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123; &#125;</div></pre></td></tr></table></figure></li><li><p>查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = db.transaction([<span class="string">"objectStore"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"objectStore"</span>).get(key);</div><div class="line"></div><div class="line">request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 错误处理</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 对 request.result 或者 evt.target.result 做些操作！</span></div><div class="line">  <span class="built_in">console</span>.log(request.result);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> store = db.transaction([<span class="string">"objectStore"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"objectStore"</span>);</div><div class="line"><span class="keyword">var</span> request = store.get(key);</div><div class="line"></div><div class="line">request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 错误处理</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 对 request.result 或者 evt.target.result 做些操作！</span></div><div class="line">  <span class="keyword">let</span> data = evt.target.result;</div><div class="line">  data.messageList = [&#123;<span class="attr">chatID</span>: <span class="string">'123456'</span>, <span class="attr">message</span>: <span class="string">'hello guys'</span>&#125;];</div><div class="line">  store.put(data);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li><li><p>遍历<br>openCursor方法，它在当前对象仓库里面建立一个读取光标（cursor）。<br>openCursor方法还可以接受第二个参数，表示遍历方向，默认值为next，其他可能的值为prev、nextunique和prevunique。后两个值表示如果遇到重复值，会自动跳过。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> t = db.transaction([<span class="string">"test"</span>], <span class="string">"readonly"</span>);</div><div class="line"><span class="keyword">var</span> store = t.objectStore(<span class="string">"test"</span>);</div><div class="line"><span class="keyword">var</span> cursor = store.openCursor();</div><div class="line"></div><div class="line">cursor.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> res = e.target.result;</div><div class="line">    <span class="keyword">if</span>(res) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Key"</span>, res.key);</div><div class="line">        <span class="built_in">console</span>.dir(<span class="string">"Data"</span>, res.value);</div><div class="line">        res.continue();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><ul><li>关闭数据库<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.close()</div></pre></td></tr></table></figure></li></ul><h2 id="用于一个react聊天项目的本地消息记录存储的IndexedDB使用示例"><a href="#用于一个react聊天项目的本地消息记录存储的IndexedDB使用示例" class="headerlink" title="用于一个react聊天项目的本地消息记录存储的IndexedDB使用示例"></a>用于一个react聊天项目的本地消息记录存储的IndexedDB使用示例</h2><blockquote><p>封装的函数用法跟localStorage的属性方法类似</p></blockquote><p>IndexedDB.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> indexedDB = <span class="built_in">window</span>.indexedDB || <span class="built_in">window</span>.mozIndexedDB || <span class="built_in">window</span>.webkitIndexedDB || <span class="built_in">window</span>.msIndexedDB || <span class="built_in">window</span>.shimIndexedDB;</div><div class="line"><span class="keyword">var</span> userID = localStorage.getItem(<span class="string">'userID'</span>), db;</div><div class="line"></div><div class="line">indexedDB.open(<span class="string">'LocalMessageDataBase'</span>, <span class="number">1</span>).onupgradeneeded = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// console.log('establish database');</span></div><div class="line">  db = evt.target.result;</div><div class="line">  db.createObjectStore(userID, &#123; <span class="attr">keyPath</span>: <span class="string">"chatID"</span> &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getLocalData</span> (<span class="params">chatID</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> localDB = indexedDB.open(<span class="string">'LocalMessageDataBase'</span>, <span class="number">1</span>), data = [];</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    localDB.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">      <span class="comment">// console.log('open database to getdata');</span></div><div class="line">      db = evt.target.result;</div><div class="line">      <span class="keyword">if</span> (chatID) &#123;</div><div class="line">        <span class="keyword">let</span> request = db.transaction([userID]).objectStore(userID).get(chatID);</div><div class="line"></div><div class="line">        request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'get error: '</span>, evt);</div><div class="line">          reject(evt)</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">          <span class="comment">// console.log('get data: ', evt.target.result);</span></div><div class="line">          data = request.result || [];</div><div class="line">          resolve(data)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setLocalData</span> (<span class="params">chatID, list</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> localDB = indexedDB.open(<span class="string">'LocalMessageDataBase'</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">  localDB.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// console.log('open database to setdata');</span></div><div class="line">    db = evt.target.result;</div><div class="line">    <span class="keyword">let</span> store = db.transaction([userID], <span class="string">'readwrite'</span>).objectStore(userID);</div><div class="line">    <span class="keyword">let</span> request = store.get(chatID);</div><div class="line"></div><div class="line">    request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123; <span class="keyword">throw</span> evt &#125;;</div><div class="line"></div><div class="line">    request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> data = evt.target.result;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (data) &#123;</div><div class="line">        <span class="comment">// console.log('update data');</span></div><div class="line">        data.messageList = list;</div><div class="line">        store.put(data)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// console.log('add data');</span></div><div class="line">        store.add(&#123;<span class="attr">chatID</span>: chatID, <span class="attr">messageList</span>: list&#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteLocalData</span> (<span class="params">chatID</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> localDB = indexedDB.open(<span class="string">'LocalMessageDataBase'</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">  localDB.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">    db = evt.target.result;</div><div class="line">    <span class="keyword">let</span> request = db.transaction([userID], <span class="string">"readwrite"</span>).objectStore(userID).delete(chatID);</div><div class="line"></div><div class="line">    request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'delete error'</span>, evt)</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'delete data'</span>)</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><strong>调用函数只需引入IndexedDB.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; getLocalData, setLocalData, deleteLocaldata &#125; = <span class="string">'path/IndexedDB'</span>;</div><div class="line"></div><div class="line">getLocalData(chatID).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// 获取聊天记录</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">setLocalData(chatID, list); <span class="comment">// 存入新的聊天消息记录</span></div><div class="line"></div><div class="line">deleteLocaldata(chatID); <span class="comment">// 删除指定对象的消息记录</span></div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 浏览器本地存储 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[系统I/O]]></title>
      <url>/2017/SystemIO.html</url>
      <content type="html"><![CDATA[<!-- build time:Tue Oct 31 2017 14:16:07 GMT+0800 (CST) --><p><strong>输入输出（I/O）是主存和外部设备设备（磁盘驱动器、终端、网络等）之间复制数据的过程。</strong></p><a id="more"></a><h2 id="Unix-I-O是系统底层数据操作"><a href="#Unix-I-O是系统底层数据操作" class="headerlink" title="Unix I/O是系统底层数据操作"></a>Unix I/O是系统底层数据操作</h2><p><img src="/images/io/IO.png" alt="img"></p><p>open() 和 close() 来打开和关闭文件，使用 read() 和 write() 来读写文件，或者利用 lseek() 来设定读取的偏移量</p><ul><li>文件类型：</li></ul><ol><li>普通文件：包含任意数据</li><li>目录：相关一组文件的索引</li><li>套接字 Socket：和另一台机器上的进程通信的类型</li></ol><p>目录包含一个链接(link)数组，并且每个目录至少包含两条记录：<br>./当前目录<br>../上一层目录</p><p>相对路径和绝对路径</p><ul><li><p>打开文件</p><p>open函数（返回的文件描述符一定是最小的且没有被用过的数值）</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int open(const char *pathname, int flags, mode_t mode)</div><div class="line">// flags 用于指定文件的打开/创建模式, 第三个参数仅当创建新文件时才使用，用于指定文件的访问权限位（access permission bits）</div></pre></td></tr></table></figure><p>flags:<br>O_RDONLY 只读模式<br>O_WRONLY 只写模式<br>O_RDWR 读写模式<br>. . .</p><p>modes:<br>S_IRWXU00700 权限，代表该文件所有者具有可读、可写及可执行的权限。<br>S_IRUSR 或S_IREAD，00400权限，代表该文件所有者具有可读取的权限。<br>S_IWUSR 或S_IWRITE，00200 权限，代表该文件所有者具有可写入的权限。<br>S_IXUSR 或S_IEXEC，00100 权限，代表该文件所有者具有可执行的权限<br>. . .</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int fd; // 文件描述符</div><div class="line">if ((fd = open(&quot;/etc/hosts&quot;, O_RDONLY)) &lt; 0) // 返回值等于 -1 则说明发生了错误</div><div class="line">&#123;</div><div class="line">    perror(&quot;open&quot;);</div><div class="line">    exit(1);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>关闭文件<br>close 函数用于关闭已打开的文件, 关闭一个已关闭的描述符会出错</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int close(int fd)</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int fd;     // 文件描述符</div><div class="line">int retval; // 返回值</div><div class="line">if ((retval = close(fd)) &lt; 0)</div><div class="line">&#123;</div><div class="line">    perror(&quot;close&quot;);</div><div class="line">    exit(1);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>读取文件<br>实际上就是把文件中对应的字节复制到内存中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssize_t read(int fd, void *buf, size_t count) // 成功执行时，返回所读取的数据量，如果读到文件的末尾EOF则返回0。失败的时候返回-1</div></pre></td></tr></table></figure><p>buf: 所要读取到的数据的内存缓冲<br>count：需要读取的数据量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">char buf[512];</div><div class="line">int fd;</div><div class="line">int nbytes;</div><div class="line">// 打开文件描述符，并从中读取 512 字节的数据</div><div class="line">if ((nbytes = read(fd, buf, sizeof(buf))) &lt; 0)</div><div class="line">&#123;</div><div class="line">    perror(&quot;read&quot;);</div><div class="line">    exit(1);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>写入文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssize_t write(int fd, const void *buf, size_t nbytes) // write函数将buf中的nbytes字节内容写入文件描述符fd. 成功时返回写的字节数. 失败时返回-1</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">char buf[512];</div><div class="line">int fd;</div><div class="line">int nbytes;</div><div class="line">// 打开文件描述符，并向其写入 512 字节的数据</div><div class="line">if ((nbytes = write(fd, buf, sizeof(buf)) &lt; 0)</div><div class="line">&#123;</div><div class="line">    perror(&quot;write&quot;);</div><div class="line">    exit(1);</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>tips：x86-64系统中，size-t被定义为unsigned long，而ssize-t（有符号）被定义为long，因为函数返回值可能为-1</p></blockquote><ul><li>lseek函数<br>为一个打开的文件设置其偏移量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">off_t lseek(int fd, off_t offset, int whence)</div></pre></td></tr></table></figure><p>Offset：偏移量，每一读写操作所需要移动的距离，单位是字节的数量，可正可负（向前，向后）<br>whence: SEEK_SET / SEEK_CUR / SEEK_END (依次为0，1，2）.<br>SEEK_SET 将读写位置指向文件头后再增加offset个位移量。<br>SEEK_CUR 以目前的读写位置往后增加offset个位移量。<br>SEEK_END 将读写位置指向文件尾后再增加offset个位移量。</p><p>当whence 值为SEEK_CUR 或SEEK_END时，参数offet允许负值的出现</p><p>当调用成功时则返回目前的读写位置，也就是距离文件开头多少个字节。若有错误则返回-1，errno 会存放错误代码</p><ul><li>元数据<br>元数据是用来描述数据的结构，由内核维护，可以通过 stat 和 fstat 函数来访问</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int stat(const char *filename, struct stat *buf)</div><div class="line">int fstat(int fd, struct stat *buf)</div></pre></td></tr></table></figure><p>函数结果是填充一个stat结构：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">struct stat</div><div class="line">&#123;</div><div class="line">    dev_t           st_dev;     // Device</div><div class="line">    ino_t           st_ino;     // inode</div><div class="line">    mode_t          st_mode;    // Protection &amp; file type</div><div class="line">    nlink_t         st_nlink;   // Number of hard links</div><div class="line">    uid_t           st_uid;     // User ID of owner</div><div class="line">    gid_t           st_gid;     // Group ID of owner</div><div class="line">    dev_t           st_rdev;    // Device type (if inode device)</div><div class="line">    off_t           st_size;    // Total size, in bytes</div><div class="line">    unsigned long   st_blksize; // Blocksize for filesystem I/O</div><div class="line">    unsigned long   st_blocks;  // Number of blocks allocated</div><div class="line">    time_t          st_atime;   // Time of last access</div><div class="line">    time_t          st_mtime;   // Time of last modification</div><div class="line">    time_t          st_ctime;   // Time of last change</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">int main (int argc, char **argv)</div><div class="line">&#123;</div><div class="line">    struct stat stat;</div><div class="line">    char *type, *readok;</div><div class="line">    </div><div class="line">    Stat(argv[1], &amp;stat);</div><div class="line">    if (S_ISREG(stat.st_mode)) // 确定文件类型，S_ISREG(m)判断普通文件，</div><div class="line">        type = &quot;regular&quot;;</div><div class="line">    else if (S_ISDIR(stat.st_mode)) // S_ISDIR(m)判断目录文件</div><div class="line">        type = &quot;directory&quot;;</div><div class="line">    else // S_ISSOCK(m)判断网络套接字</div><div class="line">        type = &quot;other&quot;;</div><div class="line">    </div><div class="line">    if ((stat.st_mode &amp; S_IRUSR)) // 检查读权限</div><div class="line">        readok = &quot;yes&quot;;</div><div class="line">    else</div><div class="line">        readok = &quot;no&quot;;</div><div class="line">    </div><div class="line">    printf(&quot;type: %s, read: %s\n&quot;, type, readok);</div><div class="line">    exit(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>读取目录内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char **argv)</div><div class="line">&#123;</div><div class="line">  DIR *streamp;</div><div class="line">  struct dirent *dep;</div><div class="line">  streamp = Opendir(argv[0]);</div><div class="line">  </div><div class="line">  errno = 0;</div><div class="line">  while ((dep = readdir(streamp)) != NULL) &#123;</div><div class="line">    printf(&quot;找到文件：%s\n&quot;, dep -&gt; d_name);</div><div class="line">  &#125;</div><div class="line">  if (errno != 0)</div><div class="line">    unix_error(&quot;readdir 失败&quot;);</div><div class="line">  CloseDir(streamp);</div><div class="line">  exit(0)</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h2><p>C 标准库中包含一系列高层的标准 IO 函数</p><ul><li>打开和关闭文件: fopen, fclose</li><li>读取和写入字节: fread, fwrite</li><li>读取和写入行: fgets, fputs</li><li>格式化读取和写入: fscanf, fprintf</li></ul><p>Standard C I/O: fopen, fdopen, fread, fwrite, fscanf, fprintf, sscanf, sprintf, fgets, fputs, fflush, fseek, fclose</p><h2 id="Node-js文件系统fs模块"><a href="#Node-js文件系统fs模块" class="headerlink" title="Node.js文件系统fs模块"></a>Node.js文件系统fs模块</h2><p>Node.js提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var fs = require(&quot;fs&quot;)</div></pre></td></tr></table></figure><p>Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。<br>异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。<br>建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var fs = require(&quot;fs&quot;);</div><div class="line">// 异步读取</div><div class="line">fs.readFile(&apos;./hello.txt&apos;, function (err, data) &#123;</div><div class="line">   if (err) &#123;</div><div class="line">       return console.error(err);</div><div class="line">   &#125;</div><div class="line">   console.log(data.toString());</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 同步读取</div><div class="line">var data = fs.readFileSync(&apos;./hello.txt&apos;);</div><div class="line">console.log(data.toString());</div></pre></td></tr></table></figure><ul><li>打开文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fs.open(path, flags[, mode], callback(err, fd))</div><div class="line">// fd是返回的文件描述符</div></pre></td></tr></table></figure><ul><li>获取文件信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fs.stat(path, callback(err, stats))</div><div class="line">// stats 是 fs.Stats 对象</div></pre></td></tr></table></figure><ul><li><p>stats类</p><p>查询文件信息</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.stat(path, callback(err, stats))</div></pre></td></tr></table></figure><p>一个stats类对象的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  dev: 16777220,   // 文件或目录所在的设备I, 该属性值在UNIX系统下有效</div><div class="line">  mode: 33188,     // 文件或目录的权限标志，采用数值形式表示</div><div class="line">  nlink: 1,        // 文件或目录的的硬连接数量</div><div class="line">  uid: 501,        // 文件或目录的所有者的用户ID, 该属性值在UNIX系统下有效</div><div class="line">  gid: 20,         // 文件或目录的所有者的用户组ID, 该属性值在UNIX系统下有效</div><div class="line">  rdev: 0,         // 字符设备文件或块设备文件所在设备ID, 该属性值在UNIX系统下有效</div><div class="line">  blksize: 4096,   // 块大小</div><div class="line">  ino: 78808297,   // 文件或目录的索引编号, 该属性值仅在UNIX系统下有效</div><div class="line">  size: 244,       // 文件的字节数</div><div class="line">  blocks: 8,       // 块数</div><div class="line">  atime: Wed May 27 2015 18:24:43 GMT+0800 (CST),  // 文件或目录的访问时间</div><div class="line">  mtime: Wed May 27 2015 18:26:25 GMT+0800 (CST),  // 文件或目录的最后修改时间</div><div class="line">  ctime: Wed May 27 2015 18:26:25 GMT+0800 (CST),  // 文件或目录状态的最后修改时间</div><div class="line">  birthtime: Mon, 10 Oct 2011 23:24:11 GMT,        // 文件创建时间</div><div class="line">  atimeMs: 1318289051000.1,      // 以单位为毫秒保存相对应时间的数字</div><div class="line">  mtimeMs: 1318289051000.1,</div><div class="line">  ctimeMs: 1318289051000.1,</div><div class="line">  birthtimeMs: 1318289051000.1,</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>stats类的方法</p><ol><li>stats.isFile() 如果是标准文件，返回true。是目录、套接字、符号连接、或设备等返回false</li><li>stats. isDirectory() 如果是目录，返回true</li><li>stats. isBlockDevice() 如果是块设备，返回true，大多数情况下类UNIX系统的块设备都位于/dev目录下</li><li>stats. isCharacterDevice() 如果是字符设备，返回true</li><li>stats. isSymbolicLink() 如果是符号连接，返回true。（fs.lstat()方法返回的stats对象才有此方法）</li><li>stats.isFIFO() 如果是FIFO（FIFO是UNIX中的一种特殊类型的命令管道），返回true。FIFO是UNIX中的一种特殊类型的命令管道</li><li>stats. isSocket() 如果是UNIX套接字（socket），返回true</li></ol><ul><li>检查文件是否存在</li></ul><ol><li>fs.stat()，如果stats对象存在且stats.isFile()为true才能确认要修改或删除的文件存在</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">fs.stat(&apos;/xxx&apos;, function(err, stat)&#123;</div><div class="line">    if(stat&amp;&amp;stat.isFile()) &#123;</div><div class="line">	console.log(&apos;文件存在&apos;);</div><div class="line">    &#125; else &#123;</div><div class="line">	console.log(&apos;文件不存在或不是标准文件&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><ol><li>fs.access(), 检查到指定path路径的目录或文件的访问权限</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.access(path[, mode], callback(err))</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 检查文件是否存在</div><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">fs.access(&apos;/etc/passwd&apos;, function(err) &#123;</div><div class="line">    console.log(err ? &apos;文件存在&apos; : &apos;文件不存在&apos;);</div><div class="line">&#125;);</div><div class="line">// 检查是否对文件是否有读写权限</div><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">fs.access(&apos;/etc/passwd&apos;, fs.R_OK | fs.W_OK, function(err) &#123;</div><div class="line">    console.log(err ? &apos;不可操作!&apos; : &apos;可以读/写&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>fs.F_OK - 文件是对于进程是否可见，可以用来检查文件是否存在。也是mode 的默认值<br>fs.R_OK - 文件对于进程是否可读<br>fs.W_OK - 文件对于进程是否可写<br>fs.X_OK - 文件对于进程是否可执行。（Windows系统不可用，执行效果等同fs.F_OK）</p><ul><li>写入文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.writeFile(file, data[, options], callback(err))</div></pre></td></tr></table></figure><ol><li>fd - 通过 fs.open() 方法返回的文件描述符。</li><li>buffer - 数据写入的缓冲区。</li><li>offset - 缓冲区写入的写入偏移量。</li><li>length - 要从文件中读取的字节数。</li><li>position - 文件读取的起始位置，如果 position 的值为 null，则会从当前文件指针的位置读取。</li><li>callback - 回调函数，有三个参数err, bytesRead, buffer，err 为错误信息， bytesRead 表示读取的字节数，buffer 为缓冲区对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var fs = require(&quot;fs&quot;);</div><div class="line">var buf = new Buffer(1024);</div><div class="line"></div><div class="line">console.log(&quot;准备打开已存在的文件！&quot;);</div><div class="line">fs.open(&apos;input.txt&apos;, &apos;r+&apos;, function(err, fd) &#123;</div><div class="line">   if (err) &#123;</div><div class="line">       return console.error(err);</div><div class="line">   &#125;</div><div class="line">   console.log(&quot;文件打开成功！&quot;);</div><div class="line">   console.log(&quot;准备读取文件：&quot;);</div><div class="line">   fs.read(fd, buf, 0, buf.length, 0, function(err, bytes)&#123;</div><div class="line">      if (err)&#123;</div><div class="line">         console.log(err);</div><div class="line">      &#125;</div><div class="line">      console.log(bytes + &quot;  字节被读取&quot;);</div><div class="line">      </div><div class="line">      // 仅输出读取的字节</div><div class="line">      if(bytes &gt; 0)&#123;</div><div class="line">         console.log(buf.slice(0, bytes).toString());</div><div class="line">      &#125;</div><div class="line">   &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// fs.write(fd, buffer, offset, length[, position], callback)</div></pre></td></tr></table></figure></li></ol><ul><li>关闭文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.close(fd, callback())</div></pre></td></tr></table></figure><ul><li>截取文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.ftruncate(fd, len, callback())</div></pre></td></tr></table></figure><ul><li>删除文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.unlink(path, callback())</div></pre></td></tr></table></figure><ul><li>创建目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.mkdir(path[, mode], callback)</div></pre></td></tr></table></figure><ul><li>读取目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fs.readdir(path, callback(err, files))</div><div class="line">// files 为目录下的文件数组列表</div></pre></td></tr></table></figure><ul><li>删除目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.rmdir(path, callback())</div></pre></td></tr></table></figure><ul><li>检测给定的路径是否存在</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.existsSync(path) //异步版本已无效</div></pre></td></tr></table></figure><ul><li>追加文件内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.appendFile(filename, data[, options], callback(err))</div></pre></td></tr></table></figure><h2 id="几条查询目录信息终端命令"><a href="#几条查询目录信息终端命令" class="headerlink" title="几条查询目录信息终端命令"></a>几条查询目录信息终端命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ find 路径 -type f|wc -l // 统计文件数</div><div class="line">$ find 路径 -type d|wc -l // 统计目录数</div><div class="line"></div><div class="line">$ du -sh 路径 // 统计大小</div><div class="line">$ df -h /    //查询磁盘使用量</div><div class="line"></div><div class="line">$ ls -lR 路径|grep &quot;^d&quot;|wc -l // 统计目录数</div><div class="line">$ ls -lR 路径|grep &quot;^-&quot;|wc -l // 统计文件数</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> READ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 深入理解计算机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[0611-JS笔记]]></title>
      <url>/2017/20170611JSNote.html</url>
      <content type="html"><![CDATA[<!-- build time:Tue Oct 31 2017 14:16:07 GMT+0800 (CST) --><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><h3 id="使用this对象的方法作为回调函数时的问题"><a href="#使用this对象的方法作为回调函数时的问题" class="headerlink" title="使用this对象的方法作为回调函数时的问题"></a>使用this对象的方法作为回调函数时的问题</h3><p>如果回调函数被传递给一个全局函数，this对象指向全局window对象（在浏览器中）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clientData = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">094545</span>,</div><div class="line">  <span class="attr">fullName</span>: <span class="string">"Not Set"</span>,</div><div class="line">  <span class="attr">setUserName</span>: <span class="function"><span class="keyword">function</span>(<span class="params">firstName, lastName</span>) </span>&#123;</div><div class="line">    <span class="comment">//这指向了对象中的fullName属性</span></div><div class="line">    <span class="keyword">this</span>.fullName = firstName + <span class="string">" "</span> + lastName;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInput</span>(<span class="params">firstName, lastName, callback</span>)</span>&#123;</div><div class="line">  <span class="comment">//在这做些什么来确认firstName/lastName</span></div><div class="line"></div><div class="line">  <span class="comment">//现在存储names</span></div><div class="line">  callback(firstName, lastName);</div><div class="line">&#125;</div><div class="line"></div><div class="line">getUserInput(<span class="string">"Wang"</span>, <span class="string">"RiYu"</span>, clientData.setUserName);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(clientData.fullName);  <span class="comment">//Not Set</span></div><div class="line"><span class="built_in">console</span>.log(fullName); <span class="comment">//Wang RiYu</span></div></pre></td></tr></table></figure><p>当clientData.setUsername被执行时，this.fullName并没有设置clientData对象中的fullName属性。</p><p>相反，它将设置window对象中的fullName属性，因为getUserInput是一个全局函数。</p><p>这是因为全局函数中的this对象指向window对象。</p><h3 id="修复上面出现的问题"><a href="#修复上面出现的问题" class="headerlink" title="修复上面出现的问题"></a>修复上面出现的问题</h3><p><strong>使用Call和Apply函数保存this</strong></p><ul><li><p>call接收的第一个参数为被用来在函数内部当做this的对象，传递给函数的参数被挨个传递（当然使用逗号分开）</p></li><li><p>apply函数的第一个参数也是在函数内部作为this的对象，然而最后一个参数确是传递给函数的值的数组</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInput</span>(<span class="params">firstName, lastName, callback. callbackObj</span>)</span>&#123;</div><div class="line">  <span class="comment">//在这里做些什么来确认名字</span></div><div class="line"></div><div class="line">  callback.apply(callbackObj, [firstName, lastName]);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用Apply函数正确设置了this对象，我们现在正确的执行了callback并在clientData对象中正确设置了fullName属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//我们将clientData.setUserName方法和clientData对象作为参数</span></div><div class="line"><span class="comment">//clientData对象会被Apply方法使用来设置this对象</span></div><div class="line"></div><div class="line">getUserName(<span class="string">"Barack"</span>, <span class="string">"Obama"</span>, clientData.setUserName, clientData);</div><div class="line"></div><div class="line"><span class="comment">//clientData中的fullName属性被正确的设置</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(clientUser.fullName)</div></pre></td></tr></table></figure><hr><h3 id="回调函数特点"><a href="#回调函数特点" class="headerlink" title="回调函数特点"></a>回调函数特点</h3><ul><li>回调函数是一段可执行的代码段，它作为一个参数传递给其他的代码，其作用是在需要的时候方便调用这段（回调函数）代码</li><li>不会立刻执行,调用add时才会执行print</li><li>回调函数是一个闭包，也就是说它能访问到其外层定义的变量</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2, callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = num1 + num2;</div><div class="line">  callback(sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(num);</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>, print);</div><div class="line"></div><div class="line"><span class="comment">// 在执行回调函数前最好确认其是一个函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2, callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = num1 + num2;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> callback === <span class="string">'function'</span>)&#123;</div><div class="line">    callback(sum);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="注意在回调函数调用时this的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文"><a href="#注意在回调函数调用时this的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文" class="headerlink" title="注意在回调函数调用时this的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文"></a>注意在回调函数调用时this的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">sum</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">add</span>: <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.sum = num1 + num2;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sum)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2, callback</span>)</span>&#123;</div><div class="line">  callback(num1, num2);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>, obj.add);</div><div class="line"><span class="built_in">console</span>.log(obj.sum); <span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(sum);</div></pre></td></tr></table></figure><p>上述代码调用回调函数的时候是在全局环境下，因此this指向的是window，所以sum的值是赋值给windows的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arg1, arg2, callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> rand = <span class="built_in">Math</span>.random();</div><div class="line">  <span class="built_in">console</span>.log(rand);</div><div class="line">  <span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(rand * (arg2 - arg1) + arg1);</div><div class="line">  callback(num);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn(<span class="number">10</span>, <span class="number">20</span>, <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Callback called! Num: "</span> + num);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//结果为10和20之间的随机数</span></div></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clientData = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">094545</span>,</div><div class="line">  <span class="attr">fullName</span>: <span class="string">"Not Set"</span>,</div><div class="line">  <span class="attr">setUserName</span>: <span class="function"><span class="keyword">function</span>(<span class="params">firstName, lastName</span>) </span>&#123;</div><div class="line">    <span class="comment">//这指向了对象中的fullName属性</span></div><div class="line">    <span class="keyword">this</span>.fullName = firstName + <span class="string">" "</span> + lastName;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInput</span>(<span class="params">firstName, lastName, callback</span>)</span>&#123;</div><div class="line">  <span class="comment">//在这做些什么来确认firstName/lastName</span></div><div class="line"></div><div class="line">  <span class="comment">//现在存储names</span></div><div class="line">  callback(firstName, lastName);</div><div class="line">&#125;</div><div class="line"></div><div class="line">getUserInput(<span class="string">"Wang"</span>, <span class="string">"RiYu"</span>, clientData.setUserName);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(clientData.fullName);  <span class="comment">//Not Set</span></div><div class="line"><span class="built_in">console</span>.log(fullName); <span class="comment">// Wang RiYu</span></div></pre></td></tr></table></figure><hr><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="闭包作用，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中"><a href="#闭包作用，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中" class="headerlink" title="闭包作用，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中"></a>闭包作用，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>) </span>&#123; counter += <span class="number">1</span>; &#125;</div><div class="line">  plus();</div><div class="line">  <span class="built_in">console</span>.log(counter);</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(); <span class="comment">// 1</span></div><div class="line">add(); <span class="comment">// 1</span></div><div class="line">add(); <span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="comment">/*-------------------------------------------*/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(counter += <span class="number">1</span>); &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">add(); <span class="comment">// 1</span></div><div class="line">add(); <span class="comment">// 2</span></div><div class="line">add(); <span class="comment">// 3</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc1</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> x++ &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = [makeFunc1(<span class="number">0</span>), makeFunc1(<span class="number">1</span>), makeFunc1(<span class="number">2</span>)];</div><div class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]()); <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(a[<span class="number">1</span>]()); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(a[<span class="number">2</span>]()); <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="comment">/*-------------------------------*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc2</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(x++) &#125;</div><div class="line">  foo()</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = [makeFunc2(<span class="number">0</span>), makeFunc2(<span class="number">1</span>), makeFunc2(<span class="number">2</span>)];</div><div class="line">b[<span class="number">0</span>]; <span class="comment">// 0</span></div><div class="line">b[<span class="number">1</span>]; <span class="comment">// 1</span></div><div class="line">b[<span class="number">2</span>]; <span class="comment">// 2</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">  nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(n);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result=f1();</div><div class="line">result(); <span class="comment">// 999</span></div><div class="line">nAdd();</div><div class="line">result(); <span class="comment">// 1000</span></div><div class="line"></div><div class="line"><span class="comment">/*-----------------------*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">  mAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(n);</div><div class="line">  &#125;</div><div class="line">  f2()</div><div class="line">&#125;</div><div class="line">f2(); <span class="comment">// 999</span></div><div class="line">mAdd();</div><div class="line">f2(); <span class="comment">// 999</span></div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    a *= <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = foo1();</div><div class="line">f(); <span class="comment">//return 20.</span></div><div class="line">f(); <span class="comment">//return 40.</span></div><div class="line"></div><div class="line"><span class="comment">/*-------------------------*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    a *= <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">  &#125;;</div><div class="line">  f1()</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo2(); <span class="comment">//return 20.</span></div><div class="line">foo2(); <span class="comment">//return 20.</span></div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[0507-JS笔记]]></title>
      <url>/2017/20170507JSNote.html</url>
      <content type="html"><![CDATA[<!-- build time:Tue Oct 31 2017 14:16:07 GMT+0800 (CST) --><h2 id="splice-和-slice"><a href="#splice-和-slice" class="headerlink" title="splice 和 slice"></a>splice 和 slice</h2><h3 id="splice-方法通过删除现有元素和-或添加新元素来更改数组的内容"><a href="#splice-方法通过删除现有元素和-或添加新元素来更改数组的内容" class="headerlink" title="splice()方法通过删除现有元素和/或添加新元素来更改数组的内容"></a>splice()方法通过删除现有元素和/或添加新元素来更改数组的内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">array.splice(start)</div><div class="line">array.splice(start, deleteCount) </div><div class="line">array.splice(start, deleteCount, item1, item2, ...)</div></pre></td></tr></table></figure><ul><li>start<br>指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从1计数）。</li><li>deleteCount （可选）<br>整数，表示要移除的数组元素的个数。如果 deleteCount 是 0，则不移除元素。这种情况下，至少应添加一个新元素。如果 deleteCount 大于start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。<br>如果deleteCount被省略，则其相当于(arr.length - start)。</li><li>item1, item2, … （可选）<br>要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素。</li></ul><h3 id="splice-返回值"><a href="#splice-返回值" class="headerlink" title="splice()返回值"></a>splice()返回值</h3><p>由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组</p><blockquote><p>tips：splice() 方法与 slice() 方法的作用是不同的，splice() 方法会直接对数组进行修改</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> removed = array.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">"e"</span>);</div><div class="line"><span class="comment">//array --&gt; ["a","b","e","c","d"]</span></div><div class="line"><span class="comment">//removed --&gt; []</span></div><div class="line"></div><div class="line">removed = array.splice(<span class="number">3</span>,<span class="number">1</span>);</div><div class="line"><span class="comment">//array --&gt; ["a","b","e","d"]</span></div><div class="line"><span class="comment">//removed --&gt; ["c"]</span></div><div class="line"></div><div class="line">removed = array.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"f"</span>);</div><div class="line"><span class="comment">//array --&gt; ["a","b","f","d"]</span></div><div class="line"><span class="comment">//removed --&gt; ["e"]</span></div></pre></td></tr></table></figure><hr><h3 id="slice-方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象-不改变原数组"><a href="#slice-方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象-不改变原数组" class="headerlink" title="slice()方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象,不改变原数组"></a>slice()方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象,不改变原数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">array.slice()</div><div class="line">array.slice(begin)</div><div class="line">array.slice(begin,end)</div></pre></td></tr></table></figure><ul><li>begin （可选）<br>从该索引处开始提取原数组中的元素（从0开始）。<br>如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2)表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。<br>如果省略 begin，则 slice 从索引 0 开始。</li><li>end （可选）<br>在该索引处结束提取原数组元素（从0开始）。slice会提取原数组中索引从 begin 到 end 的所有元素（包含begin，但不包含end）。<br>slice(1,4) 提取原数组中的第二个元素开始直到第四个元素的所有元素 （索引为 1, 2, 3的元素）。<br>如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1)表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。<br>如果 end 被省略，则slice 会一直提取到原数组末尾。<br>如果 end 大于数组长度，slice 也会一直提取到原数组末尾。</li></ul><h3 id="slice-返回值"><a href="#slice-返回值" class="headerlink" title="slice()返回值"></a>slice()返回值</h3><p>array下标 <strong>begin &lt;= copy &lt; end</strong> 的数组拷贝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> sliced = array.slice(<span class="number">1</span>,<span class="number">3</span>);</div><div class="line"><span class="comment">//array --&gt; ["a","b","c","d"]</span></div><div class="line"><span class="comment">//sliced --&gt; ["b","c"]</span></div></pre></td></tr></table></figure><h2 id="调用Object属性"><a href="#调用Object属性" class="headerlink" title="调用Object属性"></a>调用Object属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">    <span class="attr">name0</span>: <span class="string">"abc"</span>,</div><div class="line">    <span class="attr">name1</span>: <span class="number">123</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">object.name0 <span class="comment">//等同于object["name0"],输出"abc"</span></div></pre></td></tr></table></figure><h2 id="创建函数的几种方法"><a href="#创建函数的几种方法" class="headerlink" title="创建函数的几种方法"></a>创建函数的几种方法</h2><h3 id="三种基础方法"><a href="#三种基础方法" class="headerlink" title="三种基础方法"></a>三种基础方法</h3><ul><li>function foo(arg) { statements }</li><li>var foo = function(arg) { statements }</li><li>var foo = new Function(“a”,”b”,”console.log(a+b)”) //等同于function foo(a,b){ console.log(a+b); }</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a=<span class="number">123</span>;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">&#125;</div><div class="line">foo(); <span class="comment">// --&gt; 123</span></div><div class="line"></div><div class="line"><span class="comment">// 上面的代码可以简写成下面这个</span></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a=<span class="number">123</span>;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">&#125;)() <span class="comment">// --&gt; 123</span></div></pre></td></tr></table></figure><h3 id="ES6引入箭头函数"><a href="#ES6引入箭头函数" class="headerlink" title="ES6引入箭头函数"></a>ES6引入箭头函数</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">MDN箭头函数语法</a></p><p><a href="https://www.kancloud.cn/kancloud/es6-in-depth/47781" target="_blank" rel="external">深入浅出ES6箭头函数</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">x =&gt; <span class="built_in">console</span>.log(x*x);</div><div class="line"></div><div class="line"><span class="comment">// 等同于下面这个方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x*x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x*x);</div><div class="line">foo(<span class="number">5</span>) <span class="comment">// --&gt; 25</span></div></pre></td></tr></table></figure><p>参数只有一个可以省略括号，其他情况如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 两个参数:</span></div><div class="line">(x, y) =&gt; x * x + y * y</div><div class="line"></div><div class="line"><span class="comment">// 无参数:</span></div><div class="line">() =&gt; <span class="number">3.14</span></div><div class="line"></div><div class="line"><span class="comment">// 可变参数:</span></div><div class="line">(x, y, ...rest) =&gt; &#123;</div><div class="line">    <span class="keyword">var</span> i, sum = x + y;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;rest.length; i++) &#123;</div><div class="line">        sum += rest[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="箭头函数改变了this指向"><a href="#箭头函数改变了this指向" class="headerlink" title="箭头函数改变了this指向"></a>箭头函数改变了this指向</h4><p>箭头函数内部的this是词法作用域，由上下文确定。</p><p>由于JavaScript函数对this绑定的错误处理，下面的例子无法得到预期结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</div><div class="line">    <span class="attr">getAge</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> b = <span class="keyword">this</span>.birth; <span class="comment">// 1990</span></div><div class="line">        <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="keyword">this</span>.birth; <span class="comment">// this指向window或undefined</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> fn();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.getAge(); <span class="comment">// --&gt; NaN</span></div></pre></td></tr></table></figure><p>箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</div><div class="line">    <span class="attr">getAge</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> b = <span class="keyword">this</span>.birth; <span class="comment">// 1990</span></div><div class="line">        <span class="keyword">var</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="keyword">this</span>.birth; <span class="comment">// this指向obj对象</span></div><div class="line">        <span class="keyword">return</span> fn();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.getAge(); <span class="comment">// 25</span></div></pre></td></tr></table></figure><p>如果使用箭头函数，以前的那种hack写法：<br>var that = this;<br>就不再需要了。</p><p>由于this在箭头函数中已经按照词法作用域绑定了，所以，用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</div><div class="line">    <span class="attr">getAge</span>: <span class="function"><span class="keyword">function</span> (<span class="params">year</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> b = <span class="keyword">this</span>.birth; <span class="comment">// 1990</span></div><div class="line">        <span class="keyword">var</span> fn = <span class="function">(<span class="params">y</span>) =&gt;</span> y - <span class="keyword">this</span>.birth; <span class="comment">// this.birth仍是1990</span></div><div class="line">        <span class="keyword">return</span> fn.call(&#123;<span class="attr">birth</span>:<span class="number">2000</span>&#125;, year);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.getAge(<span class="number">2015</span>); <span class="comment">// 25</span></div></pre></td></tr></table></figure><h2 id="Javascript闭包（Closure）"><a href="#Javascript闭包（Closure）" class="headerlink" title="Javascript闭包（Closure）"></a>Javascript闭包（Closure）</h2><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>变量的作用域无非就两种：全局变量和局部变量。</p><p>Javascript函数内部可以直接读取全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">123</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a);</div><div class="line">&#125;</div><div class="line">foo() <span class="comment">// --&gt; 123</span></div></pre></td></tr></table></figure><p>在函数外部无法读取函数内的局部变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a=<span class="number">123</span>;</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//ReferenceError: a is not defined</span></div></pre></td></tr></table></figure><p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  a=<span class="number">123</span>;</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// --&gt; 123</span></div></pre></td></tr></table></figure><h3 id="如何从外部读取局部变量？"><a href="#如何从外部读取局部变量？" class="headerlink" title="如何从外部读取局部变量？"></a>如何从外部读取局部变量？</h3><p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。</p><p>那就是在函数的内部，再定义一个函数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　<span class="keyword">var</span> n=<span class="number">123</span>;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="built_in">console</span>.log(n); <span class="comment">// --&gt; 123</span></div><div class="line">　　&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p><p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　<span class="keyword">var</span> n=<span class="number">123</span>;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　<span class="built_in">console</span>.log(n); </div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result=f1();</div><div class="line">result(); <span class="comment">// --&gt; 123</span></div><div class="line"></div><div class="line"><span class="comment">//也可以这样</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> n=<span class="number">123</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> x=<span class="number">456</span>;</div><div class="line"><span class="keyword">var</span> result=f1()(x);</div></pre></td></tr></table></figure><h3 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h3><p>上一节代码中的f2函数，就是闭包。</p><p>简单理解闭包就是能够读取其他函数内部变量的函数。</p><p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。</p><p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><h3 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h3><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　　　nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="built_in">console</span>.log(n);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> f2;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> result=f1();</div><div class="line">　　result(); <span class="comment">// 999</span></div><div class="line">　　nAdd();</div><div class="line">　　result(); <span class="comment">// 1000</span></div></pre></td></tr></table></figure><p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。</p><p>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p><p>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p><h3 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h3><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p><p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p><h3 id="理解下面几段代码"><a href="#理解下面几段代码" class="headerlink" title="理解下面几段代码"></a>理解下面几段代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">  <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">  <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> that.name</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">  <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> name</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</div></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">  <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.name</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()());</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[0423-JS笔记]]></title>
      <url>/2017/20170423JSNote.html</url>
      <content type="html"><![CDATA[<!-- build time:Tue Oct 31 2017 14:16:07 GMT+0800 (CST) --><h2 id="一、var、let、const区别与联系"><a href="#一、var、let、const区别与联系" class="headerlink" title="一、var、let、const区别与联系"></a>一、var、let、const区别与联系</h2><h3 id="JavaScript是弱类型语言，var可以定义各种数据类型和对象"><a href="#JavaScript是弱类型语言，var可以定义各种数据类型和对象" class="headerlink" title="JavaScript是弱类型语言，var可以定义各种数据类型和对象"></a>JavaScript是弱类型语言，var可以定义各种数据类型和对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> x = <span class="string">"abc"</span>;</div><div class="line"><span class="keyword">var</span> x = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> x = &#123; <span class="attr">name0</span> : value0,<span class="attr">name1</span> : value1 &#125;;</div><div class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"abc"</span>,<span class="number">123</span>,<span class="literal">true</span>); <span class="comment">// var x = ["abc",123,true]</span></div><div class="line"><span class="keyword">var</span> y; <span class="comment">//undefined</span></div><div class="line"><span class="keyword">var</span> y = <span class="literal">null</span>; <span class="comment">//null</span></div></pre></td></tr></table></figure><h3 id="var可以重复声明并赋值同一变量，后者覆盖前者-但let声明的变量在同一块级作用域中不能重复"><a href="#var可以重复声明并赋值同一变量，后者覆盖前者-但let声明的变量在同一块级作用域中不能重复" class="headerlink" title="var可以重复声明并赋值同一变量，后者覆盖前者;但let声明的变量在同一块级作用域中不能重复"></a>var可以重复声明并赋值同一变量，后者覆盖前者;但let声明的变量在同一块级作用域中不能重复</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>; <span class="comment">//var作用域是全局的或者函数级的</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> x = <span class="number">1</span>; <span class="comment">//let作用域是块级的&#123;&#125;内</span></div><div class="line">  <span class="built_in">console</span>.log(x);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 0</span></div><div class="line">foo() <span class="comment">// 1</span></div></pre></td></tr></table></figure><h3 id="循环体中，第一个例子循环本身及三次-timeout-回调均共享唯一的变量-i-。当循环结束执行时，i-的值变为3，当第一个-timeout-执行时，调用的-i-值为-3-；第二个人例子每次循环let声明的i均不一样，输出自然不一样。而的第二个才是我们想要的结果，所以循环体条件中很多情况用let更好"><a href="#循环体中，第一个例子循环本身及三次-timeout-回调均共享唯一的变量-i-。当循环结束执行时，i-的值变为3，当第一个-timeout-执行时，调用的-i-值为-3-；第二个人例子每次循环let声明的i均不一样，输出自然不一样。而的第二个才是我们想要的结果，所以循环体条件中很多情况用let更好" class="headerlink" title="循环体中，第一个例子循环本身及三次 timeout 回调均共享唯一的变量 i 。当循环结束执行时，i 的值变为3，当第一个 timeout 执行时，调用的 i 值为 3 ；第二个人例子每次循环let声明的i均不一样，输出自然不一样。而的第二个才是我们想要的结果，所以循环体条件中很多情况用let更好"></a>循环体中，第一个例子循环本身及三次 timeout 回调均共享唯一的变量 i 。当循环结束执行时，i 的值变为3，当第一个 timeout 执行时，调用的 i 值为 3 ；第二个人例子每次循环let声明的i均不一样，输出自然不一样。而的第二个才是我们想要的结果，所以循环体条件中很多情况用let更好</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(i)</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125; <span class="comment">//输出3个3</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(i)</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125; <span class="comment">//输出0，1，2</span></div></pre></td></tr></table></figure><h3 id="let是更完美的var"><a href="#let是更完美的var" class="headerlink" title="let是更完美的var"></a>let是更完美的var</h3><ul><li>let声明的变量拥有块级作用域</li><li>let声明的全局变量不是全局对象的属性</li><li>形如for (let i…)的循环在每次迭代时都为i创建新的绑定</li><li>用let重定义变量会抛出一个语法错误（SyntaxError）</li></ul><h3 id="const是ES6引入的新的声明类关键词，用来定义常量，不可改变常量的值"><a href="#const是ES6引入的新的声明类关键词，用来定义常量，不可改变常量的值" class="headerlink" title="const是ES6引入的新的声明类关键词，用来定义常量，不可改变常量的值"></a>const是ES6引入的新的声明类关键词，用来定义常量，不可改变常量的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> MAX_CAT_SIZE_KG = <span class="number">3000</span>; <span class="comment">// 正确</span></div><div class="line"></div><div class="line">MAX_CAT_SIZE_KG = <span class="number">5000</span>; <span class="comment">// 语法错误（SyntaxError）</span></div><div class="line">MAX_CAT_SIZE_KG++; <span class="comment">// 仍然会导致语法错误</span></div></pre></td></tr></table></figure><h2 id="二、循环"><a href="#二、循环" class="headerlink" title="二、循环"></a>二、循环</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for 循环</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">   <span class="built_in">console</span>.log(i);</div><div class="line">   <span class="comment">// more statements</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//while循环</span></div><div class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (n &lt; <span class="number">3</span>) &#123;</div><div class="line">  n++;</div><div class="line">  x += n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//do-while循环</span></div></pre></td></tr></table></figure><h3 id="for…in-语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。"><a href="#for…in-语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。" class="headerlink" title="for…in 语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。"></a>for…in 语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"obj."</span> + prop + <span class="string">" = "</span> + obj[prop]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//obj.a = 1</span></div><div class="line"><span class="comment">//obj.b = 2</span></div><div class="line"><span class="comment">//obj.c = 3</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//a</span></div><div class="line"><span class="comment">//b</span></div><div class="line"><span class="comment">//c</span></div></pre></td></tr></table></figure><h3 id="for…of语句在可迭代对象-包括-Array-Map-Set-String-TypedArray，arguments-对象等等-上创建一个迭代循环，对每个不同属性的属性值-调用一个自定义的有执行语句的迭代挂钩"><a href="#for…of语句在可迭代对象-包括-Array-Map-Set-String-TypedArray，arguments-对象等等-上创建一个迭代循环，对每个不同属性的属性值-调用一个自定义的有执行语句的迭代挂钩" class="headerlink" title="for…of语句在可迭代对象(包括 Array, Map, Set, String, TypedArray，arguments 对象等等)上创建一个迭代循环，对每个不同属性的属性值,调用一个自定义的有执行语句的迭代挂钩."></a>for…of语句在可迭代对象(包括 Array, Map, Set, String, TypedArray，arguments 对象等等)上创建一个迭代循环，对每个不同属性的属性值,调用一个自定义的有执行语句的迭代挂钩.</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 遍历Array:</span></div><div class="line"><span class="keyword">let</span> iterable = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 20</span></div><div class="line"><span class="comment">// 30</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历 String:</span></div><div class="line"><span class="keyword">let</span> iterable = <span class="string">"boo"</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// "b"</span></div><div class="line"><span class="comment">// "o"</span></div><div class="line"><span class="comment">// "o"</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历 TypedArray:</span></div><div class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0x00</span>, <span class="number">0xff</span>]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 255</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历Map:</span></div><div class="line"><span class="comment">// Map对象就是简单的键/值映射。其中键和值可以是任意值(对象或者原始值)，键值不能重复</span></div><div class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">"a"</span>, <span class="number">1</span>], [<span class="string">"b"</span>, <span class="number">2</span>], [<span class="string">"c"</span>, <span class="number">3</span>]]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(entry);</div><div class="line">&#125;</div><div class="line"><span class="comment">// [a, 1]</span></div><div class="line"><span class="comment">// [b, 2]</span></div><div class="line"><span class="comment">// [c, 3]</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历 Set:</span></div><div class="line"><span class="comment">// 集合（Set）对象允许你存储任意类型的唯一值（不能重复），无论它是原始值或者是对象引用</span></div><div class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历DOM集合...</span></div><div class="line"><span class="comment">// 遍历生成器...</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历另外的可遍历对象:</span></div><div class="line"><span class="comment">// 您也可以遍历一个已经明确的可遍历（可迭代）协议。</span></div><div class="line"><span class="comment">// ES6语法中Symbol 是一种特殊的、不可变的数据类型，可以作为对象属性的标识符使用。Symbol 对象是一个 symbol primitive data type 的隐式对象包装器。</span></div><div class="line"><span class="keyword">var</span> iterable = &#123;</div><div class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">i</span>: <span class="number">0</span>,</div><div class="line">      next() &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.i &lt; <span class="number">3</span>) &#123;</div><div class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="keyword">this</span>.i++, <span class="attr">done</span>: <span class="literal">false</span> &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div></pre></td></tr></table></figure><h3 id="for…of与for…in的区别"><a href="#for…of与for…in的区别" class="headerlink" title="for…of与for…in的区别"></a>for…of与for…in的区别</h3><ul><li>for…in循环会遍历一个object所有的可枚举属性。</li><li>for…of语法是为各种collection对象专门定制的，并不适用于所有的object.它会以这种方式迭代出任何拥有[Symbol.iterator] 属性的collection对象的每个元素。</li></ul><p>下面的例子演示了for…of 循环和 for…in 循环的区别。for…in 遍历（当前对象及其原型上的）每一个属性名称,而 for…of遍历（当前对象上的）每一个属性值:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.objCustom = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;; </div><div class="line"><span class="built_in">Array</span>.prototype.arrCustom = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> iterable = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</div><div class="line">iterable.foo = <span class="string">"hello"</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// logs 0, 1, 2, "foo", "arrCustom", "objCustom"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// logs 3, 5, 7</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array对象-MDN</a></p><h3 id="遍历数组："><a href="#遍历数组：" class="headerlink" title="遍历数组："></a>遍历数组：</h3><p><strong>普通方法遍历</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for循环</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; myArray.length; index++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(myArray[index]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// for-of循环</span></div><div class="line"><span class="comment">// 与forEach()不同的是，它可以正确响应break、continue和return语句</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> myArray) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>forEach遍历</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">对数组的遍历，参数是一个回调函数</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">x, i</span>) </span>&#123; <span class="built_in">console</span>.log(i+<span class="string">'.'</span>+x) &#125;) <span class="comment">//x：数组中遍历到的每一个元素，i：相对应的下标</span></div><div class="line"> </div><div class="line"><span class="comment">// 0.a</span></div><div class="line"><span class="comment">// 1.b</span></div><div class="line"><span class="comment">// 2.c</span></div></pre></td></tr></table></figure><p><strong>map遍历</strong></p><p>对数组的遍历，参数是一个回调函数，与forEach不同的是，map函数返回一个数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x, i</span>) </span>&#123; <span class="keyword">return</span> i+<span class="string">'.'</span>+x &#125;) <span class="comment">//x：数组中遍历到的每一个元素，i：相对应的下标</span></div><div class="line"> </div><div class="line"><span class="comment">// [ '0.a', '1.b', '2.c' ]</span></div></pre></td></tr></table></figure><p><strong>every遍历</strong></p><p>检查数组里的每一个元素的类型，参数是一个回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>].every(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">'string'</span> &#125;) <span class="comment">//x：数组中遍历到的每一个元素</span></div><div class="line"><span class="comment">// true</span></div><div class="line"></div><div class="line">[<span class="string">'a'</span>,<span class="number">123</span>].every(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">'string'</span> &#125;)</div><div class="line"><span class="comment">// false</span></div></pre></td></tr></table></figure><h2 id="四、浮点型"><a href="#四、浮点型" class="headerlink" title="四、浮点型"></a>四、浮点型</h2><p>IEEE 754<br>JavaScript中的浮点数采用IEEE-754格式的规定。更具体的说是一个双精度格式，这意味着每个浮点数占64位。虽然它不是二进制表示浮点数的唯一途径，但它是目前最广泛使用的格式。该格式用64位二进制表示像下面这样：<br><img src="http://yanhaijing.com/blog/75.png" alt="image"><br>你可能注意到机器表示的方法和约定俗成的书面表示一点不同。在64位中，1位用于标志位——用来表示一个数是正数还是负数。11位用于指数–这允许指数最大到1024。剩下的52位代表的尾数。如果你曾经好奇为什么JavaScript中的某些东西如+0 和 -0，标志位说明一切——JavaScript中的所有数字都有符号位。Infinity和NaN也被编码进浮点数——2047作为一个特殊的指数。如果尾数是0，它是一个正无穷或负无限。如果不是，那么它是NaN。</p><p><a href="https://www.cnblogs.com/snandy/p/4943138.html" target="_blank" rel="external">JS数字精度丢失的一些典型问题</a></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * floatTool 包含加减乘除四个方法，能确保浮点数运算不丢失精度</div><div class="line"> *</div><div class="line"> * 我们知道计算机编程语言里浮点数计算会存在精度丢失问题（或称舍入误差），其根本原因是二进制和实现位数限制有些数无法有限表示</div><div class="line"> * 以下是十进制小数对应的二进制表示</div><div class="line"> *      0.1 &gt;&gt; 0.0001 1001 1001 1001…（1001无限循环）</div><div class="line"> *      0.2 &gt;&gt; 0.0011 0011 0011 0011…（0011无限循环）</div><div class="line"> * 计算机里每种数据类型的存储是一个有限宽度，比如 JavaScript 使用 64 位存储数字类型，因此超出的会舍去。舍去的部分就是精度丢失的部分。</div><div class="line"> *</div><div class="line"> * ** method **</div><div class="line"> *  add / subtract / multiply /divide</div><div class="line"> *</div><div class="line"> * ** explame **</div><div class="line"> *  0.1 + 0.2 == 0.30000000000000004 （多了 0.00000000000004）</div><div class="line"> *  0.2 + 0.4 == 0.6000000000000001  （多了 0.0000000000001）</div><div class="line"> *  19.9 * 100 == 1989.9999999999998 （少了 0.0000000000002）</div><div class="line"> *</div><div class="line"> * floatObj.add(0.1, 0.2) &gt;&gt; 0.3</div><div class="line"> * floatObj.multiply(19.9, 100) &gt;&gt; 1990</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> floatTool = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 判断obj是否为一个整数</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isInteger</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor(obj) === obj</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 将一个浮点数转成整数，返回整数和倍数。如 3.14 &gt;&gt; 314，倍数是 100</div><div class="line">     * @param floatNum &#123;number&#125; 小数</div><div class="line">     * @return &#123;object&#125;</div><div class="line">     *   &#123;times:100, num: 314&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toInteger</span>(<span class="params">floatNum</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> ret = &#123;<span class="attr">times</span>: <span class="number">1</span>, <span class="attr">num</span>: <span class="number">0</span>&#125;</div><div class="line">        <span class="keyword">if</span> (isInteger(floatNum)) &#123;</div><div class="line">            ret.num = floatNum</div><div class="line">            <span class="keyword">return</span> ret</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> strfi  = floatNum + <span class="string">''</span></div><div class="line">        <span class="keyword">var</span> dotPos = strfi.indexOf(<span class="string">'.'</span>)</div><div class="line">        <span class="keyword">var</span> len    = strfi.substr(dotPos+<span class="number">1</span>).length</div><div class="line">        <span class="keyword">var</span> times  = <span class="built_in">Math</span>.pow(<span class="number">10</span>, len)</div><div class="line">        <span class="keyword">var</span> intNum = <span class="built_in">parseInt</span>(floatNum * times + <span class="number">0.5</span>, <span class="number">10</span>)</div><div class="line">        ret.times  = times</div><div class="line">        ret.num    = intNum</div><div class="line">        <span class="keyword">return</span> ret</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 核心方法，实现加减乘除运算，确保不丢失精度</div><div class="line">     * 思路：把小数放大为整数（乘），进行算术运算，再缩小为小数（除）</div><div class="line">     *</div><div class="line">     * @param a &#123;number&#125; 运算数1</div><div class="line">     * @param b &#123;number&#125; 运算数2</div><div class="line">     * @param digits &#123;number&#125; 精度，保留的小数点数，比如 2, 即保留为两位小数</div><div class="line">     * @param op &#123;string&#125; 运算类型，有加减乘除（add/subtract/multiply/divide）</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params">a, b, op</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> o1 = toInteger(a)</div><div class="line">        <span class="keyword">var</span> o2 = toInteger(b)</div><div class="line">        <span class="keyword">var</span> n1 = o1.num</div><div class="line">        <span class="keyword">var</span> n2 = o2.num</div><div class="line">        <span class="keyword">var</span> t1 = o1.times</div><div class="line">        <span class="keyword">var</span> t2 = o2.times</div><div class="line">        <span class="keyword">var</span> max = t1 &gt; t2 ? t1 : t2</div><div class="line">        <span class="keyword">var</span> result = <span class="literal">null</span></div><div class="line">        <span class="keyword">switch</span> (op) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'add'</span>:</div><div class="line">                <span class="keyword">if</span> (t1 === t2) &#123; <span class="comment">// 两个小数位数相同</span></div><div class="line">                    result = n1 + n2</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t1 &gt; t2) &#123; <span class="comment">// o1 小数位 大于 o2</span></div><div class="line">                    result = n1 + n2 * (t1 / t2)</div><div class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// o1 小数位 小于 o2</span></div><div class="line">                    result = n1 * (t2 / t1) + n2</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> result / max</div><div class="line">            <span class="keyword">case</span> <span class="string">'subtract'</span>:</div><div class="line">                <span class="keyword">if</span> (t1 === t2) &#123;</div><div class="line">                    result = n1 - n2</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t1 &gt; t2) &#123;</div><div class="line">                    result = n1 - n2 * (t1 / t2)</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    result = n1 * (t2 / t1) - n2</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> result / max</div><div class="line">            <span class="keyword">case</span> <span class="string">'multiply'</span>:</div><div class="line">                result = (n1 * n2) / (t1 * t2)</div><div class="line">                <span class="keyword">return</span> result</div><div class="line">            <span class="keyword">case</span> <span class="string">'divide'</span>:</div><div class="line">                <span class="keyword">return</span> result = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> r1 = n1 / n2</div><div class="line">                    <span class="keyword">var</span> r2 = t2 / t1</div><div class="line">                    <span class="keyword">return</span> operation(r1, r2, <span class="string">'multiply'</span>)</div><div class="line">                &#125;()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 加减乘除的四个接口</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> operation(a, b, <span class="string">'add'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">subtract</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> operation(a, b, <span class="string">'subtract'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> operation(a, b, <span class="string">'multiply'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> operation(a, b, <span class="string">'divide'</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// exports</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">add</span>: add,</div><div class="line">        <span class="attr">subtract</span>: subtract,</div><div class="line">        <span class="attr">multiply</span>: multiply,</div><div class="line">        <span class="attr">divide</span>: divide</div><div class="line">    &#125;</div><div class="line">&#125;();</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
        <categories>
            
            <category> 笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
