<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wangriyu’s Blog</title>
  <subtitle>子非鱼，安知鱼之乐也！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangriyu.wang/"/>
  <updated>2017-09-02T14:56:38.000Z</updated>
  <id>http://wangriyu.wang/</id>
  
  <author>
    <name>鱼乐</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Hexo主题Yelee</title>
    <link href="http://wangriyu.wang/2017/08/24/Hexo/"/>
    <id>http://wangriyu.wang/2017/08/24/Hexo/</id>
    <published>2017-08-23T16:00:00.000Z</published>
    <updated>2017-09-02T14:56:38.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=729638&auto=1&height=66"></iframe>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前使用的是next主题，虽然next很强大，但是next的样式并不是我很喜欢的类型。<br>后来无意间在别人博客上看到这种双栏主题，而且还有各种动画效果，作为颜控立马被吸引了，然后发现类似的双栏博客有好几个，像yilia、spfk、yelee等。<br>后者好像都是在yilia的基础上修改的，而我选择了yelee，因为我更喜欢其色调，并且作者很贴心地写了<a href="http://moxfive.coding.me/yelee" title="Yelee主题使用说明" target="_blank" rel="external">gitbook操作指南</a>，这对刚接触博客的小白我来说真是福音。<br>感谢作者提供了这么好的主题，后来使用上碰到的一些问题和修改，我都一一列举在下面，以后如果还有修改我还会更新。</p>
<hr>
<p>按照gitbook的教程我完成博客的基础配置，效果基本上已经很满足了，但是测试上发现有些小小小问题，作为强迫症，修改之。</p>
<h2 id="代码块前后留白问题："><a href="#代码块前后留白问题：" class="headerlink" title="代码块前后留白问题："></a>代码块前后留白问题：</h2><p>代码块中的代码空行消失，都被挤到前后了，issue上有人解决了：<br><img src="/images/hexo/CodeSpace.png" alt="代码显示错位"></p>
<hr>
<p>然后是页面跳转问题，我希望的是本站内的链接和标签都在本窗口打开，外站的都在新标签页打开，<br>但是像搜索结果和迷你文章列表等点击会在新标签页打开，得做如下修改：</p>
<h2 id="取消搜索结果跳转新标签页："><a href="#取消搜索结果跳转新标签页：" class="headerlink" title="取消搜索结果跳转新标签页："></a>取消搜索结果跳转新标签页：</h2><p><strong>打开文件：themes/yelee/source/js/search.js</strong></p>
<p>找到</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// show search results</span></div><div class="line"><span class="keyword">if</span> (isMatch) &#123;</div><div class="line">str += <span class="string">"&lt;li&gt;&lt;a href='"</span>+ data_url +<span class="string">"' class='search-result-title' target='_blank'&gt;"</span>+ <span class="string">"&gt; "</span> + data_title +<span class="string">"&lt;/a&gt;"</span>;</div></pre></td></tr></table></figure>
<p>删除 <code>target=&#39;_blank&#39;</code>字段</p>
<hr>
<h2 id="取消迷你文章在新窗口打开"><a href="#取消迷你文章在新窗口打开" class="headerlink" title="取消迷你文章在新窗口打开"></a>取消迷你文章在新窗口打开</h2><p><img src="/images/hexo/miniArchives.png" alt="迷你文章列表"></p>
<p><strong>打开文件：themes/yelee/layout/_partial/open-in-new-tab.ejs</strong></p>
<p>找到</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (theme.open_in_new.mini_archives) &#123; %&gt; miniArchives: <span class="string">"a.post-list-link"</span>, &lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
<p>将<code>theme.open_in_new.mini_archives</code>直接改为false</p>
<p>我在 _config.yml 里设置 mini_archives 好像不起作用</p>
<hr>
<p><strong>下面的是我自己的一些修改，如有需要可供参考！</strong></p>
<blockquote>
<p>我的所有修改记录都放在仓库里了：<a href="https://github.com/wangriyu/hexo-theme-yelee" title="点击访问" target="_blank" rel="external">github</a></p>
</blockquote>
<h2 id="添加文章字数统计"><a href="#添加文章字数统计" class="headerlink" title="添加文章字数统计"></a>添加文章字数统计</h2><p>用到的插件是<a href="https://github.com/willin/hexo-wordcount" title="点击访问" target="_blank" rel="external">hexo-wordcount</a></p>
<p>安装很简单，一条命令<code>npm i --save hexo-wordcount</code>即可解决，<br>下面的配置是信息显示位置和样式，仅供参考，也可以自行修改</p>
<p><strong>打开文件：themes/yelee/layout/_partial/post/tag.ejs</strong></p>
<p>在下述位置加上两个span标签：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (post.tags &amp;&amp; post.tags.length)&#123; %&gt;</div><div class="line">    &lt;div class="article-tag tagcloud"&gt;</div><div class="line">        &lt;%-</div><div class="line">          list_tags(post.tags, &#123;</div><div class="line">            show_count: false,</div><div class="line">            class: 'article-tag'</div><div class="line">          &#125;)</div><div class="line">        %&gt;</div><div class="line">+       &lt;span class="post-count"&gt;总字数&lt;%= wordcount(post.content) %&gt;&lt;/span&gt;</div><div class="line">+       &lt;span class="post-count"&gt;预计阅读&lt;%= min2read(post.content) %&gt;分钟&lt;/span&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
<p>添加样式：<br><strong>打开文件：themes/yelee/source/css/_partial/tagcloud.styl</strong></p>
<p>找到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.article-tag::before,</div><div class="line">.article-category::before</div><div class="line">    float left</div><div class="line">    color #999</div><div class="line">    font base-font-size FontAwesome</div><div class="line">    margin-right 5px</div><div class="line">    margin-top (1/3)rem</div><div class="line"></div><div class="line">.article-tag::before</div><div class="line">    content &quot;\f02b&quot;</div><div class="line">    margin-left 1em</div><div class="line"></div><div class="line">.article-category::before</div><div class="line">    content &quot;\f02d&quot;</div></pre></td></tr></table></figure>
<p>在<code>.article-category::before</code>前插入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.article-tag span</div><div class="line">    cursor: pointer</div><div class="line">    line-height: 31px</div><div class="line">    font-size: 13px</div><div class="line">    color: #aaa</div><div class="line"></div><div class="line">.article-tag span::before</div><div class="line">    content: &quot;\27A4&quot;</div><div class="line">    margin-left: 1em</div></pre></td></tr></table></figure>
<p>content: “\27A4” 是unicode图标编码，可以换成其他的</p>
<p><a href="https://unicode-table.com/cn" title="点击访问" target="_blank" rel="external">unicode图标</a></p>
<p><a href="http://fontawesome.io/icons" title="点击访问" target="_blank" rel="external">Font Awesome Icon</a></p>
<hr>
<h2 id="添加音乐播放器"><a href="#添加音乐播放器" class="headerlink" title="添加音乐播放器"></a>添加音乐播放器</h2><p>我知道的有三种形式、两种样式的播放器添加方式</p>
<ul>
<li>网易云<code>iframe</code>标签<br>到网易云网页上找喜欢的歌，点击生产外链播放器，获取<code>iframe</code>标签代码，粘贴到想放的地方即可，也可以直接贴在markdown文本中，<br>我就是这样在每篇文章中插入一首歌;<br>如果是歌单，因为限制问题不能正常打开生产外链播放器的网页，需要以下操作，右键点击歌单的<code>生成外链播放器</code></li>
</ul>
<p><img src="/images/hexo/NeteasePlayer.png" alt="网易云歌单"></p>
<p>点击审查元素，图中的inspect，开发者工具会定位到该标签，data-href的最后那串数字就是我们的歌单ID，这个ID后面还要用到</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a data-action=<span class="string">"outchain"</span> data-href=<span class="string">"/outchain/0/604161338/"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"des s-fc7"</span>&gt;生成外链播放器&lt;<span class="regexp">/a&gt;</span></div></pre></td></tr></table></figure>
<p>将浏览器中的网址改成 <a href="https://music.163.com/#/outchain/0/604161338/" target="_blank" rel="external">https://music.163.com/#/outchain/0/604161338/</a> ，#后面就是上面得到的data-href，<br>刷新页面就可以看见生产外链播放器的网页了</p>
<ul>
<li>使用aplayer插件<a href="https://github.com/MoePlayer/hexo-tag-aplayer" title="点击访问" target="_blank" rel="external">hexo-tag-aplayer</a></li>
</ul>
<p>安装：<code>npm install --save hexo-tag-aplayer</code><br>使用：<code>{% aplayer title author url [picture_url, narrow, autoplay, width:xxx, lrc:xxx] %}</code><br>我没用过这个方法，好像这个插件得用音乐文件或者指定地址，网易云的ID可能没用</p>
<ul>
<li>使用aplayer库</li>
</ul>
<p>在主题的_config.yml文件底部添加两个库：</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CDN</div><div class="line">  ...</div><div class="line"><span class="addition">+  aplayer: //cdn.bootcss.com/aplayer/1.6.0/APlayer.min.js</span></div><div class="line"><span class="addition">+  player: //api.i-meto.com/music/player.js</span></div></pre></td></tr></table></figure>
<p><strong>打开文件：themes/yelee/layout/_partial/head.ejs</strong><br>在jquery后面导入库</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script src="&lt;%- theme.CDN.jquery %&gt;"&gt;&lt;/script&gt;</div><div class="line">&lt;script src="&lt;%- theme.CDN.clipboard %&gt;"&gt;&lt;/script&gt;</div><div class="line"><span class="addition">+ &lt;script src="&lt;%- theme.CDN.aplayer %&gt;"&gt;&lt;/script&gt;</span></div><div class="line"><span class="addition">+ &lt;script src="&lt;%- theme.CDN.player %&gt;"&gt;&lt;/script&gt;</span></div></pre></td></tr></table></figure>
<p>使用：粘贴以下代码生成播放器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div</div><div class="line">  <span class="class"><span class="keyword">class</span></span>=<span class="string">"aplayer"</span></div><div class="line">  data-id=<span class="string">"883067320"</span>    <span class="comment">// 歌曲/专辑/歌单 ID</span></div><div class="line">  data-server=<span class="string">"netease"</span>  <span class="comment">// 音乐平台：netease、tencent、xiami、kugou、baidu</span></div><div class="line">  data-type=<span class="string">"playlist"</span>   <span class="comment">// 类型：song、album、playlist、search</span></div><div class="line">  data-mode=<span class="string">"random"</span>     <span class="comment">// 播放模式：random、single、circulation、order</span></div><div class="line">  data-autoplay=<span class="string">"true"</span>&gt;  <span class="comment">// 自动播放</span></div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure>
<h2 id="修改头像动画"><a href="#修改头像动画" class="headerlink" title="修改头像动画"></a>修改头像动画</h2><p><strong>打开文件：themes/yelee/source/css/_partial/main.styl</strong></p>
<p>修改头像为旋转效果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">    ...</div><div class="line">    <span class="comment">// animation: profilepic .15s linear infinite alternate;</span></div><div class="line">    <span class="comment">// -webkit-animation: profilepic .15s linear infinite alternate;</span></div><div class="line">    animation: profilepic <span class="number">5</span>s linear infinite;</div><div class="line">    -webkit-animation: profilepic <span class="number">5</span>s linear infinite; <span class="comment">// profilepic动画，周期5秒，速度不变，无限循环</span></div><div class="line">&#125;</div><div class="line">@keyframes profilepic &#123;</div><div class="line">    <span class="number">0</span>% &#123;</div><div class="line">        <span class="comment">// right: 4px;</span></div><div class="line">        <span class="comment">// top: 1x;</span></div><div class="line">        transform: rotate(<span class="number">360</span>deg);</div><div class="line">    &#125;</div><div class="line">    <span class="number">100</span>% &#123;</div><div class="line">        <span class="comment">// right: 0px;</span></div><div class="line">        <span class="comment">// top: -1px;</span></div><div class="line">        transform: rotate(<span class="number">0</span>deg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>animation: name duration timing-function delay iteration-count direction;</code><br>animation是CSS动画属性：第一个参数是用@keyframes定义的动画，第二个参数是单次动画持续时间，<br>第三个是动画的速度曲线，第四个参数是动画开始之前的延迟，第五个是动画应该播放的次数，最后一个规定是否应该轮流反向播放动画</p>
<h2 id="添加打赏"><a href="#添加打赏" class="headerlink" title="添加打赏"></a>添加打赏</h2><p>给yelee的配置文件<code>_config.yml</code>加上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 打赏</div><div class="line"># 将on改为false去掉打赏</div><div class="line">donate:</div><div class="line">  on: true</div><div class="line">  wechatpay: /img/wechatpay.jpg</div><div class="line">  alipay: /img/alipay.jpg</div></pre></td></tr></table></figure>
<p><strong>打开文件：themes/yelee/layout/_partial/left-col.ejs</strong><br>找到</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;nav <span class="class"><span class="keyword">class</span></span>=<span class="string">"header-nav"</span>&gt;</div><div class="line">    &lt;ul class="social"&gt;</div><div class="line">        &lt;% for (var i in theme.subnav)&#123; %&gt;</div><div class="line">            &lt;a class="fa &lt;%= i %&gt;" href="&lt;%- url_for(theme.subnav[i]) %&gt;" title="&lt;%= i %&gt;"&gt;&lt;/a&gt;</div><div class="line">        &lt;%&#125;%&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;<span class="regexp">/nav&gt;</span></div></pre></td></tr></table></figure>
<p>在<code>&lt;/ul&gt;</code>下添加：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (theme.donate.on) &#123; %&gt;</div><div class="line">    &lt;ul class="social"&gt;</div><div class="line">        &lt;div style="position: absolute; top: 95%; left: 50%; margin-left: -30px;"&gt;</div><div class="line">            &lt;p style="display: block"&gt;</div><div class="line">                &lt;a</div><div class="line">                    class="donateIcon"</div><div class="line">                    href="javascript:void(0)"</div><div class="line">                    onmouseout="</div><div class="line">                        var qr = document.getElementById('donate');</div><div class="line">                        qr.style.display='none';</div><div class="line">                    "</div><div class="line">                    onmouseenter="</div><div class="line">                        var qr = document.getElementById('donate');</div><div class="line">                        qr.style.display='block';</div><div class="line">                    "&gt;</div><div class="line">                    赏</div><div class="line">                &lt;/a&gt;</div><div class="line">            &lt;/p&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
<p>在<code>left-col.ejs</code>文件末尾<code>&lt;/div&gt;</code>之前添加：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (theme.donate.alipay) &#123; %&gt;</div><div class="line">    &lt;div id="donate"&gt;</div><div class="line">        &lt;img id="alipay" src="&lt;%=theme.donate.alipay%&gt;" width="260px" alt="&lt;%=theme.author%&gt; Alipay"/&gt;</div><div class="line">        &lt;div class="triangle"&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
<p><strong>打开文件：themes/yelee/source/css/_partial/customise/social-icon.styl</strong><br>在顶部找到找到</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#header .header-nav .social</div><div class="line">    margin-top 10px</div><div class="line">    text-align center</div><div class="line">    font-family Arial</div><div class="line">    a</div><div class="line">        width base-font-size + 21</div><div class="line">        height @width</div><div class="line">        border-radius 50%</div><div class="line">        margin 0 2px 6px</div><div class="line">        vertical-align middle</div><div class="line">        font-size .66*@width</div><div class="line">        line-height @width</div><div class="line">        text-align center</div><div class="line">        color white</div><div class="line">        background #6f7170</div><div class="line">        opacity i-opacity</div><div class="line">        box-shadow 1px 2px 2px rgba(0,0,0, .1), 1px 1px 3px rgba(0,0,0, .3)</div><div class="line">        &amp;:hover</div><div class="line">            opacity 1</div><div class="line">            transform scale(1.1)</div></pre></td></tr></table></figure>
<p>在<code>a</code>标签的样式后面加上</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">.donateIcon</div><div class="line">    display block</div><div class="line">    width 56px</div><div class="line">    margin auto</div><div class="line">    height 56px</div><div class="line">    line-height 56px</div><div class="line">    font-size 20px</div><div class="line">    color #fff</div><div class="line">    border none</div><div class="line">    background #4094c7</div><div class="line">    border-radius 50%</div><div class="line">    text-align center</div><div class="line">    -webkit-box-shadow 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12)</div><div class="line">    box-shadow 0 2px 5px 0 rgba(0,0,0,0.16), 0 2px 10px 0 rgba(0,0,0,0.12)</div><div class="line">    -webkit-transition 0.4s ease-in-out</div><div class="line">    -moz-transition 0.4s ease-in-out</div><div class="line">    -ms-transition 0.4s ease-in-out</div><div class="line">    transition 0.4s ease-in-out</div></pre></td></tr></table></figure>
<p><strong>打开文件：themes/yelee/source/css/_partial/main.styl</strong><br>找到<code>intrude-less</code>并加上donate标签的样式：</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">.intrude-less &#123;</div><div class="line">    width: 76%;</div><div class="line">    text-align: center;</div><div class="line">    margin: 112px auto 0;</div><div class="line"><span class="addition">+   #donate &#123;</span></div><div class="line"><span class="addition">+       display: none;</span></div><div class="line"><span class="addition">+       position: fixed;</span></div><div class="line"><span class="addition">+       top: 312px;</span></div><div class="line"><span class="addition">+       left: 20px;</span></div><div class="line"><span class="addition">+       img &#123;</span></div><div class="line"><span class="addition">+           border-radius: 5px;</span></div><div class="line"><span class="addition">+       &#125;</span></div><div class="line"><span class="addition">+       .triangle &#123;</span></div><div class="line"><span class="addition">+           height: 0;</span></div><div class="line"><span class="addition">+           width: 0;</span></div><div class="line"><span class="addition">+           margin: -5px 0 0 85px;</span></div><div class="line"><span class="addition">+           border-right: 45px solid transparent;</span></div><div class="line"><span class="addition">+           border-left: 45px solid transparent;</span></div><div class="line"><span class="addition">+           border-top: 30px solid #059FE7;</span></div><div class="line"><span class="addition">+       &#125;</span></div><div class="line"><span class="addition">+   &#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="修改移动端背景"><a href="#修改移动端背景" class="headerlink" title="修改移动端背景"></a>修改移动端背景</h2><p><strong>目标文件：themes/yelee/layout/_partial/background.ejs</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;% <span class="keyword">if</span> (theme.background_image)&#123; %&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    $(document).ready(function() &#123;</div><div class="line">      var iPad = window.navigator.userAgent.indexOf('iPad');</div><div class="line">      if (iPad &gt; -1) &#123;</div><div class="line">        let bgColorList = ["#9db3f4", "#414141", "#e5a859", "#f5dfc6", "#c084a0", "#847e72", "#cd8390", "#996731"];</div><div class="line">        let bgColor = Math.ceil(Math.random() * (bgColorList.length - 1));</div><div class="line">        $("body").css(&#123;"background-color": bgColorList[bgColor], "background-size": "cover"&#125;);</div><div class="line">      &#125; else if ($(".left-col").css("display") === "none") &#123;</div><div class="line">        $("body").css(&#123;</div><div class="line">          "background-image": "url(&lt;%- theme.root_url %&gt;/background/mobile.jpg)",</div><div class="line">          "background-repeat": "no-repeat",</div><div class="line">          "background-attachment": "fixed",</div><div class="line">          "background-size": "cover"</div><div class="line">        &#125;)</div><div class="line">      &#125; else &#123;</div><div class="line">        var backgroundnum = &lt;%= theme.background_image %&gt;;</div><div class="line">        var backgroundimg = "url(&lt;%- theme.root_url %&gt;/background/bg-x.jpg)".replace(/x/gi, Math.ceil(Math.random() * backgroundnum));</div><div class="line">        $("body").css(&#123;</div><div class="line">          "background": backgroundimg,</div><div class="line">          "background-position": "0% 80%",</div><div class="line">          "background-attachment": "fixed",</div><div class="line">          "background-size": "cover"</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
<h2 id="推荐几个使用工具"><a href="#推荐几个使用工具" class="headerlink" title="推荐几个使用工具"></a>推荐几个使用工具</h2><p><a href="https://zhitu.isux.us/" title="点击访问" target="_blank" rel="external">智图</a>：压缩图片很方便</p>
<p><a href="https://clipchamp.com/zh-Hans/dashboard" target="_blank" rel="external">在线压缩视频</a></p>
<p><a href="https://ezgif.com/video-to-gif" target="_blank" rel="external">EZGIF</a>：视频转gif，压缩截取等</p>
]]></content>
    
    <summary type="html">
    
      更换博客主题Yelee的前前后后
    
    </summary>
    
      <category term="Web" scheme="http://wangriyu.wang/categories/Web/"/>
    
    
      <category term="Yelee" scheme="http://wangriyu.wang/tags/Yelee/"/>
    
  </entry>
  
  <entry>
    <title>浏览器本地存储</title>
    <link href="http://wangriyu.wang/2017/08/15/20170815Storage/"/>
    <id>http://wangriyu.wang/2017/08/15/20170815Storage/</id>
    <published>2017-08-14T16:00:00.000Z</published>
    <updated>2017-08-15T14:29:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="intro">前言</h2>

<blockquote>
<p>浏览器存储数据的几种方式</p>
</blockquote>
<ul>
<li>Cookies</li>
<li>Local Storage &amp; Session Storage</li>
<li>WebSQL &amp; IndexedDB</li>
</ul>
<a id="more"></a>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=39635710&auto=1&height=66"></iframe>

<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>HTTP Cookie（也叫Web cookie或者浏览器Cookie）是服务器发送到用户浏览器并保存在浏览器上的一块数据，它会在浏览器下一次发起请求时被携带并发送到服务器上。比较经典的，可以它用来确定两次请求是否来自于同一个浏览器，从而能够确认和保持用户的登录状态（类似token）。对于购物网站而言，cookie是非常重要的，为了实现购物车功能，把已选物品加入cookie，可以实现不同页面之间数据的同步，同时在提交订单的时候又会把这些cookie传到后台。</p>
<p>Cookie主要用在以下三个方面:</p>
<ul>
<li>会话状态管理（如用户登录状态、购物车）</li>
<li>个性化设置（如用户自定义设置）</li>
<li>浏览器行为跟踪（如跟踪分析用户行为）</li>
</ul>
<h3 id="1-创建cookie"><a href="#1-创建cookie" class="headerlink" title="1. 创建cookie"></a>1. 创建cookie</h3><p>   当服务器收到HTTP请求（request）时，可以在响应头（headers）里面增加一个Set-Cookie头部。浏览器收到响应（response）之后会取出Cookie信息并保存，之后对该服务器每一次请求中都通过Cookie请求头部将Cookie信息发送给服务器。另外，Cookie的过期时间、域、路径、有效期、站点都可以根据需要来指定<br>   格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-Cookie: &lt;cookie名称&gt; = &lt;cookie值&gt;</div></pre></td></tr></table></figure></p>
<p>服务器告诉客户端要保存Cookie信息， 响应的数据里面应该包含Set-Cookie头，浏览器收到之后会将Cookie保存，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">HTTP/1.0 200 OK</div><div class="line">Content-type: text/html</div><div class="line">Set-Cookie: yummy_cookie = choco</div><div class="line">Set-Cookie: tasty_cookie = strawberry</div></pre></td></tr></table></figure></p>
<p>对该服务器发起的每一次新的请求，浏览器都会将之前保存的Cookie信息通过Cookie请求头发送给服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">GET /sample_page.html HTTP/1.1</div><div class="line">Host: www.example.org</div><div class="line">Cookie: yummy_cookie = choco; tasty_cookie = strawberry</div></pre></td></tr></table></figure></p>
<h3 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h3><ul>
<li>会话期Cookie （session cookie）<br>会话期Cookie是最简单的Cookie：浏览器关闭之后它会被自动删除</li>
<li><p>持久Cookie<br>持久Cookie可以指定一个特定的过期时间（Expires）或者有效期（Max-Age）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-Cookie: name = SmartestEE; expires = Sat, 02 May 2017 23:38:25 GMT // max-age = 3600 * 72</div></pre></td></tr></table></figure>
</li>
<li><p>安全类型Cookie<br>安全类型可以设置secure 选项，该选项只是一个标记而没有值。只有在使用SLL和HTTPS协议向服务器发起请求时，才能确保Cookie被安全地发送到服务器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-Cookie: name = Nicholas; secure</div></pre></td></tr></table></figure>
</li>
<li><p>HttpOnly类型Cookie<br>HttpOnly类型可以设置HttpOnly选项，HTTP-only类型的Cookie不能使用Javascript通过Document.cookie属性来访问，从而能够在一定程度上阻止跨域脚本攻击（XSS）。HttpOnly标志并没有给你提供额外的加密或者安全性上的能力，当整个机器暴露在不安全的环境时，切记绝不能通过HTTP Cookie存储、传输机密或者敏感信息。JavaScript可以通过跨站脚本攻击（XSS）的方式来窃取Cookie</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set-Cookie: name = Nicholas; HttpOnly</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-Cookie的作用域"><a href="#3-Cookie的作用域" class="headerlink" title="3. Cookie的作用域"></a>3. Cookie的作用域</h3><p>   Domain和Path指令定义了Cookie的作用域，即需要发送Cookie的URL集合。</p>
<ul>
<li><p>Domain指令规定了需要发送Cookie的主机名。如果没有指定，默认为当前的文档地址上的主机名（但是不包含子域名）。如果指定了Domain，则一般包含子域名。</p>
<p> 如果设置了Domain=mozilla.org，则Cookie包含在子域名中（如developer.mozilla.org）。</p>
</li>
<li><p>Path指令表明需要发送Cookie的URL路径。字符%x2F (即”/“)用做文件夹分隔符，子文件夹也会被匹配到。</p>
<p> 如设置Path=/docs，则下面这些地址都将匹配到：”/docs”，”/docs/Web/“，”/docs/Web/HTTP”</p>
</li>
</ul>
<h3 id="4-JavaScript通过Document-cookies访问设置Cookie"><a href="#4-JavaScript通过Document-cookies访问设置Cookie" class="headerlink" title="4.  JavaScript通过Document.cookies访问设置Cookie"></a>4.  JavaScript通过Document.cookies访问设置Cookie</h3><p>通过Document.cookie属性可以来创建新的Cookie，也能够通过该属性来访问未被指定HttpOnly标志的Cookie。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"yummy_cookie=choco"</span>; </div><div class="line"><span class="built_in">document</span>.cookie = <span class="string">"tasty_cookie=strawberry"</span>; </div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.cookie); </div><div class="line"><span class="comment">// logs "yummy_cookie=choco; tasty_cookie=strawberry"</span></div></pre></td></tr></table></figure></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/cookie" target="_blank" rel="external">一个完整支持unicode的cookie读取/写入器</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> docCookies = &#123;</div><div class="line">  <span class="comment">// docCookies.getItem(name), 读取一个cookie。如果cookie不存在返回null</span></div><div class="line">  <span class="comment">// encodeURIComponent 转义除了字母、数字、(、)、. 、! 、~ 、* 、' 、- 和 _ 之外的所有字符</span></div><div class="line">  getItem: <span class="function"><span class="keyword">function</span> (<span class="params">sKey</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:(?:^|.*;)\\s*"</span> + <span class="built_in">encodeURIComponent</span>(sKey).replace(<span class="regexp">/[\-\.\+\*]/g</span>, <span class="string">"\\$&amp;"</span>) + <span class="string">"\\s*\\=\\s*([^;]*).*$)|^.*$"</span>), <span class="string">"$1"</span>)) || <span class="literal">null</span>;</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="comment">// docCookies.setItem(name, value, [end], [path], [domain], [secure]), 创建或覆盖一个cookie</span></div><div class="line">  <span class="comment">// end (可选)最大时间的秒数 (一年为31536e3， 永不过期的cookie为Infinity) ，或者过期时间的GMTString格式或Date对象; 如果没有定义则会在会话结束时过期 (number – 有限的或 Infinity – string, Date object or null)。</span></div><div class="line">  setItem: <span class="function"><span class="keyword">function</span> (<span class="params">sKey, sValue, vEnd, sPath, sDomain, bSecure</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!sKey || <span class="regexp">/^(?:expires|max\-age|path|domain|secure)$/i</span>.test(sKey)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> sExpires = <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span> (vEnd) &#123;</div><div class="line">      <span class="keyword">switch</span> (vEnd.constructor) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">Number</span>:</div><div class="line">          sExpires = vEnd === <span class="literal">Infinity</span> ? <span class="string">"; expires=Fri, 31 Dec 9999 23:59:59 GMT"</span> : <span class="string">"; max-age="</span> + vEnd;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">String</span>:</div><div class="line">          sExpires = <span class="string">"; expires="</span> + vEnd;</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">Date</span>:</div><div class="line">          sExpires = <span class="string">"; expires="</span> + vEnd.toUTCString();</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(sKey) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(sValue) + sExpires + (sDomain ? <span class="string">"; domain="</span> + sDomain : <span class="string">""</span>) + (sPath ? <span class="string">"; path="</span> + sPath : <span class="string">""</span>) + (bSecure ? <span class="string">"; secure"</span> : <span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="comment">// docCookies.removeItem(name, [path], domain), 删除一个cookie</span></div><div class="line">  removeItem: <span class="function"><span class="keyword">function</span> (<span class="params">sKey, sPath, sDomain</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!sKey || !<span class="keyword">this</span>.hasItem(sKey)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(sKey) + <span class="string">"=; expires=Thu, 01 Jan 1970 00:00:00 GMT"</span> + ( sDomain ? <span class="string">"; domain="</span> + sDomain : <span class="string">""</span>) + ( sPath ? <span class="string">"; path="</span> + sPath : <span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="comment">// docCookies.hasItem(name), 检查一个cookie是否存在</span></div><div class="line">  hasItem: <span class="function"><span class="keyword">function</span> (<span class="params">sKey</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(?:^|;\\s*)"</span> + <span class="built_in">encodeURIComponent</span>(sKey).replace(<span class="regexp">/[\-\.\+\*]/g</span>, <span class="string">"\\$&amp;"</span>) + <span class="string">"\\s*\\="</span>)).test(<span class="built_in">document</span>.cookie);</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  <span class="comment">// docCookies.keys(), 返回一个这个路径所有可读的cookie的数组</span></div><div class="line">  keys: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> aKeys = <span class="built_in">document</span>.cookie.replace(<span class="regexp">/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g</span>, <span class="string">""</span>).split(<span class="regexp">/\s*(?:\=[^;]*)?;\s*/</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> nIdx = <span class="number">0</span>; nIdx &lt; aKeys.length; nIdx++) &#123;</div><div class="line">      aKeys[nIdx] = <span class="built_in">decodeURIComponent</span>(aKeys[nIdx]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> aKeys;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>用法示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">docCookies.setItem(<span class="string">"test0"</span>, <span class="string">"Hello world!"</span>);</div><div class="line">docCookies.setItem(<span class="string">"test3"</span>, <span class="string">"Hello world!"</span>, <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2027</span>, <span class="number">2</span>, <span class="number">3</span>), <span class="string">"/blog"</span>);</div><div class="line">docCookies.setItem(<span class="string">"test5"</span>, <span class="string">"Hello world!"</span>, <span class="string">"Tue, 06 Dec 2022 13:11:07 GMT"</span>, <span class="string">"/home"</span>);</div><div class="line">docCookies.setItem(<span class="string">"test6"</span>, <span class="string">"Hello world!"</span>, <span class="number">150</span>);</div><div class="line">docCookies.setItem(<span class="string">"test7"</span>, <span class="string">"Hello world!"</span>, <span class="number">245</span>, <span class="string">"/content"</span>);</div><div class="line">docCookies.setItem(<span class="string">"test8"</span>, <span class="string">"Hello world!"</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"example.com"</span>);</div><div class="line">docCookies.setItem(<span class="string">"test9"</span>, <span class="string">"Hello world!"</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">true</span>);</div><div class="line">docCookies.setItem(<span class="string">"test1;="</span>, <span class="string">"Safe character test;="</span>, <span class="literal">Infinity</span>);</div></pre></td></tr></table></figure></p>
<h3 id="5-cookie缺陷"><a href="#5-cookie缺陷" class="headerlink" title="5. cookie缺陷"></a>5. cookie缺陷</h3><ul>
<li>cookie会随着每次HTTP请求头信息一起发送，无形中增加了网络流量</li>
<li>cookie能存储的数据容量有限，根据浏览器类型不同而不同，通常只有4KB。所有超出该限制的 cookie 都会被截掉并且不会发送至服务器</li>
<li>每个域名下的cookie数量也有限制，根据浏览器类型不同而不同</li>
</ul>
<h2 id="HTML5的DOM存储分成两种：SessionStorage和LocalStorage"><a href="#HTML5的DOM存储分成两种：SessionStorage和LocalStorage" class="headerlink" title="HTML5的DOM存储分成两种：SessionStorage和LocalStorage"></a>HTML5的DOM存储分成两种：SessionStorage和LocalStorage</h2><p>DOM存储的机制是通过存储字符串类型的键/值对。</p>
<ul>
<li>SessionStorage是一种会话级别的缓存，关闭浏览器会数据会被清除。它的作用域是窗口级别的，也就是说不同窗口间的sessionStorage数据不能共享的。</li>
<li>LocalStorage是持久化存储，不会自动删除</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">属性方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">.length</td>
<td style="text-align:left">返回storage中的键值对个数</td>
</tr>
<tr>
<td style="text-align:left">.key(n)</td>
<td style="text-align:left">返回storage中第n个元素对的键值（第一个元素是0）</td>
</tr>
<tr>
<td style="text-align:left">.getItem(key)</td>
<td style="text-align:left">返回键值key对应的值</td>
</tr>
<tr>
<td style="text-align:left">.key</td>
<td style="text-align:left">返回键值key对应的值</td>
</tr>
<tr>
<td style="text-align:left">.setItem(key, value)</td>
<td style="text-align:left">添加数据，键值为key，值为value</td>
</tr>
<tr>
<td style="text-align:left">.removeItem(key)</td>
<td style="text-align:left">移除键值为key的数据</td>
</tr>
<tr>
<td style="text-align:left">.clear()</td>
<td style="text-align:left">清除所有数据</td>
</tr>
</tbody>
</table>
<p>特点：</p>
<ul>
<li>Storage提供几MB的空间，根据浏览器类型不同而不同，chrome为5MB。</li>
<li>键值对为文本类型，存储对象时要配合 JSON.stringify( ) 和 JSON.parse( )使用。</li>
<li>不同于cookie，Storage的访问限制更高一些，只有当前设定Storage的域名下才能访问。<br>SessionStorage是以tab为级别的session，刷新页面可以访问到之前的sessionStorage，关闭再打开页面，无法访问到之前的sessionStorage。<br>LocalStorage两种情况下都可以访问，而且下次再打开浏览器仍可以访问</li>
<li>低版本浏览器不支持。</li>
</ul>
<h2 id="WebSQL-amp-IndexedDB"><a href="#WebSQL-amp-IndexedDB" class="headerlink" title="WebSQL &amp; IndexedDB"></a>WebSQL &amp; IndexedDB</h2><p>websql的标准，官方已经不打算维护了，转而维护了新的indexeddb，但是websql兼容性好，而且是移动端几乎完全可用。indexeddb的兼容性没那么好，android4.4之前以及ios7以前都无法直接使用，但可以用polyfill脚本做移动端兼容。</p>
<p><a href="http://caniuse.com/#feat=indexeddb" target="_blank" rel="external">各浏览器兼容性</a></p>
<p>websql更像是关系型数据库，并且使用sql语句进行操作。</p>
<p>indexeddb更像是nosql（非关系型数据库），直接使用js的方法操作数据即可。</p>
<ul>
<li>也是永久存储</li>
<li>访问限制性：indexeddb和websql均是在创建数据库的域名下才能访问。而且不能指定访问域名。</li>
<li>两种存储的方式是没有大小限制的</li>
</ul>
<h3 id="WebSQL三个核心方法："><a href="#WebSQL三个核心方法：" class="headerlink" title="WebSQL三个核心方法："></a>WebSQL三个核心方法：</h3><ul>
<li>openDatabase：这个方法使用现有的数据库或者新建的数据库创建一个数据库对象</li>
<li>transaction：控制一个事务，以及基于这种情况执行提交或者回滚</li>
<li>executeSql：执行实际的 SQL 查询</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var db = openDatabase(&apos;数据库名称&apos;, &apos;版本号&apos;, &apos;描述文本&apos;, 数据库大小, [创建回调]);</div></pre></td></tr></table></figure>
<p>例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> db = openDatabase(<span class="string">'mydb'</span>, <span class="string">'1.0'</span>, <span class="string">'Test DB'</span>, <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>);</div><div class="line"><span class="keyword">var</span> msg;</div><div class="line"> </div><div class="line"><span class="comment">// 插入</span></div><div class="line">db.transaction(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</div><div class="line">    tx.executeSql(<span class="string">'CREATE TABLE IF NOT EXISTS LOGS (id unique, log)'</span>);</div><div class="line">    tx.executeSql(<span class="string">'INSERT INTO LOGS (id, log) VALUES (1, "SmartestEE")'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 更新</span></div><div class="line">db.transaction(<span class="function"><span class="keyword">function</span> (<span class="params">tx</span>) </span>&#123;</div><div class="line">    tx.executeSql(<span class="string">'UPDATE LOGS SET log=\'test\' WHERE id=1'</span>);</div><div class="line">&#125;);</div><div class="line"> </div><div class="line"><span class="comment">// 读取</span></div><div class="line">db.transaction(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</div><div class="line">tx.executeSql(<span class="string">'SELECT * FROM LOGS'</span>, [], (tx, results) =&gt; &#123;</div><div class="line">    <span class="keyword">var</span> len = results.rows.length, i;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</div><div class="line">        msg = <span class="string">"&lt;p&gt;&lt;b&gt;"</span> + results.rows.item(i).log + <span class="string">"&lt;/b&gt;&lt;/p&gt;"</span>;</div><div class="line">        <span class="built_in">document</span>.querySelector(<span class="string">'#status'</span>).innerHTML +=  msg;</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="literal">null</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 删除</span></div><div class="line">db.transaction(<span class="function">(<span class="params">tx</span>) =&gt;</span> &#123;</div><div class="line">    tx.executeSql(<span class="string">'DELETE FROM LOGS  WHERE id=1'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a>IndexedDB</h3><p>特点：</p>
<ol>
<li>键值对储存。内部采用对象空间（object store）存放数据，支持所有js类型的数据</li>
<li>异步。IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的</li>
<li>支持事务。事务中一步出错整个事务都会回滚</li>
<li>同域限制。只能自身域名创建的indexedDB才可以访问</li>
<li>储存空间大。单个域名下的数据库超过50M的时候浏览器会弹窗向用户请求，不影响之后继续存储。</li>
<li>支持二进制储存。也就是可以存储图片和文件，<a href="https://hacks.mozilla.org/2012/02/storing-images-and-files-in-indexeddb/" target="_blank" rel="external">用IndexedDB存储图片和文件</a></li>
</ol>
<ul>
<li><p>判断是否可用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> indexedDB = <span class="built_in">window</span>.indexedDB || <span class="built_in">window</span>.mozIndexedDB || <span class="built_in">window</span>.webkitIndexedDB || <span class="built_in">window</span>.msIndexedDB || <span class="built_in">window</span>.shimIndexedDB;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!indexedDB) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'indexedDB不可用'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>打开数据库</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> local = indexedDB.open(<span class="string">'数据库名'</span>, [版本号]);</div><div class="line"><span class="keyword">var</span> db;</div><div class="line"></div><div class="line">local.onerror = <span class="function">(<span class="params">ect</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 打开错误</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">local.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 打开成功，定义一个数据库对象</span></div><div class="line">  db = evt.target.result; </div><div class="line">  <span class="comment">// 也可以 db = local.result</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建和更新数据库版本号<br>要更新数据库的 schema，也就是创建或者删除对象存储空间，需要实现 onupgradeneeded 处理程序，这个处理程序将会作为一个允许你处理对象存储空间的 versionchange 事务的一部分被调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">local.onupgradeneeded = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  db = evt.target.result;</div><div class="line">  db.createObjectStore(<span class="string">'objectStore'</span>, &#123; <span class="attr">keyPath</span>: <span class="string">"chatID"</span> &#125;); <span class="comment">// 创建一个对象空间，keyPath指定唯一的key，再加上autoIncrement: true自动增加key </span></div><div class="line">  </div><div class="line">  objectStore.createIndex(<span class="string">"name"</span>, &#123; <span class="attr">unique</span>: <span class="literal">false</span> &#125;);</div><div class="line">  <span class="comment">// createIndex方法创建索引, 配合index()方法实用方便查询</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在数据库第一次被打开时或者当指定的版本号高于当前被持久化的数据库的版本号时，这个 versionchange 事务将被创建。版本号是一个 unsigned long long 数字, 不能用浮点数。</p>
<ul>
<li>操作数据<br>操作数据前都得定义一个事务，第一个参数数组指定这个事务跨越哪些对象存储空间，第二个参数指定模式（不加默认只读），事务具有三种模式（只读，读写，和版本变更），只读事务可以并发运行 。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">transaction.oncomplete = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="comment">// 当所有的数据都操作完成时执行一些操作</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">transaction.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="comment">// 错误处理！</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li><p>增</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = db.transaction([<span class="string">"objectStore"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"objectStore"</span>).add(&#123;<span class="attr">chatID</span>: chatID, <span class="attr">messageList</span>: list&#125;);</div><div class="line"></div><div class="line">request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123; &#125;</div><div class="line">request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>删</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> store = db.transaction([<span class="string">"objectStore"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"objectStore"</span>);</div><div class="line"><span class="keyword">var</span> request = store.delete(key); <span class="comment">// delete(key)删除指定数据，store.clear()清空整个对象空间，db.deleteObjectStore('objectStore')删除对象空间(得在onupgradeneeded方法中使用)，indexedDB.deleteDatabase("数据库名称")删库</span></div><div class="line"></div><div class="line">request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123; &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>查</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> request = db.transaction([<span class="string">"objectStore"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"objectStore"</span>).get(key);</div><div class="line"></div><div class="line">request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 错误处理</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 对 request.result 或者 evt.target.result 做些操作！</span></div><div class="line">  <span class="built_in">console</span>.log(request.result);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>改</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> store = db.transaction([<span class="string">"objectStore"</span>], <span class="string">"readwrite"</span>).objectStore(<span class="string">"objectStore"</span>);</div><div class="line"><span class="keyword">var</span> request = store.get(key);</div><div class="line"></div><div class="line">request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 错误处理</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// 对 request.result 或者 evt.target.result 做些操作！</span></div><div class="line">  <span class="keyword">let</span> data = evt.target.result;</div><div class="line">  data.messageList = [&#123;<span class="attr">chatID</span>: <span class="string">'123456'</span>, <span class="attr">message</span>: <span class="string">'hello guys'</span>&#125;];</div><div class="line">  store.put(data);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>遍历<br>openCursor方法，它在当前对象仓库里面建立一个读取光标（cursor）。<br>openCursor方法还可以接受第二个参数，表示遍历方向，默认值为next，其他可能的值为prev、nextunique和prevunique。后两个值表示如果遇到重复值，会自动跳过。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> t = db.transaction([<span class="string">"test"</span>], <span class="string">"readonly"</span>);</div><div class="line"><span class="keyword">var</span> store = t.objectStore(<span class="string">"test"</span>);</div><div class="line"><span class="keyword">var</span> cursor = store.openCursor();</div><div class="line"></div><div class="line">cursor.onsuccess = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> res = e.target.result;</div><div class="line">    <span class="keyword">if</span>(res) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Key"</span>, res.key);</div><div class="line">        <span class="built_in">console</span>.dir(<span class="string">"Data"</span>, res.value);</div><div class="line">        res.continue();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><p>关闭数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.close()</div></pre></td></tr></table></figure>
</li>
<li><p><a href="http://wangriyu.github.io/2017/07/31/20170811IndexedDB/" target="_blank" rel="external">在react中使用IndexedDB的一个函数封装例子</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;intro&quot;&gt;前言&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;浏览器存储数据的几种方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Cookies&lt;/li&gt;
&lt;li&gt;Local Storage &amp;amp; Session Storage&lt;/li&gt;
&lt;li&gt;WebSQL &amp;amp; IndexedDB&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="笔记" scheme="http://wangriyu.wang/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="浏览器本地存储" scheme="http://wangriyu.wang/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>系统I/O</title>
    <link href="http://wangriyu.wang/2017/08/05/%E7%B3%BB%E7%BB%9F%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/"/>
    <id>http://wangriyu.wang/2017/08/05/系统输入输出/</id>
    <published>2017-08-04T16:00:00.000Z</published>
    <updated>2017-08-18T03:02:37.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>输入输出（I/O）是主存和外部设备设备（磁盘驱动器、终端、网络等）之间复制数据的过程。</strong><br><a id="more"></a></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=415085467&auto=1&height=66"></iframe>

<h2 id="Unix-I-O是系统底层数据操作"><a href="#Unix-I-O是系统底层数据操作" class="headerlink" title="Unix I/O是系统底层数据操作"></a>Unix I/O是系统底层数据操作</h2><p><img src="https://wangriyu.github.io/images/IO.png" alt="img"></p>
<p>open() 和 close() 来打开和关闭文件，使用 read() 和 write() 来读写文件，或者利用 lseek() 来设定读取的偏移量</p>
<ul>
<li>文件类型：</li>
</ul>
<ol>
<li>普通文件：包含任意数据</li>
<li>目录：相关一组文件的索引</li>
<li>套接字 Socket：和另一台机器上的进程通信的类型</li>
</ol>
<p>目录包含一个链接(link)数组，并且每个目录至少包含两条记录：<br>./当前目录<br>../上一层目录</p>
<p>相对路径和绝对路径</p>
<ul>
<li><p>打开文件</p>
<p>open函数（返回的文件描述符一定是最小的且没有被用过的数值）</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int open(const char *pathname, int flags, mode_t mode)</div><div class="line">// flags 用于指定文件的打开/创建模式, 第三个参数仅当创建新文件时才使用，用于指定文件的访问权限位（access permission bits）</div></pre></td></tr></table></figure>
<p>flags:<br> O_RDONLY      只读模式<br> O_WRONLY     只写模式<br> O_RDWR          读写模式<br> . . .</p>
<p>modes:<br> S_IRWXU00700 权限，代表该文件所有者具有可读、可写及可执行的权限。<br> S_IRUSR 或S_IREAD，00400权限，代表该文件所有者具有可读取的权限。<br> S_IWUSR 或S_IWRITE，00200 权限，代表该文件所有者具有可写入的权限。<br> S_IXUSR 或S_IEXEC，00100 权限，代表该文件所有者具有可执行的权限<br> . . .</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int fd; // 文件描述符</div><div class="line">if ((fd = open(&quot;/etc/hosts&quot;, O_RDONLY)) &lt; 0) // 返回值等于 -1 则说明发生了错误</div><div class="line">&#123;</div><div class="line">    perror(&quot;open&quot;);</div><div class="line">    exit(1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>关闭文件<br>close 函数用于关闭已打开的文件, 关闭一个已关闭的描述符会出错</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int close(int fd)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int fd;     // 文件描述符</div><div class="line">int retval; // 返回值</div><div class="line">if ((retval = close(fd)) &lt; 0)</div><div class="line">&#123;</div><div class="line">    perror(&quot;close&quot;);</div><div class="line">    exit(1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>读取文件<br>实际上就是把文件中对应的字节复制到内存中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssize_t read(int fd, void *buf, size_t count) // 成功执行时，返回所读取的数据量，如果读到文件的末尾EOF则返回0。失败的时候返回-1</div></pre></td></tr></table></figure>
<p>buf: 所要读取到的数据的内存缓冲<br>count：需要读取的数据量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">char buf[512];</div><div class="line">int fd;</div><div class="line">int nbytes;</div><div class="line">// 打开文件描述符，并从中读取 512 字节的数据</div><div class="line">if ((nbytes = read(fd, buf, sizeof(buf))) &lt; 0)</div><div class="line">&#123;</div><div class="line">    perror(&quot;read&quot;);</div><div class="line">    exit(1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>写入文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssize_t write(int fd, const void *buf, size_t nbytes) // write函数将buf中的nbytes字节内容写入文件描述符fd. 成功时返回写的字节数. 失败时返回-1</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">char buf[512];</div><div class="line">int fd;</div><div class="line">int nbytes;</div><div class="line">// 打开文件描述符，并向其写入 512 字节的数据</div><div class="line">if ((nbytes = write(fd, buf, sizeof(buf)) &lt; 0)</div><div class="line">&#123;</div><div class="line">    perror(&quot;write&quot;);</div><div class="line">    exit(1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>tips：x86-64系统中，size-t被定义为unsigned long，而ssize-t（有符号）被定义为long，因为函数返回值可能为-1</p>
</blockquote>
<ul>
<li>lseek函数<br>为一个打开的文件设置其偏移量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">off_t lseek(int fd, off_t offset, int whence)</div></pre></td></tr></table></figure>
<p>Offset：偏移量，每一读写操作所需要移动的距离，单位是字节的数量，可正可负（向前，向后）<br>whence:  SEEK_SET / SEEK_CUR / SEEK_END (依次为0，1，2）.<br>　　SEEK_SET 将读写位置指向文件头后再增加offset个位移量。<br>　　SEEK_CUR 以目前的读写位置往后增加offset个位移量。<br>　　SEEK_END 将读写位置指向文件尾后再增加offset个位移量。</p>
<p>当whence 值为SEEK_CUR 或SEEK_END时，参数offet允许负值的出现</p>
<p>当调用成功时则返回目前的读写位置，也就是距离文件开头多少个字节。若有错误则返回-1，errno 会存放错误代码</p>
<ul>
<li>元数据<br>元数据是用来描述数据的结构，由内核维护，可以通过 stat 和 fstat 函数来访问</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">int stat(const char *filename, struct stat *buf)</div><div class="line">int fstat(int fd, struct stat *buf)</div></pre></td></tr></table></figure>
<p>函数结果是填充一个stat结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">struct stat</div><div class="line">&#123;</div><div class="line">    dev_t           st_dev;     // Device</div><div class="line">    ino_t           st_ino;     // inode</div><div class="line">    mode_t          st_mode;    // Protection &amp; file type</div><div class="line">    nlink_t         st_nlink;   // Number of hard links</div><div class="line">    uid_t           st_uid;     // User ID of owner</div><div class="line">    gid_t           st_gid;     // Group ID of owner</div><div class="line">    dev_t           st_rdev;    // Device type (if inode device)</div><div class="line">    off_t           st_size;    // Total size, in bytes</div><div class="line">    unsigned long   st_blksize; // Blocksize for filesystem I/O</div><div class="line">    unsigned long   st_blocks;  // Number of blocks allocated</div><div class="line">    time_t          st_atime;   // Time of last access</div><div class="line">    time_t          st_mtime;   // Time of last modification</div><div class="line">    time_t          st_ctime;   // Time of last change</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">int main (int argc, char **argv)</div><div class="line">&#123;</div><div class="line">    struct stat stat;</div><div class="line">    char *type, *readok;</div><div class="line">    </div><div class="line">    Stat(argv[1], &amp;stat);</div><div class="line">    if (S_ISREG(stat.st_mode)) // 确定文件类型，S_ISREG(m)判断普通文件，</div><div class="line">        type = &quot;regular&quot;;</div><div class="line">    else if (S_ISDIR(stat.st_mode)) // S_ISDIR(m)判断目录文件</div><div class="line">        type = &quot;directory&quot;;</div><div class="line">    else // S_ISSOCK(m)判断网络套接字</div><div class="line">        type = &quot;other&quot;;</div><div class="line">    </div><div class="line">    if ((stat.st_mode &amp; S_IRUSR)) // 检查读权限</div><div class="line">        readok = &quot;yes&quot;;</div><div class="line">    else</div><div class="line">        readok = &quot;no&quot;;</div><div class="line">    </div><div class="line">    printf(&quot;type: %s, read: %s\n&quot;, type, readok);</div><div class="line">    exit(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>读取目录内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char **argv)</div><div class="line">&#123;</div><div class="line">  DIR *streamp;</div><div class="line">  struct dirent *dep;</div><div class="line">  streamp = Opendir(argv[0]);</div><div class="line">  </div><div class="line">  errno = 0;</div><div class="line">  while ((dep = readdir(streamp)) != NULL) &#123;</div><div class="line">    printf(&quot;找到文件：%s\n&quot;, dep -&gt; d_name);</div><div class="line">  &#125;</div><div class="line">  if (errno != 0)</div><div class="line">    unix_error(&quot;readdir 失败&quot;);</div><div class="line">  CloseDir(streamp);</div><div class="line">  exit(0)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="标准输入输出"><a href="#标准输入输出" class="headerlink" title="标准输入输出"></a>标准输入输出</h2><p>C 标准库中包含一系列高层的标准 IO 函数</p>
<ul>
<li>打开和关闭文件: fopen, fclose</li>
<li>读取和写入字节: fread, fwrite</li>
<li>读取和写入行: fgets, fputs</li>
<li>格式化读取和写入: fscanf, fprintf</li>
</ul>
<p>Standard C I/O: fopen, fdopen, fread, fwrite, fscanf, fprintf, sscanf, sprintf, fgets, fputs, fflush, fseek, fclose</p>
<h2 id="Node-js文件系统fs模块"><a href="#Node-js文件系统fs模块" class="headerlink" title="Node.js文件系统fs模块"></a>Node.js文件系统fs模块</h2><p>Node.js提供一组类似 UNIX（POSIX）标准的文件操作API。 Node 导入文件系统模块(fs)语法如下所示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var fs = require(&quot;fs&quot;)</div></pre></td></tr></table></figure>
<p>Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。<br>异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。<br>建议大家是用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var fs = require(&quot;fs&quot;);</div><div class="line">// 异步读取</div><div class="line">fs.readFile(&apos;./hello.txt&apos;, function (err, data) &#123;</div><div class="line">   if (err) &#123;</div><div class="line">       return console.error(err);</div><div class="line">   &#125;</div><div class="line">   console.log(data.toString());</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 同步读取</div><div class="line">var data = fs.readFileSync(&apos;./hello.txt&apos;);</div><div class="line">console.log(data.toString());</div></pre></td></tr></table></figure>
<ul>
<li>打开文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fs.open(path, flags[, mode], callback(err, fd))</div><div class="line">// fd是返回的文件描述符</div></pre></td></tr></table></figure>
<ul>
<li>获取文件信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fs.stat(path, callback(err, stats))</div><div class="line">// stats 是 fs.Stats 对象</div></pre></td></tr></table></figure>
<ul>
<li><p>stats类</p>
<p>查询文件信息</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.stat(path, callback(err, stats))</div></pre></td></tr></table></figure>
<p>  一个stats类对象的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  dev: 16777220,   // 文件或目录所在的设备I, 该属性值在UNIX系统下有效</div><div class="line">  mode: 33188,     // 文件或目录的权限标志，采用数值形式表示</div><div class="line">  nlink: 1,        // 文件或目录的的硬连接数量</div><div class="line">  uid: 501,        // 文件或目录的所有者的用户ID, 该属性值在UNIX系统下有效</div><div class="line">  gid: 20,         // 文件或目录的所有者的用户组ID, 该属性值在UNIX系统下有效</div><div class="line">  rdev: 0,         // 字符设备文件或块设备文件所在设备ID, 该属性值在UNIX系统下有效</div><div class="line">  blksize: 4096,   // 块大小</div><div class="line">  ino: 78808297,   // 文件或目录的索引编号, 该属性值仅在UNIX系统下有效</div><div class="line">  size: 244,       // 文件的字节数</div><div class="line">  blocks: 8,       // 块数</div><div class="line">  atime: Wed May 27 2015 18:24:43 GMT+0800 (CST),  // 文件或目录的访问时间</div><div class="line">  mtime: Wed May 27 2015 18:26:25 GMT+0800 (CST),  // 文件或目录的最后修改时间</div><div class="line">  ctime: Wed May 27 2015 18:26:25 GMT+0800 (CST),  // 文件或目录状态的最后修改时间</div><div class="line">  birthtime: Mon, 10 Oct 2011 23:24:11 GMT,        // 文件创建时间</div><div class="line">  atimeMs: 1318289051000.1,      // 以单位为毫秒保存相对应时间的数字</div><div class="line">  mtimeMs: 1318289051000.1,</div><div class="line">  ctimeMs: 1318289051000.1,</div><div class="line">  birthtimeMs: 1318289051000.1,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>stats类的方法</p>
<ol>
<li>stats.isFile() 如果是标准文件，返回true。是目录、套接字、符号连接、或设备等返回false</li>
<li>stats. isDirectory() 如果是目录，返回true</li>
<li>stats. isBlockDevice() 如果是块设备，返回true，大多数情况下类UNIX系统的块设备都位于/dev目录下</li>
<li>stats. isCharacterDevice() 如果是字符设备，返回true</li>
<li>stats. isSymbolicLink() 如果是符号连接，返回true。（fs.lstat()方法返回的stats对象才有此方法）</li>
<li>stats.isFIFO() 如果是FIFO（FIFO是UNIX中的一种特殊类型的命令管道），返回true。FIFO是UNIX中的一种特殊类型的命令管道</li>
<li>stats. isSocket() 如果是UNIX套接字（socket），返回true</li>
</ol>
<ul>
<li>检查文件是否存在</li>
</ul>
<ol>
<li>fs.stat()，如果stats对象存在且stats.isFile()为true才能确认要修改或删除的文件存在</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">fs.stat(&apos;/xxx&apos;, function(err, stat)&#123;</div><div class="line">    if(stat&amp;&amp;stat.isFile()) &#123;</div><div class="line">	console.log(&apos;文件存在&apos;);</div><div class="line">    &#125; else &#123;</div><div class="line">	console.log(&apos;文件不存在或不是标准文件&apos;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>fs.access(), 检查到指定path路径的目录或文件的访问权限</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.access(path[, mode], callback(err))</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 检查文件是否存在</div><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">fs.access(&apos;/etc/passwd&apos;, function(err) &#123;</div><div class="line">    console.log(err ? &apos;文件存在&apos; : &apos;文件不存在&apos;);</div><div class="line">&#125;);</div><div class="line">// 检查是否对文件是否有读写权限</div><div class="line">var fs = require(&apos;fs&apos;);</div><div class="line"></div><div class="line">fs.access(&apos;/etc/passwd&apos;, fs.R_OK | fs.W_OK, function(err) &#123;</div><div class="line">    console.log(err ? &apos;不可操作!&apos; : &apos;可以读/写&apos;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>fs.F_OK - 文件是对于进程是否可见，可以用来检查文件是否存在。也是mode 的默认值<br>fs.R_OK - 文件对于进程是否可读<br>fs.W_OK - 文件对于进程是否可写<br>fs.X_OK - 文件对于进程是否可执行。（Windows系统不可用，执行效果等同fs.F_OK）</p>
<ul>
<li>写入文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.writeFile(file, data[, options], callback(err))</div></pre></td></tr></table></figure>
<ol>
<li>fd - 通过 fs.open() 方法返回的文件描述符。</li>
<li>buffer - 数据写入的缓冲区。</li>
<li>offset - 缓冲区写入的写入偏移量。</li>
<li>length - 要从文件中读取的字节数。</li>
<li>position - 文件读取的起始位置，如果 position 的值为 null，则会从当前文件指针的位置读取。</li>
<li>callback - 回调函数，有三个参数err, bytesRead, buffer，err 为错误信息， bytesRead 表示读取的字节数，buffer 为缓冲区对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">var fs = require(&quot;fs&quot;);</div><div class="line">var buf = new Buffer(1024);</div><div class="line"></div><div class="line">console.log(&quot;准备打开已存在的文件！&quot;);</div><div class="line">fs.open(&apos;input.txt&apos;, &apos;r+&apos;, function(err, fd) &#123;</div><div class="line">   if (err) &#123;</div><div class="line">       return console.error(err);</div><div class="line">   &#125;</div><div class="line">   console.log(&quot;文件打开成功！&quot;);</div><div class="line">   console.log(&quot;准备读取文件：&quot;);</div><div class="line">   fs.read(fd, buf, 0, buf.length, 0, function(err, bytes)&#123;</div><div class="line">      if (err)&#123;</div><div class="line">         console.log(err);</div><div class="line">      &#125;</div><div class="line">      console.log(bytes + &quot;  字节被读取&quot;);</div><div class="line">      </div><div class="line">      // 仅输出读取的字节</div><div class="line">      if(bytes &gt; 0)&#123;</div><div class="line">         console.log(buf.slice(0, bytes).toString());</div><div class="line">      &#125;</div><div class="line">   &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// fs.write(fd, buffer, offset, length[, position], callback)</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>关闭文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.close(fd, callback())</div></pre></td></tr></table></figure>
<ul>
<li>截取文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.ftruncate(fd, len, callback())</div></pre></td></tr></table></figure>
<ul>
<li>删除文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.unlink(path, callback())</div></pre></td></tr></table></figure>
<ul>
<li>创建目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.mkdir(path[, mode], callback)</div></pre></td></tr></table></figure>
<ul>
<li>读取目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fs.readdir(path, callback(err, files))</div><div class="line">// files 为目录下的文件数组列表</div></pre></td></tr></table></figure>
<ul>
<li>删除目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.rmdir(path, callback())</div></pre></td></tr></table></figure>
<ul>
<li>检测给定的路径是否存在</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.existsSync(path) //异步版本已无效</div></pre></td></tr></table></figure>
<ul>
<li>追加文件内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fs.appendFile(filename, data[, options], callback(err))</div></pre></td></tr></table></figure>
<h2 id="几条查询目录信息终端命令"><a href="#几条查询目录信息终端命令" class="headerlink" title="几条查询目录信息终端命令"></a>几条查询目录信息终端命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ find 路径 -type f|wc -l // 统计文件数</div><div class="line">$ find 路径 -type d|wc -l // 统计目录数</div><div class="line"></div><div class="line">$ du -sh 路径 // 统计大小</div><div class="line">$ df -h /    //查询磁盘使用量</div><div class="line"></div><div class="line">$ ls -lR 路径|grep &quot;^d&quot;|wc -l // 统计目录数</div><div class="line">$ ls -lR 路径|grep &quot;^-&quot;|wc -l // 统计文件数</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;输入输出（I/O）是主存和外部设备设备（磁盘驱动器、终端、网络等）之间复制数据的过程。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="READ" scheme="http://wangriyu.wang/categories/READ/"/>
    
    
      <category term="深入理解计算机" scheme="http://wangriyu.wang/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>react使用IndexedDB示例</title>
    <link href="http://wangriyu.wang/2017/07/31/20170811IndexedDB/"/>
    <id>http://wangriyu.wang/2017/07/31/20170811IndexedDB/</id>
    <published>2017-07-30T16:00:00.000Z</published>
    <updated>2017-08-15T14:22:40.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=409102911&auto=1&height=66"><br></iframe>

<h2 id="用于一个react聊天项目的本地消息记录存储的IndexedDB使用示例"><a href="#用于一个react聊天项目的本地消息记录存储的IndexedDB使用示例" class="headerlink" title="用于一个react聊天项目的本地消息记录存储的IndexedDB使用示例"></a>用于一个react聊天项目的本地消息记录存储的IndexedDB使用示例</h2><blockquote>
<p>封装的函数用法跟localStorage的属性方法类似</p>
</blockquote>
<h4 id="IndexedDB-js"><a href="#IndexedDB-js" class="headerlink" title="IndexedDB.js"></a>IndexedDB.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> indexedDB = <span class="built_in">window</span>.indexedDB || <span class="built_in">window</span>.mozIndexedDB || <span class="built_in">window</span>.webkitIndexedDB || <span class="built_in">window</span>.msIndexedDB || <span class="built_in">window</span>.shimIndexedDB;</div><div class="line"><span class="keyword">var</span> userID = localStorage.getItem(<span class="string">'userID'</span>), db;</div><div class="line">  </div><div class="line">indexedDB.open(<span class="string">'LocalMessageDataBase'</span>, <span class="number">1</span>).onupgradeneeded = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">  <span class="comment">// console.log('establish database');</span></div><div class="line">  db = evt.target.result;</div><div class="line">  db.createObjectStore(userID, &#123; <span class="attr">keyPath</span>: <span class="string">"chatID"</span> &#125;);</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getLocalData</span> (<span class="params">chatID</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> localDB = indexedDB.open(<span class="string">'LocalMessageDataBase'</span>, <span class="number">1</span>), data = [];</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">    localDB.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">      <span class="comment">// console.log('open database to getdata');</span></div><div class="line">      db = evt.target.result;</div><div class="line">      <span class="keyword">if</span> (chatID) &#123;</div><div class="line">        <span class="keyword">let</span> request = db.transaction([userID]).objectStore(userID).get(chatID);</div><div class="line"></div><div class="line">        request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'get error: '</span>, evt);</div><div class="line">          reject(evt)</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">          <span class="comment">// console.log('get data: ', evt.target.result);</span></div><div class="line">          data = request.result || [];</div><div class="line">          resolve(data)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">setLocalData</span> (<span class="params">chatID, list</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> localDB = indexedDB.open(<span class="string">'LocalMessageDataBase'</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">  localDB.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// console.log('open database to setdata');</span></div><div class="line">    db = evt.target.result;</div><div class="line">    <span class="keyword">let</span> store = db.transaction([userID], <span class="string">'readwrite'</span>).objectStore(userID);</div><div class="line">    <span class="keyword">let</span> request = store.get(chatID);</div><div class="line"></div><div class="line">    request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123; <span class="keyword">throw</span> evt &#125;;</div><div class="line"></div><div class="line">    request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">let</span> data = evt.target.result;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (data) &#123;</div><div class="line">        <span class="comment">// console.log('update data');</span></div><div class="line">        data.messageList = list;</div><div class="line">        store.put(data)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// console.log('add data');</span></div><div class="line">        store.add(&#123;<span class="attr">chatID</span>: chatID, <span class="attr">messageList</span>: list&#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">  </div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteLocalData</span> (<span class="params">chatID</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> localDB = indexedDB.open(<span class="string">'LocalMessageDataBase'</span>, <span class="number">1</span>);</div><div class="line"></div><div class="line">  localDB.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">    db = evt.target.result;</div><div class="line">    <span class="keyword">let</span> request = db.transaction([userID], <span class="string">"readwrite"</span>).objectStore(userID).delete(chatID);</div><div class="line"></div><div class="line">    request.onerror = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'delete error'</span>, evt)</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    request.onsuccess = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'delete data'</span>)</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="调用函数只需引入IndexedDB-js"><a href="#调用函数只需引入IndexedDB-js" class="headerlink" title="调用函数只需引入IndexedDB.js"></a>调用函数只需引入IndexedDB.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; getLocalData, setLocalData, deleteLocaldata &#125; = <span class="string">'path/IndexedDB'</span>;</div><div class="line"></div><div class="line">getLocalData(chatID).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// 获取聊天记录</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">setLocalData(chatID, list); <span class="comment">// 存入新的聊天消息记录</span></div><div class="line"></div><div class="line">deleteLocaldata(chatID); <span class="comment">// 删除指定对象的消息记录</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      用于一个react聊天项目的本地消息记录存储的IndexedDB使用示例
    
    </summary>
    
      <category term="笔记" scheme="http://wangriyu.wang/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="浏览器本地存储" scheme="http://wangriyu.wang/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>0611-JS笔记</title>
    <link href="http://wangriyu.wang/2017/06/11/20170611JS%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangriyu.wang/2017/06/11/20170611JS笔记/</id>
    <published>2017-06-10T16:00:00.000Z</published>
    <updated>2017-08-15T14:28:04.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=410710962&auto=1&height=66"></iframe>

<h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><h3 id="使用this对象的方法作为回调函数时的问题"><a href="#使用this对象的方法作为回调函数时的问题" class="headerlink" title="使用this对象的方法作为回调函数时的问题"></a>使用this对象的方法作为回调函数时的问题</h3><p>如果回调函数被传递给一个全局函数，this对象指向全局window对象（在浏览器中）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clientData = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">094545</span>,</div><div class="line">  <span class="attr">fullName</span>: <span class="string">"Not Set"</span>,</div><div class="line">  <span class="attr">setUserName</span>: <span class="function"><span class="keyword">function</span>(<span class="params">firstName, lastName</span>) </span>&#123;</div><div class="line">    <span class="comment">//这指向了对象中的fullName属性</span></div><div class="line">    <span class="keyword">this</span>.fullName = firstName + <span class="string">" "</span> + lastName;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInput</span>(<span class="params">firstName, lastName, callback</span>)</span>&#123;</div><div class="line">  <span class="comment">//在这做些什么来确认firstName/lastName</span></div><div class="line"></div><div class="line">  <span class="comment">//现在存储names</span></div><div class="line">  callback(firstName, lastName);</div><div class="line">&#125;</div><div class="line"></div><div class="line">getUserInput(<span class="string">"Wang"</span>, <span class="string">"RiYu"</span>, clientData.setUserName);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(clientData.fullName);  <span class="comment">//Not Set</span></div><div class="line"><span class="built_in">console</span>.log(fullName); <span class="comment">//Wang RiYu</span></div></pre></td></tr></table></figure>
<p>当clientData.setUsername被执行时，this.fullName并没有设置clientData对象中的fullName属性。</p>
<p>相反，它将设置window对象中的fullName属性，因为getUserInput是一个全局函数。</p>
<p>这是因为全局函数中的this对象指向window对象。</p>
<h3 id="修复上面出现的问题"><a href="#修复上面出现的问题" class="headerlink" title="修复上面出现的问题"></a>修复上面出现的问题</h3><p><strong>使用Call和Apply函数保存this</strong></p>
<ul>
<li><p>call接收的第一个参数为被用来在函数内部当做this的对象，传递给函数的参数被挨个传递（当然使用逗号分开）</p>
</li>
<li><p>apply函数的第一个参数也是在函数内部作为this的对象，然而最后一个参数确是传递给函数的值的数组</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInput</span>(<span class="params">firstName, lastName, callback. callbackObj</span>)</span>&#123;</div><div class="line">  <span class="comment">//在这里做些什么来确认名字</span></div><div class="line"></div><div class="line">  callback.apply(callbackObj, [firstName, lastName]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用Apply函数正确设置了this对象，我们现在正确的执行了callback并在clientData对象中正确设置了fullName属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//我们将clientData.setUserName方法和clientData对象作为参数</span></div><div class="line"><span class="comment">//clientData对象会被Apply方法使用来设置this对象</span></div><div class="line"></div><div class="line">getUserName(<span class="string">"Barack"</span>, <span class="string">"Obama"</span>, clientData.setUserName, clientData);</div><div class="line"></div><div class="line"><span class="comment">//clientData中的fullName属性被正确的设置</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(clientUser.fullName)</div></pre></td></tr></table></figure>
<hr>
<h3 id="回调函数特点"><a href="#回调函数特点" class="headerlink" title="回调函数特点"></a>回调函数特点</h3><ul>
<li>回调函数是一段可执行的代码段，它作为一个参数传递给其他的代码，其作用是在需要的时候方便调用这段（回调函数）代码</li>
<li>不会立刻执行,调用add时才会执行print</li>
<li>回调函数是一个闭包，也就是说它能访问到其外层定义的变量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2, callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = num1 + num2;</div><div class="line">  callback(sum);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(num);</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>, print);</div><div class="line"></div><div class="line"><span class="comment">// 在执行回调函数前最好确认其是一个函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2, callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> sum = num1 + num2;</div><div class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> callback === <span class="string">'function'</span>)&#123;</div><div class="line">    callback(sum);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="注意在回调函数调用时this的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文"><a href="#注意在回调函数调用时this的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文" class="headerlink" title="注意在回调函数调用时this的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文"></a>注意在回调函数调用时this的执行上下文并不是回调函数定义时的那个上下文，而是调用它的函数所在的上下文</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">  <span class="attr">sum</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">add</span>: <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.sum = num1 + num2;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.sum)</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2, callback</span>)</span>&#123;</div><div class="line">  callback(num1, num2);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>, obj.add);</div><div class="line"><span class="built_in">console</span>.log(obj.sum); <span class="comment">//0</span></div><div class="line"><span class="built_in">console</span>.log(sum);</div></pre></td></tr></table></figure>
<p>上述代码调用回调函数的时候是在全局环境下，因此this指向的是window，所以sum的值是赋值给windows的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arg1, arg2, callback</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> rand = <span class="built_in">Math</span>.random();</div><div class="line">  <span class="built_in">console</span>.log(rand);</div><div class="line">  <span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(rand * (arg2 - arg1) + arg1);</div><div class="line">  callback(num);</div><div class="line">&#125;</div><div class="line"></div><div class="line">fn(<span class="number">10</span>, <span class="number">20</span>, <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Callback called! Num: "</span> + num);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//结果为10和20之间的随机数</span></div></pre></td></tr></table></figure>
<hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> clientData = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">094545</span>,</div><div class="line">  <span class="attr">fullName</span>: <span class="string">"Not Set"</span>,</div><div class="line">  <span class="attr">setUserName</span>: <span class="function"><span class="keyword">function</span>(<span class="params">firstName, lastName</span>) </span>&#123;</div><div class="line">    <span class="comment">//这指向了对象中的fullName属性</span></div><div class="line">    <span class="keyword">this</span>.fullName = firstName + <span class="string">" "</span> + lastName;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserInput</span>(<span class="params">firstName, lastName, callback</span>)</span>&#123;</div><div class="line">  <span class="comment">//在这做些什么来确认firstName/lastName</span></div><div class="line"></div><div class="line">  <span class="comment">//现在存储names</span></div><div class="line">  callback(firstName, lastName);</div><div class="line">&#125;</div><div class="line"></div><div class="line">getUserInput(<span class="string">"Wang"</span>, <span class="string">"RiYu"</span>, clientData.setUserName);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(clientData.fullName);  <span class="comment">//Not Set</span></div><div class="line"><span class="built_in">console</span>.log(fullName); <span class="comment">// Wang RiYu</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="闭包作用，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中"><a href="#闭包作用，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中" class="headerlink" title="闭包作用，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中"></a>闭包作用，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params"></span>) </span>&#123; counter += <span class="number">1</span>; &#125;</div><div class="line">  plus();</div><div class="line">  <span class="built_in">console</span>.log(counter);</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(); <span class="comment">// 1</span></div><div class="line">add(); <span class="comment">// 1</span></div><div class="line">add(); <span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="comment">/*-------------------------------------------*/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(counter += <span class="number">1</span>); &#125;</div><div class="line">&#125;)();</div><div class="line"></div><div class="line">add(); <span class="comment">// 1</span></div><div class="line">add(); <span class="comment">// 2</span></div><div class="line">add(); <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc1</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> x++ &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = [makeFunc1(<span class="number">0</span>), makeFunc1(<span class="number">1</span>), makeFunc1(<span class="number">2</span>)];</div><div class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]()); <span class="comment">// 0</span></div><div class="line"><span class="built_in">console</span>.log(a[<span class="number">1</span>]()); <span class="comment">// 1</span></div><div class="line"><span class="built_in">console</span>.log(a[<span class="number">2</span>]()); <span class="comment">// 2</span></div><div class="line"></div><div class="line"><span class="comment">/*-------------------------------*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc2</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(x++) &#125;</div><div class="line">  foo()</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = [makeFunc2(<span class="number">0</span>), makeFunc2(<span class="number">1</span>), makeFunc2(<span class="number">2</span>)];</div><div class="line">b[<span class="number">0</span>]; <span class="comment">// 0</span></div><div class="line">b[<span class="number">1</span>]; <span class="comment">// 1</span></div><div class="line">b[<span class="number">2</span>]; <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">  nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(n);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result=f1();</div><div class="line">result(); <span class="comment">// 999</span></div><div class="line">nAdd();</div><div class="line">result(); <span class="comment">// 1000</span></div><div class="line"></div><div class="line"><span class="comment">/*-----------------------*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">  mAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(n);</div><div class="line">  &#125;</div><div class="line">  f2()</div><div class="line">&#125;</div><div class="line">f2(); <span class="comment">// 999</span></div><div class="line">mAdd();</div><div class="line">f2(); <span class="comment">// 999</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    a *= <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> f = foo1();</div><div class="line">f(); <span class="comment">//return 20.</span></div><div class="line">f(); <span class="comment">//return 40.</span></div><div class="line"></div><div class="line"><span class="comment">/*-------------------------*/</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    a *= <span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">  &#125;;</div><div class="line">  f1()</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo2(); <span class="comment">//return 20.</span></div><div class="line">foo2(); <span class="comment">//return 20.</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      简单理解JavaScript回调和闭包
    
    </summary>
    
      <category term="笔记" scheme="http://wangriyu.wang/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javaScript" scheme="http://wangriyu.wang/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>0507-JS笔记</title>
    <link href="http://wangriyu.wang/2017/05/07/20170507%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangriyu.wang/2017/05/07/20170507前端笔记/</id>
    <published>2017-05-06T16:00:00.000Z</published>
    <updated>2017-09-02T14:55:16.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=473059&auto=1&height=66"></iframe>

<h2 id="splice-和-slice"><a href="#splice-和-slice" class="headerlink" title="splice 和 slice"></a>splice 和 slice</h2><h3 id="splice-方法通过删除现有元素和-或添加新元素来更改数组的内容"><a href="#splice-方法通过删除现有元素和-或添加新元素来更改数组的内容" class="headerlink" title="splice()方法通过删除现有元素和/或添加新元素来更改数组的内容"></a>splice()方法通过删除现有元素和/或添加新元素来更改数组的内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">array.splice(start)</div><div class="line">array.splice(start, deleteCount) </div><div class="line">array.splice(start, deleteCount, item1, item2, ...)</div></pre></td></tr></table></figure>
<ul>
<li>start<br>指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从1计数）。</li>
<li>deleteCount （可选）<br>整数，表示要移除的数组元素的个数。如果 deleteCount 是 0，则不移除元素。这种情况下，至少应添加一个新元素。如果 deleteCount 大于start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。<br>如果deleteCount被省略，则其相当于(arr.length - start)。</li>
<li>item1, item2, … （可选）<br>要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素。</li>
</ul>
<h3 id="splice-返回值"><a href="#splice-返回值" class="headerlink" title="splice()返回值"></a>splice()返回值</h3><p>由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组</p>
<blockquote>
<p>tips：splice() 方法与 slice() 方法的作用是不同的，splice() 方法会直接对数组进行修改</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> removed = array.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">"e"</span>);</div><div class="line"><span class="comment">//array --&gt; ["a","b","e","c","d"]</span></div><div class="line"><span class="comment">//removed --&gt; []</span></div><div class="line"></div><div class="line">removed = array.splice(<span class="number">3</span>,<span class="number">1</span>);</div><div class="line"><span class="comment">//array --&gt; ["a","b","e","d"]</span></div><div class="line"><span class="comment">//removed --&gt; ["c"]</span></div><div class="line"></div><div class="line">removed = array.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"f"</span>);</div><div class="line"><span class="comment">//array --&gt; ["a","b","f","d"]</span></div><div class="line"><span class="comment">//removed --&gt; ["e"]</span></div></pre></td></tr></table></figure>
<hr>
<h3 id="slice-方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象-不改变原数组"><a href="#slice-方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象-不改变原数组" class="headerlink" title="slice()方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象,不改变原数组"></a>slice()方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象,不改变原数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">array.slice()</div><div class="line">array.slice(begin)</div><div class="line">array.slice(begin,end)</div></pre></td></tr></table></figure>
<ul>
<li>begin （可选）<br>从该索引处开始提取原数组中的元素（从0开始）。<br>如果该参数为负数，则表示从原数组中的倒数第几个元素开始提取，slice(-2)表示提取原数组中的倒数第二个元素到最后一个元素（包含最后一个元素）。<br>如果省略 begin，则 slice 从索引 0 开始。</li>
<li>end （可选）<br>在该索引处结束提取原数组元素（从0开始）。slice会提取原数组中索引从 begin 到 end 的所有元素（包含begin，但不包含end）。<br>slice(1,4) 提取原数组中的第二个元素开始直到第四个元素的所有元素 （索引为 1, 2, 3的元素）。<br>如果该参数为负数， 则它表示在原数组中的倒数第几个元素结束抽取。 slice(-2,-1)表示抽取了原数组中的倒数第二个元素到最后一个元素（不包含最后一个元素，也就是只有倒数第二个元素）。<br>如果 end 被省略，则slice 会一直提取到原数组末尾。<br>如果 end 大于数组长度，slice 也会一直提取到原数组末尾。</li>
</ul>
<h3 id="slice-返回值"><a href="#slice-返回值" class="headerlink" title="slice()返回值"></a>slice()返回值</h3><p>array下标 <strong>begin &lt;= copy &lt; end</strong> 的数组拷贝</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>];</div><div class="line"></div><div class="line"><span class="keyword">var</span> sliced = array.slice(<span class="number">1</span>,<span class="number">3</span>);</div><div class="line"><span class="comment">//array --&gt; ["a","b","c","d"]</span></div><div class="line"><span class="comment">//sliced --&gt; ["b","c"]</span></div></pre></td></tr></table></figure>
<h2 id="调用Object属性"><a href="#调用Object属性" class="headerlink" title="调用Object属性"></a>调用Object属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">    <span class="attr">name0</span>: <span class="string">"abc"</span>,</div><div class="line">    <span class="attr">name1</span>: <span class="number">123</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">object.name0 <span class="comment">//等同于object["name0"],输出"abc"</span></div></pre></td></tr></table></figure>
<h2 id="创建函数的几种方法"><a href="#创建函数的几种方法" class="headerlink" title="创建函数的几种方法"></a>创建函数的几种方法</h2><h3 id="三种基础方法"><a href="#三种基础方法" class="headerlink" title="三种基础方法"></a>三种基础方法</h3><ul>
<li>function foo(arg) { statements }</li>
<li>var foo = function(arg) { statements }</li>
<li>var foo = new Function(“a”,”b”,”console.log(a+b)”) //等同于function foo(a,b){ console.log(a+b); }</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a=<span class="number">123</span>;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">&#125;</div><div class="line">foo(); <span class="comment">// --&gt; 123</span></div><div class="line"></div><div class="line"><span class="comment">// 上面的代码可以简写成下面这个</span></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> a=<span class="number">123</span>;</div><div class="line">    <span class="built_in">console</span>.log(a);</div><div class="line">&#125;)() <span class="comment">// --&gt; 123</span></div></pre></td></tr></table></figure>
<h3 id="ES6引入箭头函数"><a href="#ES6引入箭头函数" class="headerlink" title="ES6引入箭头函数"></a>ES6引入箭头函数</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="external">MDN箭头函数语法</a></p>
<p><a href="https://www.kancloud.cn/kancloud/es6-in-depth/47781" target="_blank" rel="external">深入浅出ES6箭头函数</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">x =&gt; <span class="built_in">console</span>.log(x*x);</div><div class="line"></div><div class="line"><span class="comment">// 等同于下面这个方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(x*x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x*x);</div><div class="line">foo(<span class="number">5</span>) <span class="comment">// --&gt; 25</span></div></pre></td></tr></table></figure>
<p>参数只有一个可以省略括号，其他情况如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 两个参数:</span></div><div class="line">(x, y) =&gt; x * x + y * y</div><div class="line"></div><div class="line"><span class="comment">// 无参数:</span></div><div class="line">() =&gt; <span class="number">3.14</span></div><div class="line"></div><div class="line"><span class="comment">// 可变参数:</span></div><div class="line">(x, y, ...rest) =&gt; &#123;</div><div class="line">    <span class="keyword">var</span> i, sum = x + y;</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;rest.length; i++) &#123;</div><div class="line">        sum += rest[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="箭头函数改变了this指向"><a href="#箭头函数改变了this指向" class="headerlink" title="箭头函数改变了this指向"></a>箭头函数改变了this指向</h4><p>箭头函数内部的this是词法作用域，由上下文确定。</p>
<p>由于JavaScript函数对this绑定的错误处理，下面的例子无法得到预期结果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</div><div class="line">    <span class="attr">getAge</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> b = <span class="keyword">this</span>.birth; <span class="comment">// 1990</span></div><div class="line">        <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="keyword">this</span>.birth; <span class="comment">// this指向window或undefined</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> fn();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.getAge(); <span class="comment">// --&gt; NaN</span></div></pre></td></tr></table></figure>
<p>箭头函数完全修复了this的指向，this总是指向词法作用域，也就是外层调用者obj</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</div><div class="line">    <span class="attr">getAge</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> b = <span class="keyword">this</span>.birth; <span class="comment">// 1990</span></div><div class="line">        <span class="keyword">var</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear() - <span class="keyword">this</span>.birth; <span class="comment">// this指向obj对象</span></div><div class="line">        <span class="keyword">return</span> fn();</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.getAge(); <span class="comment">// 25</span></div></pre></td></tr></table></figure>
<p>如果使用箭头函数，以前的那种hack写法：<br>var that = this;<br>就不再需要了。</p>
<p>由于this在箭头函数中已经按照词法作用域绑定了，所以，用call()或者apply()调用箭头函数时，无法对this进行绑定，即传入的第一个参数被忽略</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="attr">birth</span>: <span class="number">1990</span>,</div><div class="line">    <span class="attr">getAge</span>: <span class="function"><span class="keyword">function</span> (<span class="params">year</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> b = <span class="keyword">this</span>.birth; <span class="comment">// 1990</span></div><div class="line">        <span class="keyword">var</span> fn = <span class="function">(<span class="params">y</span>) =&gt;</span> y - <span class="keyword">this</span>.birth; <span class="comment">// this.birth仍是1990</span></div><div class="line">        <span class="keyword">return</span> fn.call(&#123;<span class="attr">birth</span>:<span class="number">2000</span>&#125;, year);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">obj.getAge(<span class="number">2015</span>); <span class="comment">// 25</span></div></pre></td></tr></table></figure>
<h2 id="Javascript闭包（Closure）"><a href="#Javascript闭包（Closure）" class="headerlink" title="Javascript闭包（Closure）"></a>Javascript闭包（Closure）</h2><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>变量的作用域无非就两种：全局变量和局部变量。</p>
<p>Javascript函数内部可以直接读取全局变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">123</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a);</div><div class="line">&#125;</div><div class="line">foo() <span class="comment">// --&gt; 123</span></div></pre></td></tr></table></figure>
<p>在函数外部无法读取函数内的局部变量</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> a=<span class="number">123</span>;</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">//ReferenceError: a is not defined</span></div></pre></td></tr></table></figure>
<p>这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  a=<span class="number">123</span>;</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// --&gt; 123</span></div></pre></td></tr></table></figure>
<h3 id="如何从外部读取局部变量？"><a href="#如何从外部读取局部变量？" class="headerlink" title="如何从外部读取局部变量？"></a>如何从外部读取局部变量？</h3><p>出于种种原因，我们有时候需要得到函数内的局部变量。但是，前面已经说过了，正常情况下，这是办不到的，只有通过变通方法才能实现。</p>
<p>那就是在函数的内部，再定义一个函数:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　<span class="keyword">var</span> n=<span class="number">123</span>;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="built_in">console</span>.log(n); <span class="comment">// --&gt; 123</span></div><div class="line">　　&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的”链式作用域”结构（chain scope），子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。</p>
<p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　<span class="keyword">var</span> n=<span class="number">123</span>;</div><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　<span class="built_in">console</span>.log(n); </div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> result=f1();</div><div class="line">result(); <span class="comment">// --&gt; 123</span></div><div class="line"></div><div class="line"><span class="comment">//也可以这样</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> n=<span class="number">123</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(x);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> x=<span class="number">456</span>;</div><div class="line"><span class="keyword">var</span> result=f1()(x);</div></pre></td></tr></table></figure>
<h3 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h3><p>上一节代码中的f2函数，就是闭包。</p>
<p>简单理解闭包就是能够读取其他函数内部变量的函数。</p>
<p>由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。</p>
<p>所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<h3 id="闭包的用途"><a href="#闭包的用途" class="headerlink" title="闭包的用途"></a>闭包的用途</h3><p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　　　nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="built_in">console</span>.log(n);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> f2;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> result=f1();</div><div class="line">　　result(); <span class="comment">// 999</span></div><div class="line">　　nAdd();</div><div class="line">　　result(); <span class="comment">// 1000</span></div></pre></td></tr></table></figure>
<p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。</p>
<p>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</p>
<p>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。</p>
<h3 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h3><p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p>
<p>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>
<h3 id="理解下面几段代码"><a href="#理解下面几段代码" class="headerlink" title="理解下面几段代码"></a>理解下面几段代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">  <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">  <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> that.name</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">  <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> name</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()())</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span></div><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">"My Object"</span>,</div><div class="line">  <span class="attr">getNameFunc</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.name</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(object.getNameFunc()());</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      介绍splice和slice的区别、js创建函数的几种方法、闭包的概念
    
    </summary>
    
      <category term="笔记" scheme="http://wangriyu.wang/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javaScript" scheme="http://wangriyu.wang/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>0423-JS笔记</title>
    <link href="http://wangriyu.wang/2017/04/23/20170423%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://wangriyu.wang/2017/04/23/20170423前端笔记/</id>
    <published>2017-04-22T16:00:00.000Z</published>
    <updated>2017-08-15T14:24:29.000Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=411988621&auto=1&height=66"></iframe>

<h2 id="一、var、let、const区别与联系"><a href="#一、var、let、const区别与联系" class="headerlink" title="一、var、let、const区别与联系"></a>一、var、let、const区别与联系</h2><h3 id="JavaScript是弱类型语言，var可以定义各种数据类型和对象"><a href="#JavaScript是弱类型语言，var可以定义各种数据类型和对象" class="headerlink" title="JavaScript是弱类型语言，var可以定义各种数据类型和对象"></a>JavaScript是弱类型语言，var可以定义各种数据类型和对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> x = <span class="string">"abc"</span>;</div><div class="line"><span class="keyword">var</span> x = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> x = &#123; <span class="attr">name0</span> : value0,<span class="attr">name1</span> : value1 &#125;;</div><div class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"abc"</span>,<span class="number">123</span>,<span class="literal">true</span>); <span class="comment">// var x = ["abc",123,true]</span></div><div class="line"><span class="keyword">var</span> y; <span class="comment">//undefined</span></div><div class="line"><span class="keyword">var</span> y = <span class="literal">null</span>; <span class="comment">//null</span></div></pre></td></tr></table></figure>
<h3 id="var可以重复声明并赋值同一变量，后者覆盖前者-但let声明的变量在同一块级作用域中不能重复"><a href="#var可以重复声明并赋值同一变量，后者覆盖前者-但let声明的变量在同一块级作用域中不能重复" class="headerlink" title="var可以重复声明并赋值同一变量，后者覆盖前者;但let声明的变量在同一块级作用域中不能重复"></a>var可以重复声明并赋值同一变量，后者覆盖前者;但let声明的变量在同一块级作用域中不能重复</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>; <span class="comment">//var作用域是全局的或者函数级的</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> x = <span class="number">1</span>; <span class="comment">//let作用域是块级的&#123;&#125;内</span></div><div class="line">  <span class="built_in">console</span>.log(x);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 0</span></div><div class="line">foo() <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="循环体中，第一个例子循环本身及三次-timeout-回调均共享唯一的变量-i-。当循环结束执行时，i-的值变为3，当第一个-timeout-执行时，调用的-i-值为-3-；第二个人例子每次循环let声明的i均不一样，输出自然不一样。而的第二个才是我们想要的结果，所以循环体条件中很多情况用let更好"><a href="#循环体中，第一个例子循环本身及三次-timeout-回调均共享唯一的变量-i-。当循环结束执行时，i-的值变为3，当第一个-timeout-执行时，调用的-i-值为-3-；第二个人例子每次循环let声明的i均不一样，输出自然不一样。而的第二个才是我们想要的结果，所以循环体条件中很多情况用let更好" class="headerlink" title="循环体中，第一个例子循环本身及三次 timeout 回调均共享唯一的变量 i 。当循环结束执行时，i 的值变为3，当第一个 timeout 执行时，调用的 i 值为 3 ；第二个人例子每次循环let声明的i均不一样，输出自然不一样。而的第二个才是我们想要的结果，所以循环体条件中很多情况用let更好"></a>循环体中，第一个例子循环本身及三次 timeout 回调均共享唯一的变量 i 。当循环结束执行时，i 的值变为3，当第一个 timeout 执行时，调用的 i 值为 3 ；第二个人例子每次循环let声明的i均不一样，输出自然不一样。而的第二个才是我们想要的结果，所以循环体条件中很多情况用let更好</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(i)</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125; <span class="comment">//输出3个3</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(i)</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125; <span class="comment">//输出0，1，2</span></div></pre></td></tr></table></figure>
<h3 id="let是更完美的var"><a href="#let是更完美的var" class="headerlink" title="let是更完美的var"></a>let是更完美的var</h3><ul>
<li>let声明的变量拥有块级作用域</li>
<li>let声明的全局变量不是全局对象的属性</li>
<li>形如for (let i…)的循环在每次迭代时都为i创建新的绑定</li>
<li>用let重定义变量会抛出一个语法错误（SyntaxError）</li>
</ul>
<h3 id="const是ES6引入的新的声明类关键词，用来定义常量，不可改变常量的值"><a href="#const是ES6引入的新的声明类关键词，用来定义常量，不可改变常量的值" class="headerlink" title="const是ES6引入的新的声明类关键词，用来定义常量，不可改变常量的值"></a>const是ES6引入的新的声明类关键词，用来定义常量，不可改变常量的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> MAX_CAT_SIZE_KG = <span class="number">3000</span>; <span class="comment">// 正确</span></div><div class="line"></div><div class="line">MAX_CAT_SIZE_KG = <span class="number">5000</span>; <span class="comment">// 语法错误（SyntaxError）</span></div><div class="line">MAX_CAT_SIZE_KG++; <span class="comment">// 仍然会导致语法错误</span></div></pre></td></tr></table></figure>
<h2 id="二、循环"><a href="#二、循环" class="headerlink" title="二、循环"></a>二、循环</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for 循环</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">   <span class="built_in">console</span>.log(i);</div><div class="line">   <span class="comment">// more statements</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//while循环</span></div><div class="line"><span class="keyword">var</span> n = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> x = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">while</span> (n &lt; <span class="number">3</span>) &#123;</div><div class="line">  n++;</div><div class="line">  x += n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//do-while循环</span></div></pre></td></tr></table></figure>
<h3 id="for…in-语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。"><a href="#for…in-语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。" class="headerlink" title="for…in 语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。"></a>for…in 语句以任意顺序遍历一个对象的可枚举属性。对于每个不同的属性，语句都会被执行。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"obj."</span> + prop + <span class="string">" = "</span> + obj[prop]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//obj.a = 1</span></div><div class="line"><span class="comment">//obj.b = 2</span></div><div class="line"><span class="comment">//obj.c = 3</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>, <span class="attr">c</span>:<span class="number">3</span>&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//a</span></div><div class="line"><span class="comment">//b</span></div><div class="line"><span class="comment">//c</span></div></pre></td></tr></table></figure>
<h3 id="for…of语句在可迭代对象-包括-Array-Map-Set-String-TypedArray，arguments-对象等等-上创建一个迭代循环，对每个不同属性的属性值-调用一个自定义的有执行语句的迭代挂钩"><a href="#for…of语句在可迭代对象-包括-Array-Map-Set-String-TypedArray，arguments-对象等等-上创建一个迭代循环，对每个不同属性的属性值-调用一个自定义的有执行语句的迭代挂钩" class="headerlink" title="for…of语句在可迭代对象(包括 Array, Map, Set, String, TypedArray，arguments 对象等等)上创建一个迭代循环，对每个不同属性的属性值,调用一个自定义的有执行语句的迭代挂钩."></a>for…of语句在可迭代对象(包括 Array, Map, Set, String, TypedArray，arguments 对象等等)上创建一个迭代循环，对每个不同属性的属性值,调用一个自定义的有执行语句的迭代挂钩.</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 遍历Array:</span></div><div class="line"><span class="keyword">let</span> iterable = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 10</span></div><div class="line"><span class="comment">// 20</span></div><div class="line"><span class="comment">// 30</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历 String:</span></div><div class="line"><span class="keyword">let</span> iterable = <span class="string">"boo"</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// "b"</span></div><div class="line"><span class="comment">// "o"</span></div><div class="line"><span class="comment">// "o"</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历 TypedArray:</span></div><div class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0x00</span>, <span class="number">0xff</span>]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 255</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历Map:</span></div><div class="line"><span class="comment">// Map对象就是简单的键/值映射。其中键和值可以是任意值(对象或者原始值)，键值不能重复</span></div><div class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">"a"</span>, <span class="number">1</span>], [<span class="string">"b"</span>, <span class="number">2</span>], [<span class="string">"c"</span>, <span class="number">3</span>]]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(entry);</div><div class="line">&#125;</div><div class="line"><span class="comment">// [a, 1]</span></div><div class="line"><span class="comment">// [b, 2]</span></div><div class="line"><span class="comment">// [c, 3]</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历 Set:</span></div><div class="line"><span class="comment">// 集合（Set）对象允许你存储任意类型的唯一值（不能重复），无论它是原始值或者是对象引用</span></div><div class="line"><span class="keyword">let</span> iterable = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]);</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="comment">// 3</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历DOM集合...</span></div><div class="line"><span class="comment">// 遍历生成器...</span></div><div class="line"></div><div class="line"><span class="comment">// 遍历另外的可遍历对象:</span></div><div class="line"><span class="comment">// 您也可以遍历一个已经明确的可遍历（可迭代）协议。</span></div><div class="line"><span class="comment">// ES6语法中Symbol 是一种特殊的、不可变的数据类型，可以作为对象属性的标识符使用。Symbol 对象是一个 symbol primitive data type 的隐式对象包装器。</span></div><div class="line"><span class="keyword">var</span> iterable = &#123;</div><div class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">i</span>: <span class="number">0</span>,</div><div class="line">      next() &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.i &lt; <span class="number">3</span>) &#123;</div><div class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="keyword">this</span>.i++, <span class="attr">done</span>: <span class="literal">false</span> &#125;;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0</span></div><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h3 id="for…of与for…in的区别"><a href="#for…of与for…in的区别" class="headerlink" title="for…of与for…in的区别"></a>for…of与for…in的区别</h3><ul>
<li>for…in循环会遍历一个object所有的可枚举属性。</li>
<li>for…of语法是为各种collection对象专门定制的，并不适用于所有的object.它会以这种方式迭代出任何拥有[Symbol.iterator] 属性的collection对象的每个元素。</li>
</ul>
<p>下面的例子演示了for…of 循环和 for…in 循环的区别。for…in 遍历（当前对象及其原型上的）每一个属性名称,而 for…of遍历（当前对象上的）每一个属性值:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.objCustom = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;; </div><div class="line"><span class="built_in">Array</span>.prototype.arrCustom = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> iterable = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>];</div><div class="line">iterable.foo = <span class="string">"hello"</span>;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// logs 0, 1, 2, "foo", "arrCustom", "objCustom"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> iterable) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i); <span class="comment">// logs 3, 5, 7</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="三、数组"><a href="#三、数组" class="headerlink" title="三、数组"></a>三、数组</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array对象-MDN</a></p>
<h3 id="遍历数组："><a href="#遍历数组：" class="headerlink" title="遍历数组："></a>遍历数组：</h3><p><strong>普通方法遍历</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for循环</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; myArray.length; index++) &#123;</div><div class="line">  <span class="built_in">console</span>.log(myArray[index]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// for-of循环</span></div><div class="line"><span class="comment">// 与forEach()不同的是，它可以正确响应break、continue和return语句</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> myArray) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>forEach遍历</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">对数组的遍历，参数是一个回调函数</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">x, i</span>) </span>&#123; <span class="built_in">console</span>.log(i+<span class="string">'.'</span>+x) &#125;) <span class="comment">//x：数组中遍历到的每一个元素，i：相对应的下标</span></div><div class="line"> </div><div class="line"><span class="comment">// 0.a</span></div><div class="line"><span class="comment">// 1.b</span></div><div class="line"><span class="comment">// 2.c</span></div></pre></td></tr></table></figure>
<p><strong>map遍历</strong></p>
<p>对数组的遍历，参数是一个回调函数，与forEach不同的是，map函数返回一个数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x, i</span>) </span>&#123; <span class="keyword">return</span> i+<span class="string">'.'</span>+x &#125;) <span class="comment">//x：数组中遍历到的每一个元素，i：相对应的下标</span></div><div class="line"> </div><div class="line"><span class="comment">// [ '0.a', '1.b', '2.c' ]</span></div></pre></td></tr></table></figure>
<p><strong>every遍历</strong></p>
<p>检查数组里的每一个元素的类型，参数是一个回调函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>].every(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">'string'</span> &#125;) <span class="comment">//x：数组中遍历到的每一个元素</span></div><div class="line"><span class="comment">// true</span></div><div class="line"></div><div class="line">[<span class="string">'a'</span>,<span class="number">123</span>].every(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> x === <span class="string">'string'</span> &#125;)</div><div class="line"><span class="comment">// false</span></div></pre></td></tr></table></figure>
<h2 id="四、浮点型"><a href="#四、浮点型" class="headerlink" title="四、浮点型"></a>四、浮点型</h2><p>IEEE 754<br>JavaScript中的浮点数采用IEEE-754格式的规定。更具体的说是一个双精度格式，这意味着每个浮点数占64位。虽然它不是二进制表示浮点数的唯一途径，但它是目前最广泛使用的格式。该格式用64位二进制表示像下面这样：<br><img src="http://yanhaijing.com/blog/75.png" alt="image"><br>你可能注意到机器表示的方法和约定俗成的书面表示一点不同。在64位中，1位用于标志位——用来表示一个数是正数还是负数。11位用于指数–这允许指数最大到1024。剩下的52位代表的尾数。如果你曾经好奇为什么JavaScript中的某些东西如+0 和 -0，标志位说明一切——JavaScript中的所有数字都有符号位。Infinity和NaN也被编码进浮点数——2047作为一个特殊的指数。如果尾数是0，它是一个正无穷或负无限。如果不是，那么它是NaN。</p>
<p><a href="https://www.cnblogs.com/snandy/p/4943138.html" target="_blank" rel="external">JS数字精度丢失的一些典型问题</a></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * floatTool 包含加减乘除四个方法，能确保浮点数运算不丢失精度</div><div class="line"> *</div><div class="line"> * 我们知道计算机编程语言里浮点数计算会存在精度丢失问题（或称舍入误差），其根本原因是二进制和实现位数限制有些数无法有限表示</div><div class="line"> * 以下是十进制小数对应的二进制表示</div><div class="line"> *      0.1 &gt;&gt; 0.0001 1001 1001 1001…（1001无限循环）</div><div class="line"> *      0.2 &gt;&gt; 0.0011 0011 0011 0011…（0011无限循环）</div><div class="line"> * 计算机里每种数据类型的存储是一个有限宽度，比如 JavaScript 使用 64 位存储数字类型，因此超出的会舍去。舍去的部分就是精度丢失的部分。</div><div class="line"> *</div><div class="line"> * ** method **</div><div class="line"> *  add / subtract / multiply /divide</div><div class="line"> *</div><div class="line"> * ** explame **</div><div class="line"> *  0.1 + 0.2 == 0.30000000000000004 （多了 0.00000000000004）</div><div class="line"> *  0.2 + 0.4 == 0.6000000000000001  （多了 0.0000000000001）</div><div class="line"> *  19.9 * 100 == 1989.9999999999998 （少了 0.0000000000002）</div><div class="line"> *</div><div class="line"> * floatObj.add(0.1, 0.2) &gt;&gt; 0.3</div><div class="line"> * floatObj.multiply(19.9, 100) &gt;&gt; 1990</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> floatTool = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 判断obj是否为一个整数</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isInteger</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.floor(obj) === obj</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 将一个浮点数转成整数，返回整数和倍数。如 3.14 &gt;&gt; 314，倍数是 100</div><div class="line">     * @param floatNum &#123;number&#125; 小数</div><div class="line">     * @return &#123;object&#125;</div><div class="line">     *   &#123;times:100, num: 314&#125;</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">toInteger</span>(<span class="params">floatNum</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> ret = &#123;<span class="attr">times</span>: <span class="number">1</span>, <span class="attr">num</span>: <span class="number">0</span>&#125;</div><div class="line">        <span class="keyword">if</span> (isInteger(floatNum)) &#123;</div><div class="line">            ret.num = floatNum</div><div class="line">            <span class="keyword">return</span> ret</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> strfi  = floatNum + <span class="string">''</span></div><div class="line">        <span class="keyword">var</span> dotPos = strfi.indexOf(<span class="string">'.'</span>)</div><div class="line">        <span class="keyword">var</span> len    = strfi.substr(dotPos+<span class="number">1</span>).length</div><div class="line">        <span class="keyword">var</span> times  = <span class="built_in">Math</span>.pow(<span class="number">10</span>, len)</div><div class="line">        <span class="keyword">var</span> intNum = <span class="built_in">parseInt</span>(floatNum * times + <span class="number">0.5</span>, <span class="number">10</span>)</div><div class="line">        ret.times  = times</div><div class="line">        ret.num    = intNum</div><div class="line">        <span class="keyword">return</span> ret</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * 核心方法，实现加减乘除运算，确保不丢失精度</div><div class="line">     * 思路：把小数放大为整数（乘），进行算术运算，再缩小为小数（除）</div><div class="line">     *</div><div class="line">     * @param a &#123;number&#125; 运算数1</div><div class="line">     * @param b &#123;number&#125; 运算数2</div><div class="line">     * @param digits &#123;number&#125; 精度，保留的小数点数，比如 2, 即保留为两位小数</div><div class="line">     * @param op &#123;string&#125; 运算类型，有加减乘除（add/subtract/multiply/divide）</div><div class="line">     *</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">operation</span>(<span class="params">a, b, op</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> o1 = toInteger(a)</div><div class="line">        <span class="keyword">var</span> o2 = toInteger(b)</div><div class="line">        <span class="keyword">var</span> n1 = o1.num</div><div class="line">        <span class="keyword">var</span> n2 = o2.num</div><div class="line">        <span class="keyword">var</span> t1 = o1.times</div><div class="line">        <span class="keyword">var</span> t2 = o2.times</div><div class="line">        <span class="keyword">var</span> max = t1 &gt; t2 ? t1 : t2</div><div class="line">        <span class="keyword">var</span> result = <span class="literal">null</span></div><div class="line">        <span class="keyword">switch</span> (op) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'add'</span>:</div><div class="line">                <span class="keyword">if</span> (t1 === t2) &#123; <span class="comment">// 两个小数位数相同</span></div><div class="line">                    result = n1 + n2</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t1 &gt; t2) &#123; <span class="comment">// o1 小数位 大于 o2</span></div><div class="line">                    result = n1 + n2 * (t1 / t2)</div><div class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// o1 小数位 小于 o2</span></div><div class="line">                    result = n1 * (t2 / t1) + n2</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> result / max</div><div class="line">            <span class="keyword">case</span> <span class="string">'subtract'</span>:</div><div class="line">                <span class="keyword">if</span> (t1 === t2) &#123;</div><div class="line">                    result = n1 - n2</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t1 &gt; t2) &#123;</div><div class="line">                    result = n1 - n2 * (t1 / t2)</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    result = n1 * (t2 / t1) - n2</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> result / max</div><div class="line">            <span class="keyword">case</span> <span class="string">'multiply'</span>:</div><div class="line">                result = (n1 * n2) / (t1 * t2)</div><div class="line">                <span class="keyword">return</span> result</div><div class="line">            <span class="keyword">case</span> <span class="string">'divide'</span>:</div><div class="line">                <span class="keyword">return</span> result = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> r1 = n1 / n2</div><div class="line">                    <span class="keyword">var</span> r2 = t2 / t1</div><div class="line">                    <span class="keyword">return</span> operation(r1, r2, <span class="string">'multiply'</span>)</div><div class="line">                &#125;()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 加减乘除的四个接口</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> operation(a, b, <span class="string">'add'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">subtract</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> operation(a, b, <span class="string">'subtract'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> operation(a, b, <span class="string">'multiply'</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> operation(a, b, <span class="string">'divide'</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// exports</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">add</span>: add,</div><div class="line">        <span class="attr">subtract</span>: subtract,</div><div class="line">        <span class="attr">multiply</span>: multiply,</div><div class="line">        <span class="attr">divide</span>: divide</div><div class="line">    &#125;</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      记录JS的变量类型、几种常见循环、几种数组遍历、浮点数问题
    
    </summary>
    
      <category term="笔记" scheme="http://wangriyu.wang/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="javaScript" scheme="http://wangriyu.wang/tags/javaScript/"/>
    
  </entry>
  
</feed>
